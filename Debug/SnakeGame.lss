
SnakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00005656  000056ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000235  00800106  00800106  00005790  2**0
                  ALLOC
  3 .stab         00004080  00000000  00000000  00005790  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015a1  00000000  00000000  00009810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000adb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000aef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ccaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000db95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e944  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ed31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f4ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 33       	cpi	r26, 0x3B	; 59
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 21 	call	0x429c	; 0x429c <main>
      8a:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8e 2a 	jmp	0x551c	; 0x551c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 72 2a 	jmp	0x54e4	; 0x54e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8e 2a 	jmp	0x551c	; 0x551c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7e 2a 	jmp	0x54fc	; 0x54fc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9e 2a 	jmp	0x553c	; 0x553c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	6f ef       	ldi	r22, 0xFF	; 255
     b52:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	6f ef       	ldi	r22, 0xFF	; 255
     b5a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	6f ef       	ldi	r22, 0xFF	; 255
     b6a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	27 97       	sbiw	r28, 0x07	; 7
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	6a 83       	std	Y+2, r22	; 0x02
     b8c:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	85 30       	cpi	r24, 0x05	; 5
     b92:	08 f0       	brcs	.+2      	; 0xb96 <DIO_voidSetPinDir+0x22>
     b94:	f4 c0       	rjmp	.+488    	; 0xd7e <DIO_voidSetPinDir+0x20a>
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	88 23       	and	r24, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_voidSetPinDir+0x2a>
     b9c:	f0 c0       	rjmp	.+480    	; 0xd7e <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	88 30       	cpi	r24, 0x08	; 8
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <DIO_voidSetPinDir+0x32>
     ba4:	ec c0       	rjmp	.+472    	; 0xd7e <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	09 f0       	breq	.+2      	; 0xbae <DIO_voidSetPinDir+0x3a>
     bac:	70 c0       	rjmp	.+224    	; 0xc8e <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	3f 83       	std	Y+7, r19	; 0x07
     bb6:	2e 83       	std	Y+6, r18	; 0x06
     bb8:	8e 81       	ldd	r24, Y+6	; 0x06
     bba:	9f 81       	ldd	r25, Y+7	; 0x07
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	51 f1       	breq	.+84     	; 0xc16 <DIO_voidSetPinDir+0xa2>
     bc2:	2e 81       	ldd	r18, Y+6	; 0x06
     bc4:	3f 81       	ldd	r19, Y+7	; 0x07
     bc6:	23 30       	cpi	r18, 0x03	; 3
     bc8:	31 05       	cpc	r19, r1
     bca:	34 f4       	brge	.+12     	; 0xbd8 <DIO_voidSetPinDir+0x64>
     bcc:	8e 81       	ldd	r24, Y+6	; 0x06
     bce:	9f 81       	ldd	r25, Y+7	; 0x07
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	91 05       	cpc	r25, r1
     bd4:	61 f0       	breq	.+24     	; 0xbee <DIO_voidSetPinDir+0x7a>
     bd6:	d3 c0       	rjmp	.+422    	; 0xd7e <DIO_voidSetPinDir+0x20a>
     bd8:	2e 81       	ldd	r18, Y+6	; 0x06
     bda:	3f 81       	ldd	r19, Y+7	; 0x07
     bdc:	23 30       	cpi	r18, 0x03	; 3
     bde:	31 05       	cpc	r19, r1
     be0:	71 f1       	breq	.+92     	; 0xc3e <DIO_voidSetPinDir+0xca>
     be2:	8e 81       	ldd	r24, Y+6	; 0x06
     be4:	9f 81       	ldd	r25, Y+7	; 0x07
     be6:	84 30       	cpi	r24, 0x04	; 4
     be8:	91 05       	cpc	r25, r1
     bea:	e9 f1       	breq	.+122    	; 0xc66 <DIO_voidSetPinDir+0xf2>
     bec:	c8 c0       	rjmp	.+400    	; 0xd7e <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
     bee:	aa e3       	ldi	r26, 0x3A	; 58
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ea e3       	ldi	r30, 0x3A	; 58
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	48 2f       	mov	r20, r24
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 2e       	mov	r0, r18
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_voidSetPinDir+0x98>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	0a 94       	dec	r0
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_voidSetPinDir+0x94>
     c10:	84 2b       	or	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	b4 c0       	rjmp	.+360    	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
     c16:	a7 e3       	ldi	r26, 0x37	; 55
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e7 e3       	ldi	r30, 0x37	; 55
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_voidSetPinDir+0xc0>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_voidSetPinDir+0xbc>
     c38:	84 2b       	or	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	a0 c0       	rjmp	.+320    	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
     c3e:	a4 e3       	ldi	r26, 0x34	; 52
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e4 e3       	ldi	r30, 0x34	; 52
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_voidSetPinDir+0xe8>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_voidSetPinDir+0xe4>
     c60:	84 2b       	or	r24, r20
     c62:	8c 93       	st	X, r24
     c64:	8c c0       	rjmp	.+280    	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
     c66:	a1 e3       	ldi	r26, 0x31	; 49
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e1 e3       	ldi	r30, 0x31	; 49
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	48 2f       	mov	r20, r24
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 2e       	mov	r0, r18
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_voidSetPinDir+0x110>
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	0a 94       	dec	r0
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_voidSetPinDir+0x10c>
     c88:	84 2b       	or	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	78 c0       	rjmp	.+240    	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	88 23       	and	r24, r24
     c92:	09 f0       	breq	.+2      	; 0xc96 <DIO_voidSetPinDir+0x122>
     c94:	74 c0       	rjmp	.+232    	; 0xd7e <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	3d 83       	std	Y+5, r19	; 0x05
     c9e:	2c 83       	std	Y+4, r18	; 0x04
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	9d 81       	ldd	r25, Y+5	; 0x05
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	91 05       	cpc	r25, r1
     ca8:	61 f1       	breq	.+88     	; 0xd02 <DIO_voidSetPinDir+0x18e>
     caa:	2c 81       	ldd	r18, Y+4	; 0x04
     cac:	3d 81       	ldd	r19, Y+5	; 0x05
     cae:	23 30       	cpi	r18, 0x03	; 3
     cb0:	31 05       	cpc	r19, r1
     cb2:	34 f4       	brge	.+12     	; 0xcc0 <DIO_voidSetPinDir+0x14c>
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	9d 81       	ldd	r25, Y+5	; 0x05
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	91 05       	cpc	r25, r1
     cbc:	69 f0       	breq	.+26     	; 0xcd8 <DIO_voidSetPinDir+0x164>
     cbe:	5f c0       	rjmp	.+190    	; 0xd7e <DIO_voidSetPinDir+0x20a>
     cc0:	2c 81       	ldd	r18, Y+4	; 0x04
     cc2:	3d 81       	ldd	r19, Y+5	; 0x05
     cc4:	23 30       	cpi	r18, 0x03	; 3
     cc6:	31 05       	cpc	r19, r1
     cc8:	89 f1       	breq	.+98     	; 0xd2c <DIO_voidSetPinDir+0x1b8>
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
     ccc:	9d 81       	ldd	r25, Y+5	; 0x05
     cce:	84 30       	cpi	r24, 0x04	; 4
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <DIO_voidSetPinDir+0x162>
     cd4:	40 c0       	rjmp	.+128    	; 0xd56 <DIO_voidSetPinDir+0x1e2>
     cd6:	53 c0       	rjmp	.+166    	; 0xd7e <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
     cd8:	aa e3       	ldi	r26, 0x3A	; 58
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	ea e3       	ldi	r30, 0x3A	; 58
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DIO_voidSetPinDir+0x182>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <DIO_voidSetPinDir+0x17e>
     cfa:	80 95       	com	r24
     cfc:	84 23       	and	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	3e c0       	rjmp	.+124    	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
     d02:	a7 e3       	ldi	r26, 0x37	; 55
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e3       	ldi	r30, 0x37	; 55
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_voidSetPinDir+0x1ac>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_voidSetPinDir+0x1a8>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	29 c0       	rjmp	.+82     	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
     d2c:	a4 e3       	ldi	r26, 0x34	; 52
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e4 e3       	ldi	r30, 0x34	; 52
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_voidSetPinDir+0x1d6>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_voidSetPinDir+0x1d2>
     d4e:	80 95       	com	r24
     d50:	84 23       	and	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	14 c0       	rjmp	.+40     	; 0xd7e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
     d56:	a1 e3       	ldi	r26, 0x31	; 49
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 e3       	ldi	r30, 0x31	; 49
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_voidSetPinDir+0x200>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_voidSetPinDir+0x1fc>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
     d7e:	27 96       	adiw	r28, 0x07	; 7
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	27 97       	sbiw	r28, 0x07	; 7
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	6a 83       	std	Y+2, r22	; 0x02
     da8:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	85 30       	cpi	r24, 0x05	; 5
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <DIO_voidSetPinValue+0x22>
     db0:	f4 c0       	rjmp	.+488    	; 0xf9a <DIO_voidSetPinValue+0x20a>
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	09 f4       	brne	.+2      	; 0xdba <DIO_voidSetPinValue+0x2a>
     db8:	f0 c0       	rjmp	.+480    	; 0xf9a <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	88 30       	cpi	r24, 0x08	; 8
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <DIO_voidSetPinValue+0x32>
     dc0:	ec c0       	rjmp	.+472    	; 0xf9a <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <DIO_voidSetPinValue+0x3a>
     dc8:	70 c0       	rjmp	.+224    	; 0xeaa <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3f 83       	std	Y+7, r19	; 0x07
     dd2:	2e 83       	std	Y+6, r18	; 0x06
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	9f 81       	ldd	r25, Y+7	; 0x07
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	91 05       	cpc	r25, r1
     ddc:	51 f1       	breq	.+84     	; 0xe32 <DIO_voidSetPinValue+0xa2>
     dde:	2e 81       	ldd	r18, Y+6	; 0x06
     de0:	3f 81       	ldd	r19, Y+7	; 0x07
     de2:	23 30       	cpi	r18, 0x03	; 3
     de4:	31 05       	cpc	r19, r1
     de6:	34 f4       	brge	.+12     	; 0xdf4 <DIO_voidSetPinValue+0x64>
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	9f 81       	ldd	r25, Y+7	; 0x07
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	61 f0       	breq	.+24     	; 0xe0a <DIO_voidSetPinValue+0x7a>
     df2:	d3 c0       	rjmp	.+422    	; 0xf9a <DIO_voidSetPinValue+0x20a>
     df4:	2e 81       	ldd	r18, Y+6	; 0x06
     df6:	3f 81       	ldd	r19, Y+7	; 0x07
     df8:	23 30       	cpi	r18, 0x03	; 3
     dfa:	31 05       	cpc	r19, r1
     dfc:	71 f1       	breq	.+92     	; 0xe5a <DIO_voidSetPinValue+0xca>
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	9f 81       	ldd	r25, Y+7	; 0x07
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	91 05       	cpc	r25, r1
     e06:	e9 f1       	breq	.+122    	; 0xe82 <DIO_voidSetPinValue+0xf2>
     e08:	c8 c0       	rjmp	.+400    	; 0xf9a <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
     e0a:	ab e3       	ldi	r26, 0x3B	; 59
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e3       	ldi	r30, 0x3B	; 59
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <DIO_voidSetPinValue+0x98>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <DIO_voidSetPinValue+0x94>
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	b4 c0       	rjmp	.+360    	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
     e32:	a8 e3       	ldi	r26, 0x38	; 56
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e8 e3       	ldi	r30, 0x38	; 56
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_voidSetPinValue+0xc0>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_voidSetPinValue+0xbc>
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	a0 c0       	rjmp	.+320    	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
     e5a:	a5 e3       	ldi	r26, 0x35	; 53
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_voidSetPinValue+0xe8>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_voidSetPinValue+0xe4>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	8c c0       	rjmp	.+280    	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_voidSetPinValue+0x110>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_voidSetPinValue+0x10c>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	78 c0       	rjmp	.+240    	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	88 23       	and	r24, r24
     eae:	09 f0       	breq	.+2      	; 0xeb2 <DIO_voidSetPinValue+0x122>
     eb0:	74 c0       	rjmp	.+232    	; 0xf9a <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3d 83       	std	Y+5, r19	; 0x05
     eba:	2c 83       	std	Y+4, r18	; 0x04
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	91 05       	cpc	r25, r1
     ec4:	61 f1       	breq	.+88     	; 0xf1e <DIO_voidSetPinValue+0x18e>
     ec6:	2c 81       	ldd	r18, Y+4	; 0x04
     ec8:	3d 81       	ldd	r19, Y+5	; 0x05
     eca:	23 30       	cpi	r18, 0x03	; 3
     ecc:	31 05       	cpc	r19, r1
     ece:	34 f4       	brge	.+12     	; 0xedc <DIO_voidSetPinValue+0x14c>
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	69 f0       	breq	.+26     	; 0xef4 <DIO_voidSetPinValue+0x164>
     eda:	5f c0       	rjmp	.+190    	; 0xf9a <DIO_voidSetPinValue+0x20a>
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	23 30       	cpi	r18, 0x03	; 3
     ee2:	31 05       	cpc	r19, r1
     ee4:	89 f1       	breq	.+98     	; 0xf48 <DIO_voidSetPinValue+0x1b8>
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	9d 81       	ldd	r25, Y+5	; 0x05
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	91 05       	cpc	r25, r1
     eee:	09 f4       	brne	.+2      	; 0xef2 <DIO_voidSetPinValue+0x162>
     ef0:	40 c0       	rjmp	.+128    	; 0xf72 <DIO_voidSetPinValue+0x1e2>
     ef2:	53 c0       	rjmp	.+166    	; 0xf9a <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
     ef4:	ab e3       	ldi	r26, 0x3B	; 59
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e3       	ldi	r30, 0x3B	; 59
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_voidSetPinValue+0x182>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_voidSetPinValue+0x17e>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	3e c0       	rjmp	.+124    	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
     f1e:	a8 e3       	ldi	r26, 0x38	; 56
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e8 e3       	ldi	r30, 0x38	; 56
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_voidSetPinValue+0x1ac>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_voidSetPinValue+0x1a8>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	29 c0       	rjmp	.+82     	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_voidSetPinValue+0x1d6>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_voidSetPinValue+0x1d2>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
     f72:	a2 e3       	ldi	r26, 0x32	; 50
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e2 e3       	ldi	r30, 0x32	; 50
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_voidSetPinValue+0x200>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_voidSetPinValue+0x1fc>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
     f9a:	27 96       	adiw	r28, 0x07	; 7
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <DIO_u8GetPinValue+0x6>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <DIO_u8GetPinValue+0x8>
     fb4:	0f 92       	push	r0
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	85 30       	cpi	r24, 0x05	; 5
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <DIO_u8GetPinValue+0x1a>
     fc4:	74 c0       	rjmp	.+232    	; 0x10ae <DIO_u8GetPinValue+0x102>
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <DIO_u8GetPinValue+0x22>
     fcc:	70 c0       	rjmp	.+224    	; 0x10ae <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 30       	cpi	r24, 0x08	; 8
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <DIO_u8GetPinValue+0x2a>
     fd4:	6c c0       	rjmp	.+216    	; 0x10ae <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	3d 83       	std	Y+5, r19	; 0x05
     fde:	2c 83       	std	Y+4, r18	; 0x04
     fe0:	4c 81       	ldd	r20, Y+4	; 0x04
     fe2:	5d 81       	ldd	r21, Y+5	; 0x05
     fe4:	42 30       	cpi	r20, 0x02	; 2
     fe6:	51 05       	cpc	r21, r1
     fe8:	49 f1       	breq	.+82     	; 0x103c <DIO_u8GetPinValue+0x90>
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	34 f4       	brge	.+12     	; 0x1000 <DIO_u8GetPinValue+0x54>
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	3d 81       	ldd	r19, Y+5	; 0x05
     ff8:	21 30       	cpi	r18, 0x01	; 1
     ffa:	31 05       	cpc	r19, r1
     ffc:	61 f0       	breq	.+24     	; 0x1016 <DIO_u8GetPinValue+0x6a>
     ffe:	57 c0       	rjmp	.+174    	; 0x10ae <DIO_u8GetPinValue+0x102>
    1000:	4c 81       	ldd	r20, Y+4	; 0x04
    1002:	5d 81       	ldd	r21, Y+5	; 0x05
    1004:	43 30       	cpi	r20, 0x03	; 3
    1006:	51 05       	cpc	r21, r1
    1008:	61 f1       	breq	.+88     	; 0x1062 <DIO_u8GetPinValue+0xb6>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	84 30       	cpi	r24, 0x04	; 4
    1010:	91 05       	cpc	r25, r1
    1012:	d1 f1       	breq	.+116    	; 0x1088 <DIO_u8GetPinValue+0xdc>
    1014:	4c c0       	rjmp	.+152    	; 0x10ae <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    1016:	e9 e3       	ldi	r30, 0x39	; 57
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_u8GetPinValue+0x82>
    102a:	55 95       	asr	r21
    102c:	47 95       	ror	r20
    102e:	8a 95       	dec	r24
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_u8GetPinValue+0x7e>
    1032:	ca 01       	movw	r24, r20
    1034:	58 2f       	mov	r21, r24
    1036:	51 70       	andi	r21, 0x01	; 1
    1038:	5b 83       	std	Y+3, r21	; 0x03
    103a:	3b c0       	rjmp	.+118    	; 0x10b2 <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    103c:	e6 e3       	ldi	r30, 0x36	; 54
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a9 01       	movw	r20, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8GetPinValue+0xa8>
    1050:	55 95       	asr	r21
    1052:	47 95       	ror	r20
    1054:	8a 95       	dec	r24
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8GetPinValue+0xa4>
    1058:	ca 01       	movw	r24, r20
    105a:	58 2f       	mov	r21, r24
    105c:	51 70       	andi	r21, 0x01	; 1
    105e:	5b 83       	std	Y+3, r21	; 0x03
    1060:	28 c0       	rjmp	.+80     	; 0x10b2 <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    1062:	e3 e3       	ldi	r30, 0x33	; 51
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a9 01       	movw	r20, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_u8GetPinValue+0xce>
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_u8GetPinValue+0xca>
    107e:	ca 01       	movw	r24, r20
    1080:	58 2f       	mov	r21, r24
    1082:	51 70       	andi	r21, 0x01	; 1
    1084:	5b 83       	std	Y+3, r21	; 0x03
    1086:	15 c0       	rjmp	.+42     	; 0x10b2 <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    1088:	e0 e3       	ldi	r30, 0x30	; 48
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a9 01       	movw	r20, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8GetPinValue+0xf4>
    109c:	55 95       	asr	r21
    109e:	47 95       	ror	r20
    10a0:	8a 95       	dec	r24
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8GetPinValue+0xf0>
    10a4:	ca 01       	movw	r24, r20
    10a6:	58 2f       	mov	r21, r24
    10a8:	51 70       	andi	r21, 0x01	; 1
    10aa:	5b 83       	std	Y+3, r21	; 0x03
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	8b 83       	std	Y+3, r24	; 0x03
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <DIO_voidTogglePin+0x6>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <DIO_voidTogglePin+0x8>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	85 30       	cpi	r24, 0x05	; 5
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_voidTogglePin+0x18>
    10da:	77 c0       	rjmp	.+238    	; 0x11ca <DIO_voidTogglePin+0x106>
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <DIO_voidTogglePin+0x20>
    10e2:	73 c0       	rjmp	.+230    	; 0x11ca <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 30       	cpi	r24, 0x08	; 8
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <DIO_voidTogglePin+0x28>
    10ea:	6f c0       	rjmp	.+222    	; 0x11ca <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3c 83       	std	Y+4, r19	; 0x04
    10f4:	2b 83       	std	Y+3, r18	; 0x03
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	91 05       	cpc	r25, r1
    10fe:	51 f1       	breq	.+84     	; 0x1154 <DIO_voidTogglePin+0x90>
    1100:	2b 81       	ldd	r18, Y+3	; 0x03
    1102:	3c 81       	ldd	r19, Y+4	; 0x04
    1104:	23 30       	cpi	r18, 0x03	; 3
    1106:	31 05       	cpc	r19, r1
    1108:	34 f4       	brge	.+12     	; 0x1116 <DIO_voidTogglePin+0x52>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	61 f0       	breq	.+24     	; 0x112c <DIO_voidTogglePin+0x68>
    1114:	5a c0       	rjmp	.+180    	; 0x11ca <DIO_voidTogglePin+0x106>
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	23 30       	cpi	r18, 0x03	; 3
    111c:	31 05       	cpc	r19, r1
    111e:	71 f1       	breq	.+92     	; 0x117c <DIO_voidTogglePin+0xb8>
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	91 05       	cpc	r25, r1
    1128:	e9 f1       	breq	.+122    	; 0x11a4 <DIO_voidTogglePin+0xe0>
    112a:	4f c0       	rjmp	.+158    	; 0x11ca <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    112c:	ab e3       	ldi	r26, 0x3B	; 59
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e3       	ldi	r30, 0x3B	; 59
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_voidTogglePin+0x86>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_voidTogglePin+0x82>
    114e:	84 27       	eor	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	3b c0       	rjmp	.+118    	; 0x11ca <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    1154:	a8 e3       	ldi	r26, 0x38	; 56
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e8 e3       	ldi	r30, 0x38	; 56
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_voidTogglePin+0xae>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_voidTogglePin+0xaa>
    1176:	84 27       	eor	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	27 c0       	rjmp	.+78     	; 0x11ca <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    117c:	a5 e3       	ldi	r26, 0x35	; 53
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e5 e3       	ldi	r30, 0x35	; 53
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_voidTogglePin+0xd6>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_voidTogglePin+0xd2>
    119e:	84 27       	eor	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	13 c0       	rjmp	.+38     	; 0x11ca <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    11a4:	a2 e3       	ldi	r26, 0x32	; 50
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e2 e3       	ldi	r30, 0x32	; 50
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_voidTogglePin+0xfe>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_voidTogglePin+0xfa>
    11c6:	84 27       	eor	r24, r20
    11c8:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_voidSetPortDir+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <DIO_voidSetPortDir+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	85 30       	cpi	r24, 0x05	; 5
    11ec:	b0 f5       	brcc	.+108    	; 0x125a <DIO_voidSetPortDir+0x82>
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	88 23       	and	r24, r24
    11f2:	99 f1       	breq	.+102    	; 0x125a <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3c 83       	std	Y+4, r19	; 0x04
    11fc:	2b 83       	std	Y+3, r18	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	91 05       	cpc	r25, r1
    1206:	d9 f0       	breq	.+54     	; 0x123e <DIO_voidSetPortDir+0x66>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	23 30       	cpi	r18, 0x03	; 3
    120e:	31 05       	cpc	r19, r1
    1210:	34 f4       	brge	.+12     	; 0x121e <DIO_voidSetPortDir+0x46>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	61 f0       	breq	.+24     	; 0x1234 <DIO_voidSetPortDir+0x5c>
    121c:	1e c0       	rjmp	.+60     	; 0x125a <DIO_voidSetPortDir+0x82>
    121e:	2b 81       	ldd	r18, Y+3	; 0x03
    1220:	3c 81       	ldd	r19, Y+4	; 0x04
    1222:	23 30       	cpi	r18, 0x03	; 3
    1224:	31 05       	cpc	r19, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <DIO_voidSetPortDir+0x70>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	91 05       	cpc	r25, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <DIO_voidSetPortDir+0x7a>
    1232:	13 c0       	rjmp	.+38     	; 0x125a <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    1234:	ea e3       	ldi	r30, 0x3A	; 58
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
    123c:	0e c0       	rjmp	.+28     	; 0x125a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    123e:	e7 e3       	ldi	r30, 0x37	; 55
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24
    1246:	09 c0       	rjmp	.+18     	; 0x125a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    1248:	e4 e3       	ldi	r30, 0x34	; 52
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24
    1250:	04 c0       	rjmp	.+8      	; 0x125a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    1252:	e1 e3       	ldi	r30, 0x31	; 49
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	80 83       	st	Z, r24
			break;
		}
	}
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_voidSetPortValue+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <DIO_voidSetPortValue+0x8>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	85 30       	cpi	r24, 0x05	; 5
    127c:	b0 f5       	brcc	.+108    	; 0x12ea <DIO_voidSetPortValue+0x82>
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	88 23       	and	r24, r24
    1282:	99 f1       	breq	.+102    	; 0x12ea <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3c 83       	std	Y+4, r19	; 0x04
    128c:	2b 83       	std	Y+3, r18	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	d9 f0       	breq	.+54     	; 0x12ce <DIO_voidSetPortValue+0x66>
    1298:	2b 81       	ldd	r18, Y+3	; 0x03
    129a:	3c 81       	ldd	r19, Y+4	; 0x04
    129c:	23 30       	cpi	r18, 0x03	; 3
    129e:	31 05       	cpc	r19, r1
    12a0:	34 f4       	brge	.+12     	; 0x12ae <DIO_voidSetPortValue+0x46>
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <DIO_voidSetPortValue+0x5c>
    12ac:	1e c0       	rjmp	.+60     	; 0x12ea <DIO_voidSetPortValue+0x82>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	23 30       	cpi	r18, 0x03	; 3
    12b4:	31 05       	cpc	r19, r1
    12b6:	81 f0       	breq	.+32     	; 0x12d8 <DIO_voidSetPortValue+0x70>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	91 05       	cpc	r25, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <DIO_voidSetPortValue+0x7a>
    12c2:	13 c0       	rjmp	.+38     	; 0x12ea <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
    12cc:	0e c0       	rjmp	.+28     	; 0x12ea <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
			break;
		}
	}
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_u8GetPortValue+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_u8GetPortValue+0x8>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	85 30       	cpi	r24, 0x05	; 5
    130a:	b8 f5       	brcc	.+110    	; 0x137a <DIO_u8GetPortValue+0x82>
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 23       	and	r24, r24
    1310:	a1 f1       	breq	.+104    	; 0x137a <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3c 83       	std	Y+4, r19	; 0x04
    131a:	2b 83       	std	Y+3, r18	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	91 05       	cpc	r25, r1
    1324:	d9 f0       	breq	.+54     	; 0x135c <DIO_u8GetPortValue+0x64>
    1326:	2b 81       	ldd	r18, Y+3	; 0x03
    1328:	3c 81       	ldd	r19, Y+4	; 0x04
    132a:	23 30       	cpi	r18, 0x03	; 3
    132c:	31 05       	cpc	r19, r1
    132e:	34 f4       	brge	.+12     	; 0x133c <DIO_u8GetPortValue+0x44>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	61 f0       	breq	.+24     	; 0x1352 <DIO_u8GetPortValue+0x5a>
    133a:	1f c0       	rjmp	.+62     	; 0x137a <DIO_u8GetPortValue+0x82>
    133c:	2b 81       	ldd	r18, Y+3	; 0x03
    133e:	3c 81       	ldd	r19, Y+4	; 0x04
    1340:	23 30       	cpi	r18, 0x03	; 3
    1342:	31 05       	cpc	r19, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <DIO_u8GetPortValue+0x6e>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	91 05       	cpc	r25, r1
    134e:	81 f0       	breq	.+32     	; 0x1370 <DIO_u8GetPortValue+0x78>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    1352:	eb e3       	ldi	r30, 0x3B	; 59
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	90 81       	ld	r25, Z
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	11 c0       	rjmp	.+34     	; 0x137e <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	20 81       	ld	r18, Z
    1362:	2a 83       	std	Y+2, r18	; 0x02
    1364:	0c c0       	rjmp	.+24     	; 0x137e <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	30 81       	ld	r19, Z
    136c:	3a 83       	std	Y+2, r19	; 0x02
    136e:	07 c0       	rjmp	.+14     	; 0x137e <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1370:	e2 e3       	ldi	r30, 0x32	; 50
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    137a:	9f ef       	ldi	r25, 0xFF	; 255
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_voidTogglePort+0x6>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	85 30       	cpi	r24, 0x05	; 5
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_voidTogglePort+0x16>
    13a2:	43 c0       	rjmp	.+134    	; 0x142a <DIO_voidTogglePort+0x9c>
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <DIO_voidTogglePort+0x1e>
    13aa:	3f c0       	rjmp	.+126    	; 0x142a <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3b 83       	std	Y+3, r19	; 0x03
    13b4:	2a 83       	std	Y+2, r18	; 0x02
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 05       	cpc	r25, r1
    13be:	f1 f0       	breq	.+60     	; 0x13fc <DIO_voidTogglePort+0x6e>
    13c0:	2a 81       	ldd	r18, Y+2	; 0x02
    13c2:	3b 81       	ldd	r19, Y+3	; 0x03
    13c4:	23 30       	cpi	r18, 0x03	; 3
    13c6:	31 05       	cpc	r19, r1
    13c8:	34 f4       	brge	.+12     	; 0x13d6 <DIO_voidTogglePort+0x48>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	61 f0       	breq	.+24     	; 0x13ec <DIO_voidTogglePort+0x5e>
    13d4:	2a c0       	rjmp	.+84     	; 0x142a <DIO_voidTogglePort+0x9c>
    13d6:	2a 81       	ldd	r18, Y+2	; 0x02
    13d8:	3b 81       	ldd	r19, Y+3	; 0x03
    13da:	23 30       	cpi	r18, 0x03	; 3
    13dc:	31 05       	cpc	r19, r1
    13de:	b1 f0       	breq	.+44     	; 0x140c <DIO_voidTogglePort+0x7e>
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	91 05       	cpc	r25, r1
    13e8:	c9 f0       	breq	.+50     	; 0x141c <DIO_voidTogglePort+0x8e>
    13ea:	1f c0       	rjmp	.+62     	; 0x142a <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    13ec:	ab e3       	ldi	r26, 0x3B	; 59
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e3       	ldi	r30, 0x3B	; 59
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 95       	com	r24
    13f8:	8c 93       	st	X, r24
    13fa:	17 c0       	rjmp	.+46     	; 0x142a <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    13fc:	a8 e3       	ldi	r26, 0x38	; 56
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e8 e3       	ldi	r30, 0x38	; 56
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 95       	com	r24
    1408:	8c 93       	st	X, r24
    140a:	0f c0       	rjmp	.+30     	; 0x142a <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    140c:	a5 e3       	ldi	r26, 0x35	; 53
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e3       	ldi	r30, 0x35	; 53
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 95       	com	r24
    1418:	8c 93       	st	X, r24
    141a:	07 c0       	rjmp	.+14     	; 0x142a <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    141c:	a2 e3       	ldi	r26, 0x32	; 50
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e2 e3       	ldi	r30, 0x32	; 50
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 95       	com	r24
    1428:	8c 93       	st	X, r24
				break;
			}
		}
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	6f e7       	ldi	r22, 0x7F	; 127
    1442:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	6f e7       	ldi	r22, 0x7F	; 127
    1458:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    145c:	84 e0       	ldi	r24, 0x04	; 4
    145e:	6f e7       	ldi	r22, 0x7F	; 127
    1460:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_voidSetPortDir>
}
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	60 97       	sbiw	r28, 0x10	; 16
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1480:	ce 01       	movw	r24, r28
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	9d 87       	std	Y+13, r25	; 0x0d
    1486:	8c 87       	std	Y+12, r24	; 0x0c
    1488:	e3 ec       	ldi	r30, 0xC3	; 195
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	ff 87       	std	Y+15, r31	; 0x0f
    148e:	ee 87       	std	Y+14, r30	; 0x0e
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	f8 8b       	std	Y+16, r31	; 0x10
    1494:	ee 85       	ldd	r30, Y+14	; 0x0e
    1496:	ff 85       	ldd	r31, Y+15	; 0x0f
    1498:	00 80       	ld	r0, Z
    149a:	8e 85       	ldd	r24, Y+14	; 0x0e
    149c:	9f 85       	ldd	r25, Y+15	; 0x0f
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	9f 87       	std	Y+15, r25	; 0x0f
    14a2:	8e 87       	std	Y+14, r24	; 0x0e
    14a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    14a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    14a8:	00 82       	st	Z, r0
    14aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	9d 87       	std	Y+13, r25	; 0x0d
    14b2:	8c 87       	std	Y+12, r24	; 0x0c
    14b4:	98 89       	ldd	r25, Y+16	; 0x10
    14b6:	91 50       	subi	r25, 0x01	; 1
    14b8:	98 8b       	std	Y+16, r25	; 0x10
    14ba:	e8 89       	ldd	r30, Y+16	; 0x10
    14bc:	ee 23       	and	r30, r30
    14be:	51 f7       	brne	.-44     	; 0x1494 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    14c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	70 f4       	brcc	.+28     	; 0x14e2 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    14c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	ce 01       	movw	r24, r28
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	fc 01       	movw	r30, r24
    14d2:	e2 0f       	add	r30, r18
    14d4:	f3 1f       	adc	r31, r19
    14d6:	80 81       	ld	r24, Z
    14d8:	98 2f       	mov	r25, r24
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	69 2f       	mov	r22, r25
    14de:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
	}
}
    14e2:	60 96       	adiw	r28, 0x10	; 16
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	a1 97       	sbiw	r28, 0x21	; 33
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    1508:	ce 01       	movw	r24, r28
    150a:	43 96       	adiw	r24, 0x13	; 19
    150c:	9e 8f       	std	Y+30, r25	; 0x1e
    150e:	8d 8f       	std	Y+29, r24	; 0x1d
    1510:	ed ec       	ldi	r30, 0xCD	; 205
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	f8 a3       	std	Y+32, r31	; 0x20
    1516:	ef 8f       	std	Y+31, r30	; 0x1f
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	f9 a3       	std	Y+33, r31	; 0x21
    151c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    151e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1520:	00 80       	ld	r0, Z
    1522:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1524:	98 a1       	ldd	r25, Y+32	; 0x20
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	98 a3       	std	Y+32, r25	; 0x20
    152a:	8f 8f       	std	Y+31, r24	; 0x1f
    152c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    152e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1530:	00 82       	st	Z, r0
    1532:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1534:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	9e 8f       	std	Y+30, r25	; 0x1e
    153a:	8d 8f       	std	Y+29, r24	; 0x1d
    153c:	99 a1       	ldd	r25, Y+33	; 0x21
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	99 a3       	std	Y+33, r25	; 0x21
    1542:	e9 a1       	ldd	r30, Y+33	; 0x21
    1544:	ee 23       	and	r30, r30
    1546:	51 f7       	brne	.-44     	; 0x151c <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    1548:	1f 86       	std	Y+15, r1	; 0x0f
    154a:	18 8a       	std	Y+16, r1	; 0x10
    154c:	19 8a       	std	Y+17, r1	; 0x11
    154e:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1550:	1f 86       	std	Y+15, r1	; 0x0f
    1552:	18 8a       	std	Y+16, r1	; 0x10
    1554:	19 8a       	std	Y+17, r1	; 0x11
    1556:	1a 8a       	std	Y+18, r1	; 0x12
    1558:	8d c0       	rjmp	.+282    	; 0x1674 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    155a:	8f 85       	ldd	r24, Y+15	; 0x0f
    155c:	98 89       	ldd	r25, Y+16	; 0x10
    155e:	a9 89       	ldd	r26, Y+17	; 0x11
    1560:	ba 89       	ldd	r27, Y+18	; 0x12
    1562:	9e 01       	movw	r18, r28
    1564:	2d 5e       	subi	r18, 0xED	; 237
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	f9 01       	movw	r30, r18
    156a:	e8 0f       	add	r30, r24
    156c:	f9 1f       	adc	r31, r25
    156e:	80 81       	ld	r24, Z
    1570:	98 2f       	mov	r25, r24
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	69 2f       	mov	r22, r25
    1576:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e2       	ldi	r26, 0x20	; 32
    1580:	b1 e4       	ldi	r27, 0x41	; 65
    1582:	8b 87       	std	Y+11, r24	; 0x0b
    1584:	9c 87       	std	Y+12, r25	; 0x0c
    1586:	ad 87       	std	Y+13, r26	; 0x0d
    1588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a e7       	ldi	r20, 0x7A	; 122
    1598:	55 e4       	ldi	r21, 0x45	; 69
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	0f c0       	rjmp	.+30     	; 0x162c <SevSeg_voidSingleAutoCounter+0x138>
    160e:	80 e9       	ldi	r24, 0x90	; 144
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <SevSeg_voidSingleAutoCounter+0x126>
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <SevSeg_voidSingleAutoCounter+0x11a>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <SevSeg_voidSingleAutoCounter+0x162>
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    165e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1660:	98 89       	ldd	r25, Y+16	; 0x10
    1662:	a9 89       	ldd	r26, Y+17	; 0x11
    1664:	ba 89       	ldd	r27, Y+18	; 0x12
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	a1 1d       	adc	r26, r1
    166a:	b1 1d       	adc	r27, r1
    166c:	8f 87       	std	Y+15, r24	; 0x0f
    166e:	98 8b       	std	Y+16, r25	; 0x10
    1670:	a9 8b       	std	Y+17, r26	; 0x11
    1672:	ba 8b       	std	Y+18, r27	; 0x12
    1674:	8f 85       	ldd	r24, Y+15	; 0x0f
    1676:	98 89       	ldd	r25, Y+16	; 0x10
    1678:	a9 89       	ldd	r26, Y+17	; 0x11
    167a:	ba 89       	ldd	r27, Y+18	; 0x12
    167c:	8a 30       	cpi	r24, 0x0A	; 10
    167e:	91 05       	cpc	r25, r1
    1680:	a1 05       	cpc	r26, r1
    1682:	b1 05       	cpc	r27, r1
    1684:	0c f4       	brge	.+2      	; 0x1688 <SevSeg_voidSingleAutoCounter+0x194>
    1686:	69 cf       	rjmp	.-302    	; 0x155a <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    1688:	a1 96       	adiw	r28, 0x21	; 33
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	a5 97       	sbiw	r28, 0x25	; 37
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    16ae:	ce 01       	movw	r24, r28
    16b0:	47 96       	adiw	r24, 0x17	; 23
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
    16b6:	e7 ed       	ldi	r30, 0xD7	; 215
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	fc a3       	std	Y+36, r31	; 0x24
    16bc:	eb a3       	std	Y+35, r30	; 0x23
    16be:	fa e0       	ldi	r31, 0x0A	; 10
    16c0:	fd a3       	std	Y+37, r31	; 0x25
    16c2:	eb a1       	ldd	r30, Y+35	; 0x23
    16c4:	fc a1       	ldd	r31, Y+36	; 0x24
    16c6:	00 80       	ld	r0, Z
    16c8:	8b a1       	ldd	r24, Y+35	; 0x23
    16ca:	9c a1       	ldd	r25, Y+36	; 0x24
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	9c a3       	std	Y+36, r25	; 0x24
    16d0:	8b a3       	std	Y+35, r24	; 0x23
    16d2:	e9 a1       	ldd	r30, Y+33	; 0x21
    16d4:	fa a1       	ldd	r31, Y+34	; 0x22
    16d6:	00 82       	st	Z, r0
    16d8:	89 a1       	ldd	r24, Y+33	; 0x21
    16da:	9a a1       	ldd	r25, Y+34	; 0x22
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	9a a3       	std	Y+34, r25	; 0x22
    16e0:	89 a3       	std	Y+33, r24	; 0x21
    16e2:	9d a1       	ldd	r25, Y+37	; 0x25
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	9d a3       	std	Y+37, r25	; 0x25
    16e8:	ed a1       	ldd	r30, Y+37	; 0x25
    16ea:	ee 23       	and	r30, r30
    16ec:	51 f7       	brne	.-44     	; 0x16c2 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    16ee:	1b 8a       	std	Y+19, r1	; 0x13
    16f0:	1c 8a       	std	Y+20, r1	; 0x14
    16f2:	1d 8a       	std	Y+21, r1	; 0x15
    16f4:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    16f6:	1f 86       	std	Y+15, r1	; 0x0f
    16f8:	18 8a       	std	Y+16, r1	; 0x10
    16fa:	19 8a       	std	Y+17, r1	; 0x11
    16fc:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    16fe:	1b 8a       	std	Y+19, r1	; 0x13
    1700:	1c 8a       	std	Y+20, r1	; 0x14
    1702:	1d 8a       	std	Y+21, r1	; 0x15
    1704:	1e 8a       	std	Y+22, r1	; 0x16
    1706:	b7 c0       	rjmp	.+366    	; 0x1876 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	9c 89       	ldd	r25, Y+20	; 0x14
    170c:	ad 89       	ldd	r26, Y+21	; 0x15
    170e:	be 89       	ldd	r27, Y+22	; 0x16
    1710:	9e 01       	movw	r18, r28
    1712:	29 5e       	subi	r18, 0xE9	; 233
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	f9 01       	movw	r30, r18
    1718:	e8 0f       	add	r30, r24
    171a:	f9 1f       	adc	r31, r25
    171c:	80 81       	ld	r24, Z
    171e:	98 2f       	mov	r25, r24
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	69 2f       	mov	r22, r25
    1724:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1728:	1f 86       	std	Y+15, r1	; 0x0f
    172a:	18 8a       	std	Y+16, r1	; 0x10
    172c:	19 8a       	std	Y+17, r1	; 0x11
    172e:	1a 8a       	std	Y+18, r1	; 0x12
    1730:	8d c0       	rjmp	.+282    	; 0x184c <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1732:	8f 85       	ldd	r24, Y+15	; 0x0f
    1734:	98 89       	ldd	r25, Y+16	; 0x10
    1736:	a9 89       	ldd	r26, Y+17	; 0x11
    1738:	ba 89       	ldd	r27, Y+18	; 0x12
    173a:	9e 01       	movw	r18, r28
    173c:	29 5e       	subi	r18, 0xE9	; 233
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	f9 01       	movw	r30, r18
    1742:	e8 0f       	add	r30, r24
    1744:	f9 1f       	adc	r31, r25
    1746:	80 81       	ld	r24, Z
    1748:	98 2f       	mov	r25, r24
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	69 2f       	mov	r22, r25
    174e:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e2       	ldi	r26, 0x20	; 32
    1758:	b1 e4       	ldi	r27, 0x41	; 65
    175a:	8b 87       	std	Y+11, r24	; 0x0b
    175c:	9c 87       	std	Y+12, r25	; 0x0c
    175e:	ad 87       	std	Y+13, r26	; 0x0d
    1760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a e7       	ldi	r20, 0x7A	; 122
    1770:	55 e4       	ldi	r21, 0x45	; 69
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8f 83       	std	Y+7, r24	; 0x07
    177c:	98 87       	std	Y+8, r25	; 0x08
    177e:	a9 87       	std	Y+9, r26	; 0x09
    1780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1782:	6f 81       	ldd	r22, Y+7	; 0x07
    1784:	78 85       	ldd	r23, Y+8	; 0x08
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <SevSeg_voidDoubleAutoCounter+0x16a>
    17e6:	80 e9       	ldi	r24, 0x90	; 144
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <SevSeg_voidDoubleAutoCounter+0x158>
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <SevSeg_voidDoubleAutoCounter+0x14c>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	6f 81       	ldd	r22, Y+7	; 0x07
    1810:	78 85       	ldd	r23, Y+8	; 0x08
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <SevSeg_voidDoubleAutoCounter+0x194>
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1836:	8f 85       	ldd	r24, Y+15	; 0x0f
    1838:	98 89       	ldd	r25, Y+16	; 0x10
    183a:	a9 89       	ldd	r26, Y+17	; 0x11
    183c:	ba 89       	ldd	r27, Y+18	; 0x12
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	a1 1d       	adc	r26, r1
    1842:	b1 1d       	adc	r27, r1
    1844:	8f 87       	std	Y+15, r24	; 0x0f
    1846:	98 8b       	std	Y+16, r25	; 0x10
    1848:	a9 8b       	std	Y+17, r26	; 0x11
    184a:	ba 8b       	std	Y+18, r27	; 0x12
    184c:	8f 85       	ldd	r24, Y+15	; 0x0f
    184e:	98 89       	ldd	r25, Y+16	; 0x10
    1850:	a9 89       	ldd	r26, Y+17	; 0x11
    1852:	ba 89       	ldd	r27, Y+18	; 0x12
    1854:	8a 30       	cpi	r24, 0x0A	; 10
    1856:	91 05       	cpc	r25, r1
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	0c f4       	brge	.+2      	; 0x1860 <SevSeg_voidDoubleAutoCounter+0x1c6>
    185e:	69 cf       	rjmp	.-302    	; 0x1732 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    1860:	8b 89       	ldd	r24, Y+19	; 0x13
    1862:	9c 89       	ldd	r25, Y+20	; 0x14
    1864:	ad 89       	ldd	r26, Y+21	; 0x15
    1866:	be 89       	ldd	r27, Y+22	; 0x16
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	a1 1d       	adc	r26, r1
    186c:	b1 1d       	adc	r27, r1
    186e:	8b 8b       	std	Y+19, r24	; 0x13
    1870:	9c 8b       	std	Y+20, r25	; 0x14
    1872:	ad 8b       	std	Y+21, r26	; 0x15
    1874:	be 8b       	std	Y+22, r27	; 0x16
    1876:	8b 89       	ldd	r24, Y+19	; 0x13
    1878:	9c 89       	ldd	r25, Y+20	; 0x14
    187a:	ad 89       	ldd	r26, Y+21	; 0x15
    187c:	be 89       	ldd	r27, Y+22	; 0x16
    187e:	8a 30       	cpi	r24, 0x0A	; 10
    1880:	91 05       	cpc	r25, r1
    1882:	a1 05       	cpc	r26, r1
    1884:	b1 05       	cpc	r27, r1
    1886:	0c f4       	brge	.+2      	; 0x188a <SevSeg_voidDoubleAutoCounter+0x1f0>
    1888:	3f cf       	rjmp	.-386    	; 0x1708 <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    188a:	a5 96       	adiw	r28, 0x25	; 37
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	e1 97       	sbiw	r28, 0x31	; 49
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	8b a7       	std	Y+43, r24	; 0x2b
    18b2:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    18b4:	ce 01       	movw	r24, r28
    18b6:	81 96       	adiw	r24, 0x21	; 33
    18b8:	9e a7       	std	Y+46, r25	; 0x2e
    18ba:	8d a7       	std	Y+45, r24	; 0x2d
    18bc:	e1 ee       	ldi	r30, 0xE1	; 225
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	f8 ab       	std	Y+48, r31	; 0x30
    18c2:	ef a7       	std	Y+47, r30	; 0x2f
    18c4:	fa e0       	ldi	r31, 0x0A	; 10
    18c6:	f9 ab       	std	Y+49, r31	; 0x31
    18c8:	ef a5       	ldd	r30, Y+47	; 0x2f
    18ca:	f8 a9       	ldd	r31, Y+48	; 0x30
    18cc:	00 80       	ld	r0, Z
    18ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d0:	98 a9       	ldd	r25, Y+48	; 0x30
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	98 ab       	std	Y+48, r25	; 0x30
    18d6:	8f a7       	std	Y+47, r24	; 0x2f
    18d8:	ed a5       	ldd	r30, Y+45	; 0x2d
    18da:	fe a5       	ldd	r31, Y+46	; 0x2e
    18dc:	00 82       	st	Z, r0
    18de:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	9e a7       	std	Y+46, r25	; 0x2e
    18e6:	8d a7       	std	Y+45, r24	; 0x2d
    18e8:	99 a9       	ldd	r25, Y+49	; 0x31
    18ea:	91 50       	subi	r25, 0x01	; 1
    18ec:	99 ab       	std	Y+49, r25	; 0x31
    18ee:	e9 a9       	ldd	r30, Y+49	; 0x31
    18f0:	ee 23       	and	r30, r30
    18f2:	51 f7       	brne	.-44     	; 0x18c8 <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    18f4:	1d 8e       	std	Y+29, r1	; 0x1d
    18f6:	1e 8e       	std	Y+30, r1	; 0x1e
    18f8:	1f 8e       	std	Y+31, r1	; 0x1f
    18fa:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    18fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    18fe:	88 23       	and	r24, r24
    1900:	0c f4       	brge	.+2      	; 0x1904 <SevSeg_voidSingleRangeCounter+0x68>
    1902:	64 c1       	rjmp	.+712    	; 0x1bcc <SevSeg_voidSingleRangeCounter+0x330>
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	8a 30       	cpi	r24, 0x0A	; 10
    1908:	0c f0       	brlt	.+2      	; 0x190c <SevSeg_voidSingleRangeCounter+0x70>
    190a:	60 c1       	rjmp	.+704    	; 0x1bcc <SevSeg_voidSingleRangeCounter+0x330>
    190c:	8c a5       	ldd	r24, Y+44	; 0x2c
    190e:	8a 30       	cpi	r24, 0x0A	; 10
    1910:	0c f0       	brlt	.+2      	; 0x1914 <SevSeg_voidSingleRangeCounter+0x78>
    1912:	5c c1       	rjmp	.+696    	; 0x1bcc <SevSeg_voidSingleRangeCounter+0x330>
    1914:	8c a5       	ldd	r24, Y+44	; 0x2c
    1916:	88 23       	and	r24, r24
    1918:	0c f4       	brge	.+2      	; 0x191c <SevSeg_voidSingleRangeCounter+0x80>
    191a:	58 c1       	rjmp	.+688    	; 0x1bcc <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    191c:	9b a5       	ldd	r25, Y+43	; 0x2b
    191e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1920:	98 17       	cp	r25, r24
    1922:	0c f0       	brlt	.+2      	; 0x1926 <SevSeg_voidSingleRangeCounter+0x8a>
    1924:	aa c0       	rjmp	.+340    	; 0x1a7a <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1926:	8b a5       	ldd	r24, Y+43	; 0x2b
    1928:	99 27       	eor	r25, r25
    192a:	87 fd       	sbrc	r24, 7
    192c:	90 95       	com	r25
    192e:	a9 2f       	mov	r26, r25
    1930:	b9 2f       	mov	r27, r25
    1932:	8d 8f       	std	Y+29, r24	; 0x1d
    1934:	9e 8f       	std	Y+30, r25	; 0x1e
    1936:	af 8f       	std	Y+31, r26	; 0x1f
    1938:	b8 a3       	std	Y+32, r27	; 0x20
    193a:	8d c0       	rjmp	.+282    	; 0x1a56 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    193c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    193e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1940:	af 8d       	ldd	r26, Y+31	; 0x1f
    1942:	b8 a1       	ldd	r27, Y+32	; 0x20
    1944:	9e 01       	movw	r18, r28
    1946:	2f 5d       	subi	r18, 0xDF	; 223
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	f9 01       	movw	r30, r18
    194c:	e8 0f       	add	r30, r24
    194e:	f9 1f       	adc	r31, r25
    1950:	80 81       	ld	r24, Z
    1952:	98 2f       	mov	r25, r24
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	69 2f       	mov	r22, r25
    1958:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e2       	ldi	r26, 0x20	; 32
    1962:	b1 e4       	ldi	r27, 0x41	; 65
    1964:	89 8f       	std	Y+25, r24	; 0x19
    1966:	9a 8f       	std	Y+26, r25	; 0x1a
    1968:	ab 8f       	std	Y+27, r26	; 0x1b
    196a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	69 8d       	ldd	r22, Y+25	; 0x19
    196e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	55 e4       	ldi	r21, 0x45	; 69
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8d 8b       	std	Y+21, r24	; 0x15
    1986:	9e 8b       	std	Y+22, r25	; 0x16
    1988:	af 8b       	std	Y+23, r26	; 0x17
    198a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <SevSeg_voidSingleRangeCounter+0x172>
    19f0:	80 e9       	ldi	r24, 0x90	; 144
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <SevSeg_voidSingleRangeCounter+0x160>
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <SevSeg_voidSingleRangeCounter+0x154>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	98 89       	ldd	r25, Y+16	; 0x10
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <SevSeg_voidSingleRangeCounter+0x19c>
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a44:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a46:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	b1 1d       	adc	r27, r1
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	af 8f       	std	Y+31, r26	; 0x1f
    1a54:	b8 a3       	std	Y+32, r27	; 0x20
    1a56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a58:	28 2f       	mov	r18, r24
    1a5a:	33 27       	eor	r19, r19
    1a5c:	27 fd       	sbrc	r18, 7
    1a5e:	30 95       	com	r19
    1a60:	43 2f       	mov	r20, r19
    1a62:	53 2f       	mov	r21, r19
    1a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a68:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a6a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a6c:	82 17       	cp	r24, r18
    1a6e:	93 07       	cpc	r25, r19
    1a70:	a4 07       	cpc	r26, r20
    1a72:	b5 07       	cpc	r27, r21
    1a74:	0c f4       	brge	.+2      	; 0x1a78 <SevSeg_voidSingleRangeCounter+0x1dc>
    1a76:	62 cf       	rjmp	.-316    	; 0x193c <SevSeg_voidSingleRangeCounter+0xa0>
    1a78:	a9 c0       	rjmp	.+338    	; 0x1bcc <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    1a7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a7c:	99 27       	eor	r25, r25
    1a7e:	87 fd       	sbrc	r24, 7
    1a80:	90 95       	com	r25
    1a82:	a9 2f       	mov	r26, r25
    1a84:	b9 2f       	mov	r27, r25
    1a86:	8d 8f       	std	Y+29, r24	; 0x1d
    1a88:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8a:	af 8f       	std	Y+31, r26	; 0x1f
    1a8c:	b8 a3       	std	Y+32, r27	; 0x20
    1a8e:	8d c0       	rjmp	.+282    	; 0x1baa <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a94:	af 8d       	ldd	r26, Y+31	; 0x1f
    1a96:	b8 a1       	ldd	r27, Y+32	; 0x20
    1a98:	9e 01       	movw	r18, r28
    1a9a:	2f 5d       	subi	r18, 0xDF	; 223
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	e8 0f       	add	r30, r24
    1aa2:	f9 1f       	adc	r31, r25
    1aa4:	80 81       	ld	r24, Z
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	69 2f       	mov	r22, r25
    1aac:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e2       	ldi	r26, 0x20	; 32
    1ab6:	b1 e4       	ldi	r27, 0x41	; 65
    1ab8:	8b 87       	std	Y+11, r24	; 0x0b
    1aba:	9c 87       	std	Y+12, r25	; 0x0c
    1abc:	ad 87       	std	Y+13, r26	; 0x0d
    1abe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a e7       	ldi	r20, 0x7A	; 122
    1ace:	55 e4       	ldi	r21, 0x45	; 69
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
    1ada:	98 87       	std	Y+8, r25	; 0x08
    1adc:	a9 87       	std	Y+9, r26	; 0x09
    1ade:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <SevSeg_voidSingleRangeCounter+0x2c6>
    1b44:	80 e9       	ldi	r24, 0x90	; 144
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <SevSeg_voidSingleRangeCounter+0x2b4>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <SevSeg_voidSingleRangeCounter+0x2a8>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <SevSeg_voidSingleRangeCounter+0x2f0>
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    1b94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b98:	af 8d       	ldd	r26, Y+31	; 0x1f
    1b9a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	a1 09       	sbc	r26, r1
    1ba0:	b1 09       	sbc	r27, r1
    1ba2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba6:	af 8f       	std	Y+31, r26	; 0x1f
    1ba8:	b8 a3       	std	Y+32, r27	; 0x20
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	28 2f       	mov	r18, r24
    1bae:	33 27       	eor	r19, r19
    1bb0:	27 fd       	sbrc	r18, 7
    1bb2:	30 95       	com	r19
    1bb4:	43 2f       	mov	r20, r19
    1bb6:	53 2f       	mov	r21, r19
    1bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bbc:	af 8d       	ldd	r26, Y+31	; 0x1f
    1bbe:	b8 a1       	ldd	r27, Y+32	; 0x20
    1bc0:	82 17       	cp	r24, r18
    1bc2:	93 07       	cpc	r25, r19
    1bc4:	a4 07       	cpc	r26, r20
    1bc6:	b5 07       	cpc	r27, r21
    1bc8:	0c f0       	brlt	.+2      	; 0x1bcc <SevSeg_voidSingleRangeCounter+0x330>
    1bca:	62 cf       	rjmp	.-316    	; 0x1a90 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    1bcc:	e1 96       	adiw	r28, 0x31	; 49
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	e9 97       	sbiw	r28, 0x39	; 57
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	8b ab       	std	Y+51, r24	; 0x33
    1bf4:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	89 96       	adiw	r24, 0x29	; 41
    1bfa:	9e ab       	std	Y+54, r25	; 0x36
    1bfc:	8d ab       	std	Y+53, r24	; 0x35
    1bfe:	eb ee       	ldi	r30, 0xEB	; 235
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	f8 af       	std	Y+56, r31	; 0x38
    1c04:	ef ab       	std	Y+55, r30	; 0x37
    1c06:	fa e0       	ldi	r31, 0x0A	; 10
    1c08:	f9 af       	std	Y+57, r31	; 0x39
    1c0a:	ef a9       	ldd	r30, Y+55	; 0x37
    1c0c:	f8 ad       	ldd	r31, Y+56	; 0x38
    1c0e:	00 80       	ld	r0, Z
    1c10:	8f a9       	ldd	r24, Y+55	; 0x37
    1c12:	98 ad       	ldd	r25, Y+56	; 0x38
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	98 af       	std	Y+56, r25	; 0x38
    1c18:	8f ab       	std	Y+55, r24	; 0x37
    1c1a:	ed a9       	ldd	r30, Y+53	; 0x35
    1c1c:	fe a9       	ldd	r31, Y+54	; 0x36
    1c1e:	00 82       	st	Z, r0
    1c20:	8d a9       	ldd	r24, Y+53	; 0x35
    1c22:	9e a9       	ldd	r25, Y+54	; 0x36
    1c24:	01 96       	adiw	r24, 0x01	; 1
    1c26:	9e ab       	std	Y+54, r25	; 0x36
    1c28:	8d ab       	std	Y+53, r24	; 0x35
    1c2a:	99 ad       	ldd	r25, Y+57	; 0x39
    1c2c:	91 50       	subi	r25, 0x01	; 1
    1c2e:	99 af       	std	Y+57, r25	; 0x39
    1c30:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c32:	ee 23       	and	r30, r30
    1c34:	51 f7       	brne	.-44     	; 0x1c0a <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9a e0       	ldi	r25, 0x0A	; 10
    1c3a:	69 2f       	mov	r22, r25
    1c3c:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    1c40:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    1c42:	8b a9       	ldd	r24, Y+51	; 0x33
    1c44:	9a e0       	ldi	r25, 0x0A	; 10
    1c46:	69 2f       	mov	r22, r25
    1c48:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    1c4c:	89 2f       	mov	r24, r25
    1c4e:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    1c50:	8c a9       	ldd	r24, Y+52	; 0x34
    1c52:	9a e0       	ldi	r25, 0x0A	; 10
    1c54:	69 2f       	mov	r22, r25
    1c56:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    1c5a:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    1c5c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c5e:	9a e0       	ldi	r25, 0x0A	; 10
    1c60:	69 2f       	mov	r22, r25
    1c62:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    1c66:	89 2f       	mov	r24, r25
    1c68:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    1c6a:	19 a2       	std	Y+33, r1	; 0x21
    1c6c:	1a a2       	std	Y+34, r1	; 0x22
    1c6e:	1b a2       	std	Y+35, r1	; 0x23
    1c70:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    1c72:	1d 8e       	std	Y+29, r1	; 0x1d
    1c74:	1e 8e       	std	Y+30, r1	; 0x1e
    1c76:	1f 8e       	std	Y+31, r1	; 0x1f
    1c78:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    1c7a:	88 a5       	ldd	r24, Y+40	; 0x28
    1c7c:	88 23       	and	r24, r24
    1c7e:	0c f4       	brge	.+2      	; 0x1c82 <SevSeg_voidDoubleRangeCounter+0xa4>
    1c80:	05 c2       	rjmp	.+1034   	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>
    1c82:	88 a5       	ldd	r24, Y+40	; 0x28
    1c84:	8a 30       	cpi	r24, 0x0A	; 10
    1c86:	0c f0       	brlt	.+2      	; 0x1c8a <SevSeg_voidDoubleRangeCounter+0xac>
    1c88:	01 c2       	rjmp	.+1026   	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>
    1c8a:	8e a1       	ldd	r24, Y+38	; 0x26
    1c8c:	8a 30       	cpi	r24, 0x0A	; 10
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <SevSeg_voidDoubleRangeCounter+0xb4>
    1c90:	fd c1       	rjmp	.+1018   	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>
    1c92:	8e a1       	ldd	r24, Y+38	; 0x26
    1c94:	88 23       	and	r24, r24
    1c96:	0c f4       	brge	.+2      	; 0x1c9a <SevSeg_voidDoubleRangeCounter+0xbc>
    1c98:	f9 c1       	rjmp	.+1010   	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    1c9a:	9b a9       	ldd	r25, Y+51	; 0x33
    1c9c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c9e:	98 17       	cp	r25, r24
    1ca0:	0c f0       	brlt	.+2      	; 0x1ca4 <SevSeg_voidDoubleRangeCounter+0xc6>
    1ca2:	fc c0       	rjmp	.+504    	; 0x1e9c <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    1ca4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ca6:	99 27       	eor	r25, r25
    1ca8:	87 fd       	sbrc	r24, 7
    1caa:	90 95       	com	r25
    1cac:	a9 2f       	mov	r26, r25
    1cae:	b9 2f       	mov	r27, r25
    1cb0:	89 a3       	std	Y+33, r24	; 0x21
    1cb2:	9a a3       	std	Y+34, r25	; 0x22
    1cb4:	ab a3       	std	Y+35, r26	; 0x23
    1cb6:	bc a3       	std	Y+36, r27	; 0x24
    1cb8:	df c0       	rjmp	.+446    	; 0x1e78 <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbe:	ab a1       	ldd	r26, Y+35	; 0x23
    1cc0:	bc a1       	ldd	r27, Y+36	; 0x24
    1cc2:	9e 01       	movw	r18, r28
    1cc4:	27 5d       	subi	r18, 0xD7	; 215
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	f9 01       	movw	r30, r18
    1cca:	e8 0f       	add	r30, r24
    1ccc:	f9 1f       	adc	r31, r25
    1cce:	80 81       	ld	r24, Z
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	84 e0       	ldi	r24, 0x04	; 4
    1cd4:	69 2f       	mov	r22, r25
    1cd6:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    1cda:	8f a1       	ldd	r24, Y+39	; 0x27
    1cdc:	99 27       	eor	r25, r25
    1cde:	87 fd       	sbrc	r24, 7
    1ce0:	90 95       	com	r25
    1ce2:	a9 2f       	mov	r26, r25
    1ce4:	b9 2f       	mov	r27, r25
    1ce6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cea:	af 8f       	std	Y+31, r26	; 0x1f
    1cec:	b8 a3       	std	Y+32, r27	; 0x20
    1cee:	ae c0       	rjmp	.+348    	; 0x1e4c <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cf4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1cf6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1cf8:	9e 01       	movw	r18, r28
    1cfa:	27 5d       	subi	r18, 0xD7	; 215
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	f9 01       	movw	r30, r18
    1d00:	e8 0f       	add	r30, r24
    1d02:	f9 1f       	adc	r31, r25
    1d04:	80 81       	ld	r24, Z
    1d06:	98 2f       	mov	r25, r24
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	69 2f       	mov	r22, r25
    1d0c:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e2       	ldi	r26, 0x20	; 32
    1d16:	b1 e4       	ldi	r27, 0x41	; 65
    1d18:	89 8f       	std	Y+25, r24	; 0x19
    1d1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	69 8d       	ldd	r22, Y+25	; 0x19
    1d22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	55 e4       	ldi	r21, 0x45	; 69
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	8d 8b       	std	Y+21, r24	; 0x15
    1d3a:	9e 8b       	std	Y+22, r25	; 0x16
    1d3c:	af 8b       	std	Y+23, r26	; 0x17
    1d3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d40:	6d 89       	ldd	r22, Y+21	; 0x15
    1d42:	7e 89       	ldd	r23, Y+22	; 0x16
    1d44:	8f 89       	ldd	r24, Y+23	; 0x17
    1d46:	98 8d       	ldd	r25, Y+24	; 0x18
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e8       	ldi	r20, 0x80	; 128
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d54:	88 23       	and	r24, r24
    1d56:	2c f4       	brge	.+10     	; 0x1d62 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	3f c0       	rjmp	.+126    	; 0x1de0 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    1d62:	6d 89       	ldd	r22, Y+21	; 0x15
    1d64:	7e 89       	ldd	r23, Y+22	; 0x16
    1d66:	8f 89       	ldd	r24, Y+23	; 0x17
    1d68:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	4c f5       	brge	.+82     	; 0x1dcc <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e2       	ldi	r20, 0x20	; 32
    1d88:	51 e4       	ldi	r21, 0x41	; 65
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9c 8b       	std	Y+20, r25	; 0x14
    1da0:	8b 8b       	std	Y+19, r24	; 0x13
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <SevSeg_voidDoubleRangeCounter+0x1e4>
    1da4:	80 e9       	ldi	r24, 0x90	; 144
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	9a 8b       	std	Y+18, r25	; 0x12
    1daa:	89 8b       	std	Y+17, r24	; 0x11
    1dac:	89 89       	ldd	r24, Y+17	; 0x11
    1dae:	9a 89       	ldd	r25, Y+18	; 0x12
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <SevSeg_voidDoubleRangeCounter+0x1d2>
    1db4:	9a 8b       	std	Y+18, r25	; 0x12
    1db6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <SevSeg_voidDoubleRangeCounter+0x1c6>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9c 8b       	std	Y+20, r25	; 0x14
    1dde:	8b 8b       	std	Y+19, r24	; 0x13
    1de0:	8b 89       	ldd	r24, Y+19	; 0x13
    1de2:	9c 89       	ldd	r25, Y+20	; 0x14
    1de4:	98 8b       	std	Y+16, r25	; 0x10
    1de6:	8f 87       	std	Y+15, r24	; 0x0f
    1de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dea:	98 89       	ldd	r25, Y+16	; 0x10
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <SevSeg_voidDoubleRangeCounter+0x20e>
    1df0:	98 8b       	std	Y+16, r25	; 0x10
    1df2:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    1df4:	8d a1       	ldd	r24, Y+37	; 0x25
    1df6:	28 2f       	mov	r18, r24
    1df8:	33 27       	eor	r19, r19
    1dfa:	27 fd       	sbrc	r18, 7
    1dfc:	30 95       	com	r19
    1dfe:	43 2f       	mov	r20, r19
    1e00:	53 2f       	mov	r21, r19
    1e02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e06:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e08:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	4a 07       	cpc	r20, r26
    1e10:	5b 07       	cpc	r21, r27
    1e12:	89 f4       	brne	.+34     	; 0x1e36 <SevSeg_voidDoubleRangeCounter+0x258>
    1e14:	8e a1       	ldd	r24, Y+38	; 0x26
    1e16:	28 2f       	mov	r18, r24
    1e18:	33 27       	eor	r19, r19
    1e1a:	27 fd       	sbrc	r18, 7
    1e1c:	30 95       	com	r19
    1e1e:	43 2f       	mov	r20, r19
    1e20:	53 2f       	mov	r21, r19
    1e22:	89 a1       	ldd	r24, Y+33	; 0x21
    1e24:	9a a1       	ldd	r25, Y+34	; 0x22
    1e26:	ab a1       	ldd	r26, Y+35	; 0x23
    1e28:	bc a1       	ldd	r27, Y+36	; 0x24
    1e2a:	28 17       	cp	r18, r24
    1e2c:	39 07       	cpc	r19, r25
    1e2e:	4a 07       	cpc	r20, r26
    1e30:	5b 07       	cpc	r21, r27
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <SevSeg_voidDoubleRangeCounter+0x258>
    1e34:	2b c1       	rjmp	.+598    	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    1e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3a:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e3c:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	a1 1d       	adc	r26, r1
    1e42:	b1 1d       	adc	r27, r1
    1e44:	8d 8f       	std	Y+29, r24	; 0x1d
    1e46:	9e 8f       	std	Y+30, r25	; 0x1e
    1e48:	af 8f       	std	Y+31, r26	; 0x1f
    1e4a:	b8 a3       	std	Y+32, r27	; 0x20
    1e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e50:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e52:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e54:	8a 30       	cpi	r24, 0x0A	; 10
    1e56:	91 05       	cpc	r25, r1
    1e58:	a1 05       	cpc	r26, r1
    1e5a:	b1 05       	cpc	r27, r1
    1e5c:	0c f4       	brge	.+2      	; 0x1e60 <SevSeg_voidDoubleRangeCounter+0x282>
    1e5e:	48 cf       	rjmp	.-368    	; 0x1cf0 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    1e60:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    1e62:	89 a1       	ldd	r24, Y+33	; 0x21
    1e64:	9a a1       	ldd	r25, Y+34	; 0x22
    1e66:	ab a1       	ldd	r26, Y+35	; 0x23
    1e68:	bc a1       	ldd	r27, Y+36	; 0x24
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	b1 1d       	adc	r27, r1
    1e70:	89 a3       	std	Y+33, r24	; 0x21
    1e72:	9a a3       	std	Y+34, r25	; 0x22
    1e74:	ab a3       	std	Y+35, r26	; 0x23
    1e76:	bc a3       	std	Y+36, r27	; 0x24
    1e78:	8e a1       	ldd	r24, Y+38	; 0x26
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	33 27       	eor	r19, r19
    1e7e:	27 fd       	sbrc	r18, 7
    1e80:	30 95       	com	r19
    1e82:	43 2f       	mov	r20, r19
    1e84:	53 2f       	mov	r21, r19
    1e86:	89 a1       	ldd	r24, Y+33	; 0x21
    1e88:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8a:	ab a1       	ldd	r26, Y+35	; 0x23
    1e8c:	bc a1       	ldd	r27, Y+36	; 0x24
    1e8e:	28 17       	cp	r18, r24
    1e90:	39 07       	cpc	r19, r25
    1e92:	4a 07       	cpc	r20, r26
    1e94:	5b 07       	cpc	r21, r27
    1e96:	0c f0       	brlt	.+2      	; 0x1e9a <SevSeg_voidDoubleRangeCounter+0x2bc>
    1e98:	10 cf       	rjmp	.-480    	; 0x1cba <SevSeg_voidDoubleRangeCounter+0xdc>
    1e9a:	f8 c0       	rjmp	.+496    	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    1e9c:	88 a5       	ldd	r24, Y+40	; 0x28
    1e9e:	99 27       	eor	r25, r25
    1ea0:	87 fd       	sbrc	r24, 7
    1ea2:	90 95       	com	r25
    1ea4:	a9 2f       	mov	r26, r25
    1ea6:	b9 2f       	mov	r27, r25
    1ea8:	89 a3       	std	Y+33, r24	; 0x21
    1eaa:	9a a3       	std	Y+34, r25	; 0x22
    1eac:	ab a3       	std	Y+35, r26	; 0x23
    1eae:	bc a3       	std	Y+36, r27	; 0x24
    1eb0:	dc c0       	rjmp	.+440    	; 0x206a <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1eb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb6:	ab a1       	ldd	r26, Y+35	; 0x23
    1eb8:	bc a1       	ldd	r27, Y+36	; 0x24
    1eba:	9e 01       	movw	r18, r28
    1ebc:	27 5d       	subi	r18, 0xD7	; 215
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	e8 0f       	add	r30, r24
    1ec4:	f9 1f       	adc	r31, r25
    1ec6:	80 81       	ld	r24, Z
    1ec8:	98 2f       	mov	r25, r24
    1eca:	84 e0       	ldi	r24, 0x04	; 4
    1ecc:	69 2f       	mov	r22, r25
    1ece:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    1ed2:	8f a1       	ldd	r24, Y+39	; 0x27
    1ed4:	99 27       	eor	r25, r25
    1ed6:	87 fd       	sbrc	r24, 7
    1ed8:	90 95       	com	r25
    1eda:	a9 2f       	mov	r26, r25
    1edc:	b9 2f       	mov	r27, r25
    1ede:	8d 8f       	std	Y+29, r24	; 0x1d
    1ee0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee2:	af 8f       	std	Y+31, r26	; 0x1f
    1ee4:	b8 a3       	std	Y+32, r27	; 0x20
    1ee6:	ad c0       	rjmp	.+346    	; 0x2042 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eec:	af 8d       	ldd	r26, Y+31	; 0x1f
    1eee:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ef0:	9e 01       	movw	r18, r28
    1ef2:	27 5d       	subi	r18, 0xD7	; 215
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	f9 01       	movw	r30, r18
    1ef8:	e8 0f       	add	r30, r24
    1efa:	f9 1f       	adc	r31, r25
    1efc:	80 81       	ld	r24, Z
    1efe:	98 2f       	mov	r25, r24
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	69 2f       	mov	r22, r25
    1f04:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e2       	ldi	r26, 0x20	; 32
    1f0e:	b1 e4       	ldi	r27, 0x41	; 65
    1f10:	8b 87       	std	Y+11, r24	; 0x0b
    1f12:	9c 87       	std	Y+12, r25	; 0x0c
    1f14:	ad 87       	std	Y+13, r26	; 0x0d
    1f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	55 e4       	ldi	r21, 0x45	; 69
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8f 83       	std	Y+7, r24	; 0x07
    1f32:	98 87       	std	Y+8, r25	; 0x08
    1f34:	a9 87       	std	Y+9, r26	; 0x09
    1f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <SevSeg_voidDoubleRangeCounter+0x3dc>
    1f9c:	80 e9       	ldi	r24, 0x90	; 144
    1f9e:	91 e0       	ldi	r25, 0x01	; 1
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <SevSeg_voidDoubleRangeCounter+0x3ca>
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <SevSeg_voidDoubleRangeCounter+0x3be>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc6:	78 85       	ldd	r23, Y+8	; 0x08
    1fc8:	89 85       	ldd	r24, Y+9	; 0x09
    1fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <SevSeg_voidDoubleRangeCounter+0x406>
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	28 2f       	mov	r18, r24
    1ff0:	33 27       	eor	r19, r19
    1ff2:	27 fd       	sbrc	r18, 7
    1ff4:	30 95       	com	r19
    1ff6:	43 2f       	mov	r20, r19
    1ff8:	53 2f       	mov	r21, r19
    1ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ffe:	af 8d       	ldd	r26, Y+31	; 0x1f
    2000:	b8 a1       	ldd	r27, Y+32	; 0x20
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	4a 07       	cpc	r20, r26
    2008:	5b 07       	cpc	r21, r27
    200a:	81 f4       	brne	.+32     	; 0x202c <SevSeg_voidDoubleRangeCounter+0x44e>
    200c:	8e a1       	ldd	r24, Y+38	; 0x26
    200e:	28 2f       	mov	r18, r24
    2010:	33 27       	eor	r19, r19
    2012:	27 fd       	sbrc	r18, 7
    2014:	30 95       	com	r19
    2016:	43 2f       	mov	r20, r19
    2018:	53 2f       	mov	r21, r19
    201a:	89 a1       	ldd	r24, Y+33	; 0x21
    201c:	9a a1       	ldd	r25, Y+34	; 0x22
    201e:	ab a1       	ldd	r26, Y+35	; 0x23
    2020:	bc a1       	ldd	r27, Y+36	; 0x24
    2022:	28 17       	cp	r18, r24
    2024:	39 07       	cpc	r19, r25
    2026:	4a 07       	cpc	r20, r26
    2028:	5b 07       	cpc	r21, r27
    202a:	81 f1       	breq	.+96     	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    202c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    202e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2030:	af 8d       	ldd	r26, Y+31	; 0x1f
    2032:	b8 a1       	ldd	r27, Y+32	; 0x20
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	a1 09       	sbc	r26, r1
    2038:	b1 09       	sbc	r27, r1
    203a:	8d 8f       	std	Y+29, r24	; 0x1d
    203c:	9e 8f       	std	Y+30, r25	; 0x1e
    203e:	af 8f       	std	Y+31, r26	; 0x1f
    2040:	b8 a3       	std	Y+32, r27	; 0x20
    2042:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2044:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2046:	af 8d       	ldd	r26, Y+31	; 0x1f
    2048:	b8 a1       	ldd	r27, Y+32	; 0x20
    204a:	bb 23       	and	r27, r27
    204c:	0c f0       	brlt	.+2      	; 0x2050 <SevSeg_voidDoubleRangeCounter+0x472>
    204e:	4c cf       	rjmp	.-360    	; 0x1ee8 <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    2050:	89 e0       	ldi	r24, 0x09	; 9
    2052:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2054:	89 a1       	ldd	r24, Y+33	; 0x21
    2056:	9a a1       	ldd	r25, Y+34	; 0x22
    2058:	ab a1       	ldd	r26, Y+35	; 0x23
    205a:	bc a1       	ldd	r27, Y+36	; 0x24
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	a1 09       	sbc	r26, r1
    2060:	b1 09       	sbc	r27, r1
    2062:	89 a3       	std	Y+33, r24	; 0x21
    2064:	9a a3       	std	Y+34, r25	; 0x22
    2066:	ab a3       	std	Y+35, r26	; 0x23
    2068:	bc a3       	std	Y+36, r27	; 0x24
    206a:	8e a1       	ldd	r24, Y+38	; 0x26
    206c:	28 2f       	mov	r18, r24
    206e:	33 27       	eor	r19, r19
    2070:	27 fd       	sbrc	r18, 7
    2072:	30 95       	com	r19
    2074:	43 2f       	mov	r20, r19
    2076:	53 2f       	mov	r21, r19
    2078:	89 a1       	ldd	r24, Y+33	; 0x21
    207a:	9a a1       	ldd	r25, Y+34	; 0x22
    207c:	ab a1       	ldd	r26, Y+35	; 0x23
    207e:	bc a1       	ldd	r27, Y+36	; 0x24
    2080:	82 17       	cp	r24, r18
    2082:	93 07       	cpc	r25, r19
    2084:	a4 07       	cpc	r26, r20
    2086:	b5 07       	cpc	r27, r21
    2088:	0c f0       	brlt	.+2      	; 0x208c <SevSeg_voidDoubleRangeCounter+0x4ae>
    208a:	13 cf       	rjmp	.-474    	; 0x1eb2 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    208c:	e9 96       	adiw	r28, 0x39	; 57
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <SevSeg_voidBCDDisplay+0x6>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	6a 81       	ldd	r22, Y+2	; 0x02
    20b0:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	ab 97       	sbiw	r28, 0x2b	; 43
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	8a a7       	std	Y+42, r24	; 0x2a
    20d4:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    20d6:	8a a5       	ldd	r24, Y+42	; 0x2a
    20d8:	9a e0       	ldi	r25, 0x0A	; 10
    20da:	69 2f       	mov	r22, r25
    20dc:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    20e0:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    20e2:	8a a5       	ldd	r24, Y+42	; 0x2a
    20e4:	9a e0       	ldi	r25, 0x0A	; 10
    20e6:	69 2f       	mov	r22, r25
    20e8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    20ec:	89 2f       	mov	r24, r25
    20ee:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    20f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f2:	9a e0       	ldi	r25, 0x0A	; 10
    20f4:	69 2f       	mov	r22, r25
    20f6:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    20fa:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    20fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fe:	9a e0       	ldi	r25, 0x0A	; 10
    2100:	69 2f       	mov	r22, r25
    2102:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    2106:	89 2f       	mov	r24, r25
    2108:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    210a:	1a a2       	std	Y+34, r1	; 0x22
    210c:	1b a2       	std	Y+35, r1	; 0x23
    210e:	1c a2       	std	Y+36, r1	; 0x24
    2110:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    2112:	1e 8e       	std	Y+30, r1	; 0x1e
    2114:	1f 8e       	std	Y+31, r1	; 0x1f
    2116:	18 a2       	std	Y+32, r1	; 0x20
    2118:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    211a:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    211c:	89 a5       	ldd	r24, Y+41	; 0x29
    211e:	88 23       	and	r24, r24
    2120:	0c f4       	brge	.+2      	; 0x2124 <SevSeg_voidBCDDoubleDisplay+0x66>
    2122:	11 c2       	rjmp	.+1058   	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>
    2124:	89 a5       	ldd	r24, Y+41	; 0x29
    2126:	8a 30       	cpi	r24, 0x0A	; 10
    2128:	0c f0       	brlt	.+2      	; 0x212c <SevSeg_voidBCDDoubleDisplay+0x6e>
    212a:	0d c2       	rjmp	.+1050   	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>
    212c:	8f a1       	ldd	r24, Y+39	; 0x27
    212e:	8a 30       	cpi	r24, 0x0A	; 10
    2130:	0c f0       	brlt	.+2      	; 0x2134 <SevSeg_voidBCDDoubleDisplay+0x76>
    2132:	09 c2       	rjmp	.+1042   	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>
    2134:	8f a1       	ldd	r24, Y+39	; 0x27
    2136:	88 23       	and	r24, r24
    2138:	0c f4       	brge	.+2      	; 0x213c <SevSeg_voidBCDDoubleDisplay+0x7e>
    213a:	05 c2       	rjmp	.+1034   	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    213c:	9a a5       	ldd	r25, Y+42	; 0x2a
    213e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2140:	98 17       	cp	r25, r24
    2142:	0c f0       	brlt	.+2      	; 0x2146 <SevSeg_voidBCDDoubleDisplay+0x88>
    2144:	02 c1       	rjmp	.+516    	; 0x234a <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2146:	89 a5       	ldd	r24, Y+41	; 0x29
    2148:	99 27       	eor	r25, r25
    214a:	87 fd       	sbrc	r24, 7
    214c:	90 95       	com	r25
    214e:	a9 2f       	mov	r26, r25
    2150:	b9 2f       	mov	r27, r25
    2152:	8a a3       	std	Y+34, r24	; 0x22
    2154:	9b a3       	std	Y+35, r25	; 0x23
    2156:	ac a3       	std	Y+36, r26	; 0x24
    2158:	bd a3       	std	Y+37, r27	; 0x25
    215a:	e5 c0       	rjmp	.+458    	; 0x2326 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	8f 70       	andi	r24, 0x0F	; 15
    2160:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2162:	8a a1       	ldd	r24, Y+34	; 0x22
    2164:	9b a1       	ldd	r25, Y+35	; 0x23
    2166:	ac a1       	ldd	r26, Y+36	; 0x24
    2168:	bd a1       	ldd	r27, Y+37	; 0x25
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	aa 1f       	adc	r26, r26
    2170:	bb 1f       	adc	r27, r27
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	aa 1f       	adc	r26, r26
    2178:	bb 1f       	adc	r27, r27
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	aa 1f       	adc	r26, r26
    2180:	bb 1f       	adc	r27, r27
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	aa 1f       	adc	r26, r26
    2188:	bb 1f       	adc	r27, r27
    218a:	98 2f       	mov	r25, r24
    218c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218e:	89 2b       	or	r24, r25
    2190:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2192:	88 a5       	ldd	r24, Y+40	; 0x28
    2194:	99 27       	eor	r25, r25
    2196:	87 fd       	sbrc	r24, 7
    2198:	90 95       	com	r25
    219a:	a9 2f       	mov	r26, r25
    219c:	b9 2f       	mov	r27, r25
    219e:	8e 8f       	std	Y+30, r24	; 0x1e
    21a0:	9f 8f       	std	Y+31, r25	; 0x1f
    21a2:	a8 a3       	std	Y+32, r26	; 0x20
    21a4:	b9 a3       	std	Y+33, r27	; 0x21
    21a6:	a9 c0       	rjmp	.+338    	; 0x22fa <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    21a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21aa:	80 7f       	andi	r24, 0xF0	; 240
    21ac:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    21ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b2:	89 2b       	or	r24, r25
    21b4:	8d 8f       	std	Y+29, r24	; 0x1d
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e2       	ldi	r26, 0x20	; 32
    21bc:	b1 e4       	ldi	r27, 0x41	; 65
    21be:	89 8f       	std	Y+25, r24	; 0x19
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	ab 8f       	std	Y+27, r26	; 0x1b
    21c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	69 8d       	ldd	r22, Y+25	; 0x19
    21c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a e7       	ldi	r20, 0x7A	; 122
    21d4:	55 e4       	ldi	r21, 0x45	; 69
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8d 8b       	std	Y+21, r24	; 0x15
    21e0:	9e 8b       	std	Y+22, r25	; 0x16
    21e2:	af 8b       	std	Y+23, r26	; 0x17
    21e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	69 8d       	ldd	r22, Y+25	; 0x19
    2222:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <SevSeg_voidBCDDoubleDisplay+0x1aa>
    224a:	80 e9       	ldi	r24, 0x90	; 144
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	89 8b       	std	Y+17, r24	; 0x11
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	9a 89       	ldd	r25, Y+18	; 0x12
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <SevSeg_voidBCDDoubleDisplay+0x198>
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	9c 8b       	std	Y+20, r25	; 0x14
    2266:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <SevSeg_voidBCDDoubleDisplay+0x18c>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9c 8b       	std	Y+20, r25	; 0x14
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	98 8b       	std	Y+16, r25	; 0x10
    228c:	8f 87       	std	Y+15, r24	; 0x0f
    228e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2290:	98 89       	ldd	r25, Y+16	; 0x10
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    229e:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    22a2:	8e a1       	ldd	r24, Y+38	; 0x26
    22a4:	28 2f       	mov	r18, r24
    22a6:	33 27       	eor	r19, r19
    22a8:	27 fd       	sbrc	r18, 7
    22aa:	30 95       	com	r19
    22ac:	43 2f       	mov	r20, r19
    22ae:	53 2f       	mov	r21, r19
    22b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22b4:	a8 a1       	ldd	r26, Y+32	; 0x20
    22b6:	b9 a1       	ldd	r27, Y+33	; 0x21
    22b8:	28 17       	cp	r18, r24
    22ba:	39 07       	cpc	r19, r25
    22bc:	4a 07       	cpc	r20, r26
    22be:	5b 07       	cpc	r21, r27
    22c0:	89 f4       	brne	.+34     	; 0x22e4 <SevSeg_voidBCDDoubleDisplay+0x226>
    22c2:	8f a1       	ldd	r24, Y+39	; 0x27
    22c4:	28 2f       	mov	r18, r24
    22c6:	33 27       	eor	r19, r19
    22c8:	27 fd       	sbrc	r18, 7
    22ca:	30 95       	com	r19
    22cc:	43 2f       	mov	r20, r19
    22ce:	53 2f       	mov	r21, r19
    22d0:	8a a1       	ldd	r24, Y+34	; 0x22
    22d2:	9b a1       	ldd	r25, Y+35	; 0x23
    22d4:	ac a1       	ldd	r26, Y+36	; 0x24
    22d6:	bd a1       	ldd	r27, Y+37	; 0x25
    22d8:	28 17       	cp	r18, r24
    22da:	39 07       	cpc	r19, r25
    22dc:	4a 07       	cpc	r20, r26
    22de:	5b 07       	cpc	r21, r27
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <SevSeg_voidBCDDoubleDisplay+0x226>
    22e2:	31 c1       	rjmp	.+610    	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    22e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22e8:	a8 a1       	ldd	r26, Y+32	; 0x20
    22ea:	b9 a1       	ldd	r27, Y+33	; 0x21
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	a1 1d       	adc	r26, r1
    22f0:	b1 1d       	adc	r27, r1
    22f2:	8e 8f       	std	Y+30, r24	; 0x1e
    22f4:	9f 8f       	std	Y+31, r25	; 0x1f
    22f6:	a8 a3       	std	Y+32, r26	; 0x20
    22f8:	b9 a3       	std	Y+33, r27	; 0x21
    22fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22fe:	a8 a1       	ldd	r26, Y+32	; 0x20
    2300:	b9 a1       	ldd	r27, Y+33	; 0x21
    2302:	8a 30       	cpi	r24, 0x0A	; 10
    2304:	91 05       	cpc	r25, r1
    2306:	a1 05       	cpc	r26, r1
    2308:	b1 05       	cpc	r27, r1
    230a:	0c f4       	brge	.+2      	; 0x230e <SevSeg_voidBCDDoubleDisplay+0x250>
    230c:	4d cf       	rjmp	.-358    	; 0x21a8 <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    230e:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2310:	8a a1       	ldd	r24, Y+34	; 0x22
    2312:	9b a1       	ldd	r25, Y+35	; 0x23
    2314:	ac a1       	ldd	r26, Y+36	; 0x24
    2316:	bd a1       	ldd	r27, Y+37	; 0x25
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	a1 1d       	adc	r26, r1
    231c:	b1 1d       	adc	r27, r1
    231e:	8a a3       	std	Y+34, r24	; 0x22
    2320:	9b a3       	std	Y+35, r25	; 0x23
    2322:	ac a3       	std	Y+36, r26	; 0x24
    2324:	bd a3       	std	Y+37, r27	; 0x25
    2326:	8f a1       	ldd	r24, Y+39	; 0x27
    2328:	28 2f       	mov	r18, r24
    232a:	33 27       	eor	r19, r19
    232c:	27 fd       	sbrc	r18, 7
    232e:	30 95       	com	r19
    2330:	43 2f       	mov	r20, r19
    2332:	53 2f       	mov	r21, r19
    2334:	8a a1       	ldd	r24, Y+34	; 0x22
    2336:	9b a1       	ldd	r25, Y+35	; 0x23
    2338:	ac a1       	ldd	r26, Y+36	; 0x24
    233a:	bd a1       	ldd	r27, Y+37	; 0x25
    233c:	28 17       	cp	r18, r24
    233e:	39 07       	cpc	r19, r25
    2340:	4a 07       	cpc	r20, r26
    2342:	5b 07       	cpc	r21, r27
    2344:	0c f0       	brlt	.+2      	; 0x2348 <SevSeg_voidBCDDoubleDisplay+0x28a>
    2346:	0a cf       	rjmp	.-492    	; 0x215c <SevSeg_voidBCDDoubleDisplay+0x9e>
    2348:	fe c0       	rjmp	.+508    	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    234a:	89 a5       	ldd	r24, Y+41	; 0x29
    234c:	99 27       	eor	r25, r25
    234e:	87 fd       	sbrc	r24, 7
    2350:	90 95       	com	r25
    2352:	a9 2f       	mov	r26, r25
    2354:	b9 2f       	mov	r27, r25
    2356:	8a a3       	std	Y+34, r24	; 0x22
    2358:	9b a3       	std	Y+35, r25	; 0x23
    235a:	ac a3       	std	Y+36, r26	; 0x24
    235c:	bd a3       	std	Y+37, r27	; 0x25
    235e:	e2 c0       	rjmp	.+452    	; 0x2524 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2362:	8f 70       	andi	r24, 0x0F	; 15
    2364:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2366:	8a a1       	ldd	r24, Y+34	; 0x22
    2368:	9b a1       	ldd	r25, Y+35	; 0x23
    236a:	ac a1       	ldd	r26, Y+36	; 0x24
    236c:	bd a1       	ldd	r27, Y+37	; 0x25
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	aa 1f       	adc	r26, r26
    2374:	bb 1f       	adc	r27, r27
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	aa 1f       	adc	r26, r26
    237c:	bb 1f       	adc	r27, r27
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	aa 1f       	adc	r26, r26
    2384:	bb 1f       	adc	r27, r27
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	aa 1f       	adc	r26, r26
    238c:	bb 1f       	adc	r27, r27
    238e:	98 2f       	mov	r25, r24
    2390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2392:	89 2b       	or	r24, r25
    2394:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2396:	88 a5       	ldd	r24, Y+40	; 0x28
    2398:	99 27       	eor	r25, r25
    239a:	87 fd       	sbrc	r24, 7
    239c:	90 95       	com	r25
    239e:	a9 2f       	mov	r26, r25
    23a0:	b9 2f       	mov	r27, r25
    23a2:	8e 8f       	std	Y+30, r24	; 0x1e
    23a4:	9f 8f       	std	Y+31, r25	; 0x1f
    23a6:	a8 a3       	std	Y+32, r26	; 0x20
    23a8:	b9 a3       	std	Y+33, r27	; 0x21
    23aa:	a8 c0       	rjmp	.+336    	; 0x24fc <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    23ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ae:	80 7f       	andi	r24, 0xF0	; 240
    23b0:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    23b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b6:	89 2b       	or	r24, r25
    23b8:	8d 8f       	std	Y+29, r24	; 0x1d
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e2       	ldi	r26, 0x20	; 32
    23c0:	b1 e4       	ldi	r27, 0x41	; 65
    23c2:	8b 87       	std	Y+11, r24	; 0x0b
    23c4:	9c 87       	std	Y+12, r25	; 0x0c
    23c6:	ad 87       	std	Y+13, r26	; 0x0d
    23c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    23cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a e7       	ldi	r20, 0x7A	; 122
    23d8:	55 e4       	ldi	r21, 0x45	; 69
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8f 83       	std	Y+7, r24	; 0x07
    23e4:	98 87       	std	Y+8, r25	; 0x08
    23e6:	a9 87       	std	Y+9, r26	; 0x09
    23e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ea:	6f 81       	ldd	r22, Y+7	; 0x07
    23ec:	78 85       	ldd	r23, Y+8	; 0x08
    23ee:	89 85       	ldd	r24, Y+9	; 0x09
    23f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	3f c0       	rjmp	.+126    	; 0x248a <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	6b 85       	ldd	r22, Y+11	; 0x0b
    2426:	7c 85       	ldd	r23, Y+12	; 0x0c
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	0f c0       	rjmp	.+30     	; 0x246c <SevSeg_voidBCDDoubleDisplay+0x3ae>
    244e:	80 e9       	ldi	r24, 0x90	; 144
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <SevSeg_voidBCDDoubleDisplay+0x39c>
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f7       	brne	.-38     	; 0x244e <SevSeg_voidBCDDoubleDisplay+0x390>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	6f 81       	ldd	r22, Y+7	; 0x07
    2478:	78 85       	ldd	r23, Y+8	; 0x08
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	9a 85       	ldd	r25, Y+10	; 0x0a
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24a2:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    24a6:	8e a1       	ldd	r24, Y+38	; 0x26
    24a8:	28 2f       	mov	r18, r24
    24aa:	33 27       	eor	r19, r19
    24ac:	27 fd       	sbrc	r18, 7
    24ae:	30 95       	com	r19
    24b0:	43 2f       	mov	r20, r19
    24b2:	53 2f       	mov	r21, r19
    24b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24b8:	a8 a1       	ldd	r26, Y+32	; 0x20
    24ba:	b9 a1       	ldd	r27, Y+33	; 0x21
    24bc:	28 17       	cp	r18, r24
    24be:	39 07       	cpc	r19, r25
    24c0:	4a 07       	cpc	r20, r26
    24c2:	5b 07       	cpc	r21, r27
    24c4:	81 f4       	brne	.+32     	; 0x24e6 <SevSeg_voidBCDDoubleDisplay+0x428>
    24c6:	8f a1       	ldd	r24, Y+39	; 0x27
    24c8:	28 2f       	mov	r18, r24
    24ca:	33 27       	eor	r19, r19
    24cc:	27 fd       	sbrc	r18, 7
    24ce:	30 95       	com	r19
    24d0:	43 2f       	mov	r20, r19
    24d2:	53 2f       	mov	r21, r19
    24d4:	8a a1       	ldd	r24, Y+34	; 0x22
    24d6:	9b a1       	ldd	r25, Y+35	; 0x23
    24d8:	ac a1       	ldd	r26, Y+36	; 0x24
    24da:	bd a1       	ldd	r27, Y+37	; 0x25
    24dc:	28 17       	cp	r18, r24
    24de:	39 07       	cpc	r19, r25
    24e0:	4a 07       	cpc	r20, r26
    24e2:	5b 07       	cpc	r21, r27
    24e4:	81 f1       	breq	.+96     	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    24e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24ea:	a8 a1       	ldd	r26, Y+32	; 0x20
    24ec:	b9 a1       	ldd	r27, Y+33	; 0x21
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	a1 09       	sbc	r26, r1
    24f2:	b1 09       	sbc	r27, r1
    24f4:	8e 8f       	std	Y+30, r24	; 0x1e
    24f6:	9f 8f       	std	Y+31, r25	; 0x1f
    24f8:	a8 a3       	std	Y+32, r26	; 0x20
    24fa:	b9 a3       	std	Y+33, r27	; 0x21
    24fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2500:	a8 a1       	ldd	r26, Y+32	; 0x20
    2502:	b9 a1       	ldd	r27, Y+33	; 0x21
    2504:	bb 23       	and	r27, r27
    2506:	0c f0       	brlt	.+2      	; 0x250a <SevSeg_voidBCDDoubleDisplay+0x44c>
    2508:	51 cf       	rjmp	.-350    	; 0x23ac <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    250a:	89 e0       	ldi	r24, 0x09	; 9
    250c:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    250e:	8a a1       	ldd	r24, Y+34	; 0x22
    2510:	9b a1       	ldd	r25, Y+35	; 0x23
    2512:	ac a1       	ldd	r26, Y+36	; 0x24
    2514:	bd a1       	ldd	r27, Y+37	; 0x25
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	a1 09       	sbc	r26, r1
    251a:	b1 09       	sbc	r27, r1
    251c:	8a a3       	std	Y+34, r24	; 0x22
    251e:	9b a3       	std	Y+35, r25	; 0x23
    2520:	ac a3       	std	Y+36, r26	; 0x24
    2522:	bd a3       	std	Y+37, r27	; 0x25
    2524:	8f a1       	ldd	r24, Y+39	; 0x27
    2526:	28 2f       	mov	r18, r24
    2528:	33 27       	eor	r19, r19
    252a:	27 fd       	sbrc	r18, 7
    252c:	30 95       	com	r19
    252e:	43 2f       	mov	r20, r19
    2530:	53 2f       	mov	r21, r19
    2532:	8a a1       	ldd	r24, Y+34	; 0x22
    2534:	9b a1       	ldd	r25, Y+35	; 0x23
    2536:	ac a1       	ldd	r26, Y+36	; 0x24
    2538:	bd a1       	ldd	r27, Y+37	; 0x25
    253a:	82 17       	cp	r24, r18
    253c:	93 07       	cpc	r25, r19
    253e:	a4 07       	cpc	r26, r20
    2540:	b5 07       	cpc	r27, r21
    2542:	0c f0       	brlt	.+2      	; 0x2546 <SevSeg_voidBCDDoubleDisplay+0x488>
    2544:	0d cf       	rjmp	.-486    	; 0x2360 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2546:	ab 96       	adiw	r28, 0x2b	; 43
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	c1 54       	subi	r28, 0x41	; 65
    2562:	d0 40       	sbci	r29, 0x00	; 0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	fe 01       	movw	r30, r28
    2570:	e0 5c       	subi	r30, 0xC0	; 192
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 83       	st	Z, r24
    2576:	fe 01       	movw	r30, r28
    2578:	ef 5b       	subi	r30, 0xBF	; 191
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    257e:	fe 01       	movw	r30, r28
    2580:	e0 5c       	subi	r30, 0xC0	; 192
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	9a e0       	ldi	r25, 0x0A	; 10
    2588:	69 2f       	mov	r22, r25
    258a:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    258e:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    2590:	fe 01       	movw	r30, r28
    2592:	e0 5c       	subi	r30, 0xC0	; 192
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	9a e0       	ldi	r25, 0x0A	; 10
    259a:	69 2f       	mov	r22, r25
    259c:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    25a0:	89 2f       	mov	r24, r25
    25a2:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    25a4:	fe 01       	movw	r30, r28
    25a6:	ef 5b       	subi	r30, 0xBF	; 191
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	9a e0       	ldi	r25, 0x0A	; 10
    25ae:	69 2f       	mov	r22, r25
    25b0:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    25b4:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    25b6:	fe 01       	movw	r30, r28
    25b8:	ef 5b       	subi	r30, 0xBF	; 191
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	9a e0       	ldi	r25, 0x0A	; 10
    25c0:	69 2f       	mov	r22, r25
    25c2:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divmodqi4>
    25c6:	89 2f       	mov	r24, r25
    25c8:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    25ca:	18 ae       	std	Y+56, r1	; 0x38
    25cc:	19 ae       	std	Y+57, r1	; 0x39
    25ce:	1a ae       	std	Y+58, r1	; 0x3a
    25d0:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    25d2:	1c aa       	std	Y+52, r1	; 0x34
    25d4:	1d aa       	std	Y+53, r1	; 0x35
    25d6:	1e aa       	std	Y+54, r1	; 0x36
    25d8:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    25da:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    25dc:	1f a6       	std	Y+47, r1	; 0x2f
    25de:	18 aa       	std	Y+48, r1	; 0x30
    25e0:	19 aa       	std	Y+49, r1	; 0x31
    25e2:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    25e4:	82 e3       	ldi	r24, 0x32	; 50
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
    25ee:	9c a7       	std	Y+44, r25	; 0x2c
    25f0:	ad a7       	std	Y+45, r26	; 0x2d
    25f2:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    25f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    25f6:	88 23       	and	r24, r24
    25f8:	0c f4       	brge	.+2      	; 0x25fc <SevSeg_voidMulBCD+0xa4>
    25fa:	ad c2       	rjmp	.+1370   	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>
    25fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    25fe:	8a 30       	cpi	r24, 0x0A	; 10
    2600:	0c f0       	brlt	.+2      	; 0x2604 <SevSeg_voidMulBCD+0xac>
    2602:	a9 c2       	rjmp	.+1362   	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>
    2604:	8d ad       	ldd	r24, Y+61	; 0x3d
    2606:	8a 30       	cpi	r24, 0x0A	; 10
    2608:	0c f0       	brlt	.+2      	; 0x260c <SevSeg_voidMulBCD+0xb4>
    260a:	a5 c2       	rjmp	.+1354   	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>
    260c:	8d ad       	ldd	r24, Y+61	; 0x3d
    260e:	88 23       	and	r24, r24
    2610:	0c f4       	brge	.+2      	; 0x2614 <SevSeg_voidMulBCD+0xbc>
    2612:	a1 c2       	rjmp	.+1346   	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    2614:	de 01       	movw	r26, r28
    2616:	af 5b       	subi	r26, 0xBF	; 191
    2618:	bf 4f       	sbci	r27, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	e0 5c       	subi	r30, 0xC0	; 192
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	90 81       	ld	r25, Z
    2622:	8c 91       	ld	r24, X
    2624:	98 17       	cp	r25, r24
    2626:	0c f0       	brlt	.+2      	; 0x262a <SevSeg_voidMulBCD+0xd2>
    2628:	98 c1       	rjmp	.+816    	; 0x295a <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    262a:	8f ad       	ldd	r24, Y+63	; 0x3f
    262c:	99 27       	eor	r25, r25
    262e:	87 fd       	sbrc	r24, 7
    2630:	90 95       	com	r25
    2632:	a9 2f       	mov	r26, r25
    2634:	b9 2f       	mov	r27, r25
    2636:	88 af       	std	Y+56, r24	; 0x38
    2638:	99 af       	std	Y+57, r25	; 0x39
    263a:	aa af       	std	Y+58, r26	; 0x3a
    263c:	bb af       	std	Y+59, r27	; 0x3b
    263e:	7b c1       	rjmp	.+758    	; 0x2936 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2640:	8e ad       	ldd	r24, Y+62	; 0x3e
    2642:	99 27       	eor	r25, r25
    2644:	87 fd       	sbrc	r24, 7
    2646:	90 95       	com	r25
    2648:	a9 2f       	mov	r26, r25
    264a:	b9 2f       	mov	r27, r25
    264c:	8c ab       	std	Y+52, r24	; 0x34
    264e:	9d ab       	std	Y+53, r25	; 0x35
    2650:	ae ab       	std	Y+54, r26	; 0x36
    2652:	bf ab       	std	Y+55, r27	; 0x37
    2654:	5a c1       	rjmp	.+692    	; 0x290a <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    2656:	1f a6       	std	Y+47, r1	; 0x2f
    2658:	18 aa       	std	Y+48, r1	; 0x30
    265a:	19 aa       	std	Y+49, r1	; 0x31
    265c:	1a aa       	std	Y+50, r1	; 0x32
    265e:	1b c1       	rjmp	.+566    	; 0x2896 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    2660:	88 ad       	ldd	r24, Y+56	; 0x38
    2662:	99 ad       	ldd	r25, Y+57	; 0x39
    2664:	aa ad       	ldd	r26, Y+58	; 0x3a
    2666:	bb ad       	ldd	r27, Y+59	; 0x3b
    2668:	fc 01       	movw	r30, r24
    266a:	e9 58       	subi	r30, 0x89	; 137
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	90 81       	ld	r25, Z
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	69 2f       	mov	r22, r25
    2674:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	66 e0       	ldi	r22, 0x06	; 6
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	65 e0       	ldi	r22, 0x05	; 5
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e2       	ldi	r26, 0x20	; 32
    2692:	b1 e4       	ldi	r27, 0x41	; 65
    2694:	8f a3       	std	Y+39, r24	; 0x27
    2696:	98 a7       	std	Y+40, r25	; 0x28
    2698:	a9 a7       	std	Y+41, r26	; 0x29
    269a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	6f a1       	ldd	r22, Y+39	; 0x27
    269e:	78 a5       	ldd	r23, Y+40	; 0x28
    26a0:	89 a5       	ldd	r24, Y+41	; 0x29
    26a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8b a3       	std	Y+35, r24	; 0x23
    26b6:	9c a3       	std	Y+36, r25	; 0x24
    26b8:	ad a3       	std	Y+37, r26	; 0x25
    26ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26bc:	6b a1       	ldd	r22, Y+35	; 0x23
    26be:	7c a1       	ldd	r23, Y+36	; 0x24
    26c0:	8d a1       	ldd	r24, Y+37	; 0x25
    26c2:	9e a1       	ldd	r25, Y+38	; 0x26
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9a a3       	std	Y+34, r25	; 0x22
    26da:	89 a3       	std	Y+33, r24	; 0x21
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    26de:	6b a1       	ldd	r22, Y+35	; 0x23
    26e0:	7c a1       	ldd	r23, Y+36	; 0x24
    26e2:	8d a1       	ldd	r24, Y+37	; 0x25
    26e4:	9e a1       	ldd	r25, Y+38	; 0x26
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	6f a1       	ldd	r22, Y+39	; 0x27
    26f8:	78 a5       	ldd	r23, Y+40	; 0x28
    26fa:	89 a5       	ldd	r24, Y+41	; 0x29
    26fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9a a3       	std	Y+34, r25	; 0x22
    271c:	89 a3       	std	Y+33, r24	; 0x21
    271e:	0f c0       	rjmp	.+30     	; 0x273e <SevSeg_voidMulBCD+0x1e6>
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	98 a3       	std	Y+32, r25	; 0x20
    2726:	8f 8f       	std	Y+31, r24	; 0x1f
    2728:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272a:	98 a1       	ldd	r25, Y+32	; 0x20
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <SevSeg_voidMulBCD+0x1d4>
    2730:	98 a3       	std	Y+32, r25	; 0x20
    2732:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9a a3       	std	Y+34, r25	; 0x22
    273c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	89 a1       	ldd	r24, Y+33	; 0x21
    2740:	9a a1       	ldd	r25, Y+34	; 0x22
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <SevSeg_voidMulBCD+0x1c8>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6b a1       	ldd	r22, Y+35	; 0x23
    274a:	7c a1       	ldd	r23, Y+36	; 0x24
    274c:	8d a1       	ldd	r24, Y+37	; 0x25
    274e:	9e a1       	ldd	r25, Y+38	; 0x26
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9a a3       	std	Y+34, r25	; 0x22
    275a:	89 a3       	std	Y+33, r24	; 0x21
    275c:	89 a1       	ldd	r24, Y+33	; 0x21
    275e:	9a a1       	ldd	r25, Y+34	; 0x22
    2760:	9e 8f       	std	Y+30, r25	; 0x1e
    2762:	8d 8f       	std	Y+29, r24	; 0x1d
    2764:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2766:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <SevSeg_voidMulBCD+0x210>
    276c:	9e 8f       	std	Y+30, r25	; 0x1e
    276e:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    2770:	8c a9       	ldd	r24, Y+52	; 0x34
    2772:	9d a9       	ldd	r25, Y+53	; 0x35
    2774:	ae a9       	ldd	r26, Y+54	; 0x36
    2776:	bf a9       	ldd	r27, Y+55	; 0x37
    2778:	fc 01       	movw	r30, r24
    277a:	e9 58       	subi	r30, 0x89	; 137
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	90 81       	ld	r25, Z
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	69 2f       	mov	r22, r25
    2784:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	66 e0       	ldi	r22, 0x06	; 6
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	65 e0       	ldi	r22, 0x05	; 5
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 e2       	ldi	r26, 0x20	; 32
    27a2:	b1 e4       	ldi	r27, 0x41	; 65
    27a4:	89 8f       	std	Y+25, r24	; 0x19
    27a6:	9a 8f       	std	Y+26, r25	; 0x1a
    27a8:	ab 8f       	std	Y+27, r26	; 0x1b
    27aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ac:	69 8d       	ldd	r22, Y+25	; 0x19
    27ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	4a e7       	ldi	r20, 0x7A	; 122
    27ba:	55 e4       	ldi	r21, 0x45	; 69
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	8d 8b       	std	Y+21, r24	; 0x15
    27c6:	9e 8b       	std	Y+22, r25	; 0x16
    27c8:	af 8b       	std	Y+23, r26	; 0x17
    27ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e0:	88 23       	and	r24, r24
    27e2:	2c f4       	brge	.+10     	; 0x27ee <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 8b       	std	Y+20, r25	; 0x14
    27ea:	8b 8b       	std	Y+19, r24	; 0x13
    27ec:	3f c0       	rjmp	.+126    	; 0x286c <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    27ee:	6d 89       	ldd	r22, Y+21	; 0x15
    27f0:	7e 89       	ldd	r23, Y+22	; 0x16
    27f2:	8f 89       	ldd	r24, Y+23	; 0x17
    27f4:	98 8d       	ldd	r25, Y+24	; 0x18
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	3f ef       	ldi	r19, 0xFF	; 255
    27fa:	4f e7       	ldi	r20, 0x7F	; 127
    27fc:	57 e4       	ldi	r21, 0x47	; 71
    27fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2802:	18 16       	cp	r1, r24
    2804:	4c f5       	brge	.+82     	; 0x2858 <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2806:	69 8d       	ldd	r22, Y+25	; 0x19
    2808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    280a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e2       	ldi	r20, 0x20	; 32
    2814:	51 e4       	ldi	r21, 0x41	; 65
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9c 8b       	std	Y+20, r25	; 0x14
    282c:	8b 8b       	std	Y+19, r24	; 0x13
    282e:	0f c0       	rjmp	.+30     	; 0x284e <SevSeg_voidMulBCD+0x2f6>
    2830:	80 e9       	ldi	r24, 0x90	; 144
    2832:	91 e0       	ldi	r25, 0x01	; 1
    2834:	9a 8b       	std	Y+18, r25	; 0x12
    2836:	89 8b       	std	Y+17, r24	; 0x11
    2838:	89 89       	ldd	r24, Y+17	; 0x11
    283a:	9a 89       	ldd	r25, Y+18	; 0x12
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <SevSeg_voidMulBCD+0x2e4>
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284e:	8b 89       	ldd	r24, Y+19	; 0x13
    2850:	9c 89       	ldd	r25, Y+20	; 0x14
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	69 f7       	brne	.-38     	; 0x2830 <SevSeg_voidMulBCD+0x2d8>
    2856:	14 c0       	rjmp	.+40     	; 0x2880 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	98 8b       	std	Y+16, r25	; 0x10
    2872:	8f 87       	std	Y+15, r24	; 0x0f
    2874:	8f 85       	ldd	r24, Y+15	; 0x0f
    2876:	98 89       	ldd	r25, Y+16	; 0x10
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <SevSeg_voidMulBCD+0x320>
    287c:	98 8b       	std	Y+16, r25	; 0x10
    287e:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    2880:	8f a5       	ldd	r24, Y+47	; 0x2f
    2882:	98 a9       	ldd	r25, Y+48	; 0x30
    2884:	a9 a9       	ldd	r26, Y+49	; 0x31
    2886:	ba a9       	ldd	r27, Y+50	; 0x32
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	a1 1d       	adc	r26, r1
    288c:	b1 1d       	adc	r27, r1
    288e:	8f a7       	std	Y+47, r24	; 0x2f
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	a9 ab       	std	Y+49, r26	; 0x31
    2894:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    2896:	2f a5       	ldd	r18, Y+47	; 0x2f
    2898:	38 a9       	ldd	r19, Y+48	; 0x30
    289a:	49 a9       	ldd	r20, Y+49	; 0x31
    289c:	5a a9       	ldd	r21, Y+50	; 0x32
    289e:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a2:	ad a5       	ldd	r26, Y+45	; 0x2d
    28a4:	be a5       	ldd	r27, Y+46	; 0x2e
    28a6:	28 17       	cp	r18, r24
    28a8:	39 07       	cpc	r19, r25
    28aa:	4a 07       	cpc	r20, r26
    28ac:	5b 07       	cpc	r21, r27
    28ae:	08 f4       	brcc	.+2      	; 0x28b2 <SevSeg_voidMulBCD+0x35a>
    28b0:	d7 ce       	rjmp	.-594    	; 0x2660 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    28b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    28b4:	28 2f       	mov	r18, r24
    28b6:	33 27       	eor	r19, r19
    28b8:	27 fd       	sbrc	r18, 7
    28ba:	30 95       	com	r19
    28bc:	43 2f       	mov	r20, r19
    28be:	53 2f       	mov	r21, r19
    28c0:	8c a9       	ldd	r24, Y+52	; 0x34
    28c2:	9d a9       	ldd	r25, Y+53	; 0x35
    28c4:	ae a9       	ldd	r26, Y+54	; 0x36
    28c6:	bf a9       	ldd	r27, Y+55	; 0x37
    28c8:	28 17       	cp	r18, r24
    28ca:	39 07       	cpc	r19, r25
    28cc:	4a 07       	cpc	r20, r26
    28ce:	5b 07       	cpc	r21, r27
    28d0:	89 f4       	brne	.+34     	; 0x28f4 <SevSeg_voidMulBCD+0x39c>
    28d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d4:	28 2f       	mov	r18, r24
    28d6:	33 27       	eor	r19, r19
    28d8:	27 fd       	sbrc	r18, 7
    28da:	30 95       	com	r19
    28dc:	43 2f       	mov	r20, r19
    28de:	53 2f       	mov	r21, r19
    28e0:	88 ad       	ldd	r24, Y+56	; 0x38
    28e2:	99 ad       	ldd	r25, Y+57	; 0x39
    28e4:	aa ad       	ldd	r26, Y+58	; 0x3a
    28e6:	bb ad       	ldd	r27, Y+59	; 0x3b
    28e8:	28 17       	cp	r18, r24
    28ea:	39 07       	cpc	r19, r25
    28ec:	4a 07       	cpc	r20, r26
    28ee:	5b 07       	cpc	r21, r27
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <SevSeg_voidMulBCD+0x39c>
    28f2:	31 c1       	rjmp	.+610    	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    28f4:	8c a9       	ldd	r24, Y+52	; 0x34
    28f6:	9d a9       	ldd	r25, Y+53	; 0x35
    28f8:	ae a9       	ldd	r26, Y+54	; 0x36
    28fa:	bf a9       	ldd	r27, Y+55	; 0x37
    28fc:	01 96       	adiw	r24, 0x01	; 1
    28fe:	a1 1d       	adc	r26, r1
    2900:	b1 1d       	adc	r27, r1
    2902:	8c ab       	std	Y+52, r24	; 0x34
    2904:	9d ab       	std	Y+53, r25	; 0x35
    2906:	ae ab       	std	Y+54, r26	; 0x36
    2908:	bf ab       	std	Y+55, r27	; 0x37
    290a:	8c a9       	ldd	r24, Y+52	; 0x34
    290c:	9d a9       	ldd	r25, Y+53	; 0x35
    290e:	ae a9       	ldd	r26, Y+54	; 0x36
    2910:	bf a9       	ldd	r27, Y+55	; 0x37
    2912:	8a 30       	cpi	r24, 0x0A	; 10
    2914:	91 05       	cpc	r25, r1
    2916:	a1 05       	cpc	r26, r1
    2918:	b1 05       	cpc	r27, r1
    291a:	0c f4       	brge	.+2      	; 0x291e <SevSeg_voidMulBCD+0x3c6>
    291c:	9c ce       	rjmp	.-712    	; 0x2656 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    291e:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2920:	88 ad       	ldd	r24, Y+56	; 0x38
    2922:	99 ad       	ldd	r25, Y+57	; 0x39
    2924:	aa ad       	ldd	r26, Y+58	; 0x3a
    2926:	bb ad       	ldd	r27, Y+59	; 0x3b
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	a1 1d       	adc	r26, r1
    292c:	b1 1d       	adc	r27, r1
    292e:	88 af       	std	Y+56, r24	; 0x38
    2930:	99 af       	std	Y+57, r25	; 0x39
    2932:	aa af       	std	Y+58, r26	; 0x3a
    2934:	bb af       	std	Y+59, r27	; 0x3b
    2936:	8d ad       	ldd	r24, Y+61	; 0x3d
    2938:	28 2f       	mov	r18, r24
    293a:	33 27       	eor	r19, r19
    293c:	27 fd       	sbrc	r18, 7
    293e:	30 95       	com	r19
    2940:	43 2f       	mov	r20, r19
    2942:	53 2f       	mov	r21, r19
    2944:	88 ad       	ldd	r24, Y+56	; 0x38
    2946:	99 ad       	ldd	r25, Y+57	; 0x39
    2948:	aa ad       	ldd	r26, Y+58	; 0x3a
    294a:	bb ad       	ldd	r27, Y+59	; 0x3b
    294c:	28 17       	cp	r18, r24
    294e:	39 07       	cpc	r19, r25
    2950:	4a 07       	cpc	r20, r26
    2952:	5b 07       	cpc	r21, r27
    2954:	0c f0       	brlt	.+2      	; 0x2958 <SevSeg_voidMulBCD+0x400>
    2956:	74 ce       	rjmp	.-792    	; 0x2640 <SevSeg_voidMulBCD+0xe8>
    2958:	fe c0       	rjmp	.+508    	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    295a:	8f ad       	ldd	r24, Y+63	; 0x3f
    295c:	99 27       	eor	r25, r25
    295e:	87 fd       	sbrc	r24, 7
    2960:	90 95       	com	r25
    2962:	a9 2f       	mov	r26, r25
    2964:	b9 2f       	mov	r27, r25
    2966:	88 af       	std	Y+56, r24	; 0x38
    2968:	99 af       	std	Y+57, r25	; 0x39
    296a:	aa af       	std	Y+58, r26	; 0x3a
    296c:	bb af       	std	Y+59, r27	; 0x3b
    296e:	e2 c0       	rjmp	.+452    	; 0x2b34 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    2970:	8b a9       	ldd	r24, Y+51	; 0x33
    2972:	8f 70       	andi	r24, 0x0F	; 15
    2974:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    2976:	88 ad       	ldd	r24, Y+56	; 0x38
    2978:	99 ad       	ldd	r25, Y+57	; 0x39
    297a:	aa ad       	ldd	r26, Y+58	; 0x3a
    297c:	bb ad       	ldd	r27, Y+59	; 0x3b
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	aa 1f       	adc	r26, r26
    2994:	bb 1f       	adc	r27, r27
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	aa 1f       	adc	r26, r26
    299c:	bb 1f       	adc	r27, r27
    299e:	98 2f       	mov	r25, r24
    29a0:	8b a9       	ldd	r24, Y+51	; 0x33
    29a2:	89 2b       	or	r24, r25
    29a4:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    29a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    29a8:	99 27       	eor	r25, r25
    29aa:	87 fd       	sbrc	r24, 7
    29ac:	90 95       	com	r25
    29ae:	a9 2f       	mov	r26, r25
    29b0:	b9 2f       	mov	r27, r25
    29b2:	8c ab       	std	Y+52, r24	; 0x34
    29b4:	9d ab       	std	Y+53, r25	; 0x35
    29b6:	ae ab       	std	Y+54, r26	; 0x36
    29b8:	bf ab       	std	Y+55, r27	; 0x37
    29ba:	a8 c0       	rjmp	.+336    	; 0x2b0c <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    29bc:	8b a9       	ldd	r24, Y+51	; 0x33
    29be:	80 7f       	andi	r24, 0xF0	; 240
    29c0:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    29c2:	9c a9       	ldd	r25, Y+52	; 0x34
    29c4:	8b a9       	ldd	r24, Y+51	; 0x33
    29c6:	89 2b       	or	r24, r25
    29c8:	8b ab       	std	Y+51, r24	; 0x33
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a0 e2       	ldi	r26, 0x20	; 32
    29d0:	b1 e4       	ldi	r27, 0x41	; 65
    29d2:	8b 87       	std	Y+11, r24	; 0x0b
    29d4:	9c 87       	std	Y+12, r25	; 0x0c
    29d6:	ad 87       	std	Y+13, r26	; 0x0d
    29d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	6b 85       	ldd	r22, Y+11	; 0x0b
    29dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a e7       	ldi	r20, 0x7A	; 122
    29e8:	55 e4       	ldi	r21, 0x45	; 69
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	8f 83       	std	Y+7, r24	; 0x07
    29f4:	98 87       	std	Y+8, r25	; 0x08
    29f6:	a9 87       	std	Y+9, r26	; 0x09
    29f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0e:	88 23       	and	r24, r24
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	3f c0       	rjmp	.+126    	; 0x2a9a <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	3f ef       	ldi	r19, 0xFF	; 255
    2a28:	4f e7       	ldi	r20, 0x7F	; 127
    2a2a:	57 e4       	ldi	r21, 0x47	; 71
    2a2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a30:	18 16       	cp	r1, r24
    2a32:	4c f5       	brge	.+82     	; 0x2a86 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <SevSeg_voidMulBCD+0x524>
    2a5e:	80 e9       	ldi	r24, 0x90	; 144
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	8b 83       	std	Y+3, r24	; 0x03
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <SevSeg_voidMulBCD+0x512>
    2a6e:	9c 83       	std	Y+4, r25	; 0x04
    2a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <SevSeg_voidMulBCD+0x506>
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <SevSeg_voidMulBCD+0x54e>
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	6b a9       	ldd	r22, Y+51	; 0x33
    2ab2:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2ab6:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ab8:	28 2f       	mov	r18, r24
    2aba:	33 27       	eor	r19, r19
    2abc:	27 fd       	sbrc	r18, 7
    2abe:	30 95       	com	r19
    2ac0:	43 2f       	mov	r20, r19
    2ac2:	53 2f       	mov	r21, r19
    2ac4:	8c a9       	ldd	r24, Y+52	; 0x34
    2ac6:	9d a9       	ldd	r25, Y+53	; 0x35
    2ac8:	ae a9       	ldd	r26, Y+54	; 0x36
    2aca:	bf a9       	ldd	r27, Y+55	; 0x37
    2acc:	28 17       	cp	r18, r24
    2ace:	39 07       	cpc	r19, r25
    2ad0:	4a 07       	cpc	r20, r26
    2ad2:	5b 07       	cpc	r21, r27
    2ad4:	81 f4       	brne	.+32     	; 0x2af6 <SevSeg_voidMulBCD+0x59e>
    2ad6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad8:	28 2f       	mov	r18, r24
    2ada:	33 27       	eor	r19, r19
    2adc:	27 fd       	sbrc	r18, 7
    2ade:	30 95       	com	r19
    2ae0:	43 2f       	mov	r20, r19
    2ae2:	53 2f       	mov	r21, r19
    2ae4:	88 ad       	ldd	r24, Y+56	; 0x38
    2ae6:	99 ad       	ldd	r25, Y+57	; 0x39
    2ae8:	aa ad       	ldd	r26, Y+58	; 0x3a
    2aea:	bb ad       	ldd	r27, Y+59	; 0x3b
    2aec:	28 17       	cp	r18, r24
    2aee:	39 07       	cpc	r19, r25
    2af0:	4a 07       	cpc	r20, r26
    2af2:	5b 07       	cpc	r21, r27
    2af4:	81 f1       	breq	.+96     	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2af6:	8c a9       	ldd	r24, Y+52	; 0x34
    2af8:	9d a9       	ldd	r25, Y+53	; 0x35
    2afa:	ae a9       	ldd	r26, Y+54	; 0x36
    2afc:	bf a9       	ldd	r27, Y+55	; 0x37
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	a1 09       	sbc	r26, r1
    2b02:	b1 09       	sbc	r27, r1
    2b04:	8c ab       	std	Y+52, r24	; 0x34
    2b06:	9d ab       	std	Y+53, r25	; 0x35
    2b08:	ae ab       	std	Y+54, r26	; 0x36
    2b0a:	bf ab       	std	Y+55, r27	; 0x37
    2b0c:	8c a9       	ldd	r24, Y+52	; 0x34
    2b0e:	9d a9       	ldd	r25, Y+53	; 0x35
    2b10:	ae a9       	ldd	r26, Y+54	; 0x36
    2b12:	bf a9       	ldd	r27, Y+55	; 0x37
    2b14:	bb 23       	and	r27, r27
    2b16:	0c f0       	brlt	.+2      	; 0x2b1a <SevSeg_voidMulBCD+0x5c2>
    2b18:	51 cf       	rjmp	.-350    	; 0x29bc <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    2b1a:	89 e0       	ldi	r24, 0x09	; 9
    2b1c:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2b1e:	88 ad       	ldd	r24, Y+56	; 0x38
    2b20:	99 ad       	ldd	r25, Y+57	; 0x39
    2b22:	aa ad       	ldd	r26, Y+58	; 0x3a
    2b24:	bb ad       	ldd	r27, Y+59	; 0x3b
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	a1 09       	sbc	r26, r1
    2b2a:	b1 09       	sbc	r27, r1
    2b2c:	88 af       	std	Y+56, r24	; 0x38
    2b2e:	99 af       	std	Y+57, r25	; 0x39
    2b30:	aa af       	std	Y+58, r26	; 0x3a
    2b32:	bb af       	std	Y+59, r27	; 0x3b
    2b34:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b36:	28 2f       	mov	r18, r24
    2b38:	33 27       	eor	r19, r19
    2b3a:	27 fd       	sbrc	r18, 7
    2b3c:	30 95       	com	r19
    2b3e:	43 2f       	mov	r20, r19
    2b40:	53 2f       	mov	r21, r19
    2b42:	88 ad       	ldd	r24, Y+56	; 0x38
    2b44:	99 ad       	ldd	r25, Y+57	; 0x39
    2b46:	aa ad       	ldd	r26, Y+58	; 0x3a
    2b48:	bb ad       	ldd	r27, Y+59	; 0x3b
    2b4a:	82 17       	cp	r24, r18
    2b4c:	93 07       	cpc	r25, r19
    2b4e:	a4 07       	cpc	r26, r20
    2b50:	b5 07       	cpc	r27, r21
    2b52:	0c f0       	brlt	.+2      	; 0x2b56 <SevSeg_voidMulBCD+0x5fe>
    2b54:	0d cf       	rjmp	.-486    	; 0x2970 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2b56:	cf 5b       	subi	r28, 0xBF	; 191
    2b58:	df 4f       	sbci	r29, 0xFF	; 255
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	cc 58       	subi	r28, 0x8C	; 140
    2b78:	d0 40       	sbci	r29, 0x00	; 0
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	fe 01       	movw	r30, r28
    2b86:	e7 57       	subi	r30, 0x77	; 119
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	ac e0       	ldi	r26, 0x0C	; 12
    2b90:	b2 e4       	ldi	r27, 0x42	; 66
    2b92:	80 83       	st	Z, r24
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	a2 83       	std	Z+2, r26	; 0x02
    2b98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9a:	8e 01       	movw	r16, r28
    2b9c:	0b 57       	subi	r16, 0x7B	; 123
    2b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e7 57       	subi	r30, 0x77	; 119
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	4a e7       	ldi	r20, 0x7A	; 122
    2bb4:	55 e4       	ldi	r21, 0x45	; 69
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	80 83       	st	Z, r24
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	a2 83       	std	Z+2, r26	; 0x02
    2bc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc8:	fe 01       	movw	r30, r28
    2bca:	eb 57       	subi	r30, 0x7B	; 123
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e8       	ldi	r20, 0x80	; 128
    2bdc:	5f e3       	ldi	r21, 0x3F	; 63
    2bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2be2:	88 23       	and	r24, r24
    2be4:	44 f4       	brge	.+16     	; 0x2bf6 <LCD_voidInit+0x8c>
		__ticks = 1;
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 57       	subi	r30, 0x7D	; 125
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	80 83       	st	Z, r24
    2bf4:	64 c0       	rjmp	.+200    	; 0x2cbe <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	eb 57       	subi	r30, 0x7B	; 123
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	4f e7       	ldi	r20, 0x7F	; 127
    2c0a:	57 e4       	ldi	r21, 0x47	; 71
    2c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c10:	18 16       	cp	r1, r24
    2c12:	0c f0       	brlt	.+2      	; 0x2c16 <LCD_voidInit+0xac>
    2c14:	43 c0       	rjmp	.+134    	; 0x2c9c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	fe 01       	movw	r30, r28
    2c18:	e7 57       	subi	r30, 0x77	; 119
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	8e 01       	movw	r16, r28
    2c36:	0d 57       	subi	r16, 0x7D	; 125
    2c38:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	f8 01       	movw	r30, r16
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	80 83       	st	Z, r24
    2c4c:	1f c0       	rjmp	.+62     	; 0x2c8c <LCD_voidInit+0x122>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ef 57       	subi	r30, 0x7F	; 127
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 e9       	ldi	r24, 0x90	; 144
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	91 83       	std	Z+1, r25	; 0x01
    2c5a:	80 83       	st	Z, r24
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ef 57       	subi	r30, 0x7F	; 127
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_voidInit+0xfc>
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	ef 57       	subi	r30, 0x7F	; 127
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c74:	de 01       	movw	r26, r28
    2c76:	ad 57       	subi	r26, 0x7D	; 125
    2c78:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ed 57       	subi	r30, 0x7D	; 125
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 81       	ld	r24, Z
    2c82:	91 81       	ldd	r25, Z+1	; 0x01
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	11 96       	adiw	r26, 0x01	; 1
    2c88:	9c 93       	st	X, r25
    2c8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ed 57       	subi	r30, 0x7D	; 125
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	d1 f6       	brne	.-76     	; 0x2c4e <LCD_voidInit+0xe4>
    2c9a:	27 c0       	rjmp	.+78     	; 0x2cea <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9c:	8e 01       	movw	r16, r28
    2c9e:	0d 57       	subi	r16, 0x7D	; 125
    2ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	eb 57       	subi	r30, 0x7B	; 123
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	80 83       	st	Z, r24
    2cbe:	de 01       	movw	r26, r28
    2cc0:	a1 58       	subi	r26, 0x81	; 129
    2cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ed 57       	subi	r30, 0x7D	; 125
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	91 81       	ldd	r25, Z+1	; 0x01
    2cce:	8d 93       	st	X+, r24
    2cd0:	9c 93       	st	X, r25
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e1 58       	subi	r30, 0x81	; 129
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_voidInit+0x172>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e1 58       	subi	r30, 0x81	; 129
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2cea:	80 e3       	ldi	r24, 0x30	; 48
    2cec:	0e 94 a5 1c 	call	0x394a	; 0x394a <LCD_voidSendInitCommand>
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e5 58       	subi	r30, 0x85	; 133
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 ea       	ldi	r26, 0xA0	; 160
    2cfc:	b0 e4       	ldi	r27, 0x40	; 64
    2cfe:	80 83       	st	Z, r24
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	a2 83       	std	Z+2, r26	; 0x02
    2d04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	8e 01       	movw	r16, r28
    2d08:	09 58       	subi	r16, 0x89	; 137
    2d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e5 58       	subi	r30, 0x85	; 133
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	55 e4       	ldi	r21, 0x45	; 69
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	f8 01       	movw	r30, r16
    2d2c:	80 83       	st	Z, r24
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	a2 83       	std	Z+2, r26	; 0x02
    2d32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d34:	fe 01       	movw	r30, r28
    2d36:	e9 58       	subi	r30, 0x89	; 137
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	44 f4       	brge	.+16     	; 0x2d62 <LCD_voidInit+0x1f8>
		__ticks = 1;
    2d52:	fe 01       	movw	r30, r28
    2d54:	eb 58       	subi	r30, 0x8B	; 139
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
    2d60:	64 c0       	rjmp	.+200    	; 0x2e2a <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    2d62:	fe 01       	movw	r30, r28
    2d64:	e9 58       	subi	r30, 0x89	; 137
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	60 81       	ld	r22, Z
    2d6a:	71 81       	ldd	r23, Z+1	; 0x01
    2d6c:	82 81       	ldd	r24, Z+2	; 0x02
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	3f ef       	ldi	r19, 0xFF	; 255
    2d74:	4f e7       	ldi	r20, 0x7F	; 127
    2d76:	57 e4       	ldi	r21, 0x47	; 71
    2d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7c:	18 16       	cp	r1, r24
    2d7e:	0c f0       	brlt	.+2      	; 0x2d82 <LCD_voidInit+0x218>
    2d80:	43 c0       	rjmp	.+134    	; 0x2e08 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	fe 01       	movw	r30, r28
    2d84:	e5 58       	subi	r30, 0x85	; 133
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	60 81       	ld	r22, Z
    2d8a:	71 81       	ldd	r23, Z+1	; 0x01
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e2       	ldi	r20, 0x20	; 32
    2d96:	51 e4       	ldi	r21, 0x41	; 65
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	8e 01       	movw	r16, r28
    2da2:	0b 58       	subi	r16, 0x8B	; 139
    2da4:	1f 4f       	sbci	r17, 0xFF	; 255
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	f8 01       	movw	r30, r16
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	1f c0       	rjmp	.+62     	; 0x2df8 <LCD_voidInit+0x28e>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ed 58       	subi	r30, 0x8D	; 141
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 e9       	ldi	r24, 0x90	; 144
    2dc2:	91 e0       	ldi	r25, 0x01	; 1
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ed 58       	subi	r30, 0x8D	; 141
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_voidInit+0x268>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ed 58       	subi	r30, 0x8D	; 141
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	de 01       	movw	r26, r28
    2de2:	ab 58       	subi	r26, 0x8B	; 139
    2de4:	bf 4f       	sbci	r27, 0xFF	; 255
    2de6:	fe 01       	movw	r30, r28
    2de8:	eb 58       	subi	r30, 0x8B	; 139
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	11 96       	adiw	r26, 0x01	; 1
    2df4:	9c 93       	st	X, r25
    2df6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df8:	fe 01       	movw	r30, r28
    2dfa:	eb 58       	subi	r30, 0x8B	; 139
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	91 81       	ldd	r25, Z+1	; 0x01
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	d1 f6       	brne	.-76     	; 0x2dba <LCD_voidInit+0x250>
    2e06:	27 c0       	rjmp	.+78     	; 0x2e56 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e08:	8e 01       	movw	r16, r28
    2e0a:	0b 58       	subi	r16, 0x8B	; 139
    2e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e9 58       	subi	r30, 0x89	; 137
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	f8 01       	movw	r30, r16
    2e26:	91 83       	std	Z+1, r25	; 0x01
    2e28:	80 83       	st	Z, r24
    2e2a:	de 01       	movw	r26, r28
    2e2c:	af 58       	subi	r26, 0x8F	; 143
    2e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e30:	fe 01       	movw	r30, r28
    2e32:	eb 58       	subi	r30, 0x8B	; 139
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	8d 93       	st	X+, r24
    2e3c:	9c 93       	st	X, r25
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ef 58       	subi	r30, 0x8F	; 143
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_voidInit+0x2de>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ef 58       	subi	r30, 0x8F	; 143
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2e56:	80 e3       	ldi	r24, 0x30	; 48
    2e58:	0e 94 a5 1c 	call	0x394a	; 0x394a <LCD_voidSendInitCommand>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e3 59       	subi	r30, 0x93	; 147
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e8       	ldi	r26, 0x80	; 128
    2e68:	bf e3       	ldi	r27, 0x3F	; 63
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	8e 01       	movw	r16, r28
    2e74:	07 59       	subi	r16, 0x97	; 151
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e3 59       	subi	r30, 0x93	; 147
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a e7       	ldi	r20, 0x7A	; 122
    2e8c:	55 e4       	ldi	r21, 0x45	; 69
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e7 59       	subi	r30, 0x97	; 151
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	44 f4       	brge	.+16     	; 0x2ece <LCD_voidInit+0x364>
		__ticks = 1;
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e9 59       	subi	r30, 0x99	; 153
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	64 c0       	rjmp	.+200    	; 0x2f96 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e7 59       	subi	r30, 0x97	; 151
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	0c f0       	brlt	.+2      	; 0x2eee <LCD_voidInit+0x384>
    2eec:	43 c0       	rjmp	.+134    	; 0x2f74 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e3 59       	subi	r30, 0x93	; 147
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8e 01       	movw	r16, r28
    2f0e:	09 59       	subi	r16, 0x99	; 153
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	1f c0       	rjmp	.+62     	; 0x2f64 <LCD_voidInit+0x3fa>
    2f26:	fe 01       	movw	r30, r28
    2f28:	eb 59       	subi	r30, 0x9B	; 155
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 e9       	ldi	r24, 0x90	; 144
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	fe 01       	movw	r30, r28
    2f36:	eb 59       	subi	r30, 0x9B	; 155
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_voidInit+0x3d4>
    2f42:	fe 01       	movw	r30, r28
    2f44:	eb 59       	subi	r30, 0x9B	; 155
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	de 01       	movw	r26, r28
    2f4e:	a9 59       	subi	r26, 0x99	; 153
    2f50:	bf 4f       	sbci	r27, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	e9 59       	subi	r30, 0x99	; 153
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	9c 93       	st	X, r25
    2f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	fe 01       	movw	r30, r28
    2f66:	e9 59       	subi	r30, 0x99	; 153
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	d1 f6       	brne	.-76     	; 0x2f26 <LCD_voidInit+0x3bc>
    2f72:	27 c0       	rjmp	.+78     	; 0x2fc2 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	8e 01       	movw	r16, r28
    2f76:	09 59       	subi	r16, 0x99	; 153
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e7 59       	subi	r30, 0x97	; 151
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	f8 01       	movw	r30, r16
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
    2f96:	de 01       	movw	r26, r28
    2f98:	ad 59       	subi	r26, 0x9D	; 157
    2f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e9 59       	subi	r30, 0x99	; 153
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	8d 93       	st	X+, r24
    2fa8:	9c 93       	st	X, r25
    2faa:	fe 01       	movw	r30, r28
    2fac:	ed 59       	subi	r30, 0x9D	; 157
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_voidInit+0x44a>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	ed 59       	subi	r30, 0x9D	; 157
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2fc2:	80 e3       	ldi	r24, 0x30	; 48
    2fc4:	0e 94 a5 1c 	call	0x394a	; 0x394a <LCD_voidSendInitCommand>
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e1 5a       	subi	r30, 0xA1	; 161
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a0 e8       	ldi	r26, 0x80	; 128
    2fd4:	bf e3       	ldi	r27, 0x3F	; 63
    2fd6:	80 83       	st	Z, r24
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	a2 83       	std	Z+2, r26	; 0x02
    2fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	8e 01       	movw	r16, r28
    2fe0:	05 5a       	subi	r16, 0xA5	; 165
    2fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e1 5a       	subi	r30, 0xA1	; 161
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	4a e7       	ldi	r20, 0x7A	; 122
    2ff8:	55 e4       	ldi	r21, 0x45	; 69
    2ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	f8 01       	movw	r30, r16
    3004:	80 83       	st	Z, r24
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	a2 83       	std	Z+2, r26	; 0x02
    300a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    300c:	fe 01       	movw	r30, r28
    300e:	e5 5a       	subi	r30, 0xA5	; 165
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	44 f4       	brge	.+16     	; 0x303a <LCD_voidInit+0x4d0>
		__ticks = 1;
    302a:	fe 01       	movw	r30, r28
    302c:	e7 5a       	subi	r30, 0xA7	; 167
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	91 83       	std	Z+1, r25	; 0x01
    3036:	80 83       	st	Z, r24
    3038:	64 c0       	rjmp	.+200    	; 0x3102 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    303a:	fe 01       	movw	r30, r28
    303c:	e5 5a       	subi	r30, 0xA5	; 165
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	3f ef       	ldi	r19, 0xFF	; 255
    304c:	4f e7       	ldi	r20, 0x7F	; 127
    304e:	57 e4       	ldi	r21, 0x47	; 71
    3050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3054:	18 16       	cp	r1, r24
    3056:	0c f0       	brlt	.+2      	; 0x305a <LCD_voidInit+0x4f0>
    3058:	43 c0       	rjmp	.+134    	; 0x30e0 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	fe 01       	movw	r30, r28
    305c:	e1 5a       	subi	r30, 0xA1	; 161
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	60 81       	ld	r22, Z
    3062:	71 81       	ldd	r23, Z+1	; 0x01
    3064:	82 81       	ldd	r24, Z+2	; 0x02
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	8e 01       	movw	r16, r28
    307a:	07 5a       	subi	r16, 0xA7	; 167
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	f8 01       	movw	r30, r16
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
    3090:	1f c0       	rjmp	.+62     	; 0x30d0 <LCD_voidInit+0x566>
    3092:	fe 01       	movw	r30, r28
    3094:	e9 5a       	subi	r30, 0xA9	; 169
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 e9       	ldi	r24, 0x90	; 144
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	80 83       	st	Z, r24
    30a0:	fe 01       	movw	r30, r28
    30a2:	e9 5a       	subi	r30, 0xA9	; 169
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <LCD_voidInit+0x540>
    30ae:	fe 01       	movw	r30, r28
    30b0:	e9 5a       	subi	r30, 0xA9	; 169
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b8:	de 01       	movw	r26, r28
    30ba:	a7 5a       	subi	r26, 0xA7	; 167
    30bc:	bf 4f       	sbci	r27, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	e7 5a       	subi	r30, 0xA7	; 167
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	11 96       	adiw	r26, 0x01	; 1
    30cc:	9c 93       	st	X, r25
    30ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d0:	fe 01       	movw	r30, r28
    30d2:	e7 5a       	subi	r30, 0xA7	; 167
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	d1 f6       	brne	.-76     	; 0x3092 <LCD_voidInit+0x528>
    30de:	27 c0       	rjmp	.+78     	; 0x312e <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e0:	8e 01       	movw	r16, r28
    30e2:	07 5a       	subi	r16, 0xA7	; 167
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	fe 01       	movw	r30, r28
    30e8:	e5 5a       	subi	r30, 0xA5	; 165
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	f8 01       	movw	r30, r16
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	80 83       	st	Z, r24
    3102:	de 01       	movw	r26, r28
    3104:	ab 5a       	subi	r26, 0xAB	; 171
    3106:	bf 4f       	sbci	r27, 0xFF	; 255
    3108:	fe 01       	movw	r30, r28
    310a:	e7 5a       	subi	r30, 0xA7	; 167
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	91 81       	ldd	r25, Z+1	; 0x01
    3112:	8d 93       	st	X+, r24
    3114:	9c 93       	st	X, r25
    3116:	fe 01       	movw	r30, r28
    3118:	eb 5a       	subi	r30, 0xAB	; 171
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <LCD_voidInit+0x5b6>
    3124:	fe 01       	movw	r30, r28
    3126:	eb 5a       	subi	r30, 0xAB	; 171
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    312e:	80 e2       	ldi	r24, 0x20	; 32
    3130:	0e 94 a5 1c 	call	0x394a	; 0x394a <LCD_voidSendInitCommand>
    3134:	fe 01       	movw	r30, r28
    3136:	ef 5a       	subi	r30, 0xAF	; 175
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a0 e8       	ldi	r26, 0x80	; 128
    3140:	bf e3       	ldi	r27, 0x3F	; 63
    3142:	80 83       	st	Z, r24
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	a2 83       	std	Z+2, r26	; 0x02
    3148:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	8e 01       	movw	r16, r28
    314c:	03 5b       	subi	r16, 0xB3	; 179
    314e:	1f 4f       	sbci	r17, 0xFF	; 255
    3150:	fe 01       	movw	r30, r28
    3152:	ef 5a       	subi	r30, 0xAF	; 175
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4a e7       	ldi	r20, 0x7A	; 122
    3164:	55 e4       	ldi	r21, 0x45	; 69
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	f8 01       	movw	r30, r16
    3170:	80 83       	st	Z, r24
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	a2 83       	std	Z+2, r26	; 0x02
    3176:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3178:	fe 01       	movw	r30, r28
    317a:	e3 5b       	subi	r30, 0xB3	; 179
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e8       	ldi	r20, 0x80	; 128
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3192:	88 23       	and	r24, r24
    3194:	44 f4       	brge	.+16     	; 0x31a6 <LCD_voidInit+0x63c>
		__ticks = 1;
    3196:	fe 01       	movw	r30, r28
    3198:	e5 5b       	subi	r30, 0xB5	; 181
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	80 83       	st	Z, r24
    31a4:	64 c0       	rjmp	.+200    	; 0x326e <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    31a6:	fe 01       	movw	r30, r28
    31a8:	e3 5b       	subi	r30, 0xB3	; 179
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	3f ef       	ldi	r19, 0xFF	; 255
    31b8:	4f e7       	ldi	r20, 0x7F	; 127
    31ba:	57 e4       	ldi	r21, 0x47	; 71
    31bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c0:	18 16       	cp	r1, r24
    31c2:	0c f0       	brlt	.+2      	; 0x31c6 <LCD_voidInit+0x65c>
    31c4:	43 c0       	rjmp	.+134    	; 0x324c <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c6:	fe 01       	movw	r30, r28
    31c8:	ef 5a       	subi	r30, 0xAF	; 175
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8e 01       	movw	r16, r28
    31e6:	05 5b       	subi	r16, 0xB5	; 181
    31e8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	f8 01       	movw	r30, r16
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	1f c0       	rjmp	.+62     	; 0x323c <LCD_voidInit+0x6d2>
    31fe:	fe 01       	movw	r30, r28
    3200:	e7 5b       	subi	r30, 0xB7	; 183
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 e9       	ldi	r24, 0x90	; 144
    3206:	91 e0       	ldi	r25, 0x01	; 1
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	80 83       	st	Z, r24
    320c:	fe 01       	movw	r30, r28
    320e:	e7 5b       	subi	r30, 0xB7	; 183
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 81       	ld	r24, Z
    3214:	91 81       	ldd	r25, Z+1	; 0x01
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <LCD_voidInit+0x6ac>
    321a:	fe 01       	movw	r30, r28
    321c:	e7 5b       	subi	r30, 0xB7	; 183
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3224:	de 01       	movw	r26, r28
    3226:	a5 5b       	subi	r26, 0xB5	; 181
    3228:	bf 4f       	sbci	r27, 0xFF	; 255
    322a:	fe 01       	movw	r30, r28
    322c:	e5 5b       	subi	r30, 0xB5	; 181
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	11 96       	adiw	r26, 0x01	; 1
    3238:	9c 93       	st	X, r25
    323a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323c:	fe 01       	movw	r30, r28
    323e:	e5 5b       	subi	r30, 0xB5	; 181
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	d1 f6       	brne	.-76     	; 0x31fe <LCD_voidInit+0x694>
    324a:	27 c0       	rjmp	.+78     	; 0x329a <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324c:	8e 01       	movw	r16, r28
    324e:	05 5b       	subi	r16, 0xB5	; 181
    3250:	1f 4f       	sbci	r17, 0xFF	; 255
    3252:	fe 01       	movw	r30, r28
    3254:	e3 5b       	subi	r30, 0xB3	; 179
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	60 81       	ld	r22, Z
    325a:	71 81       	ldd	r23, Z+1	; 0x01
    325c:	82 81       	ldd	r24, Z+2	; 0x02
    325e:	93 81       	ldd	r25, Z+3	; 0x03
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	f8 01       	movw	r30, r16
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	80 83       	st	Z, r24
    326e:	de 01       	movw	r26, r28
    3270:	a9 5b       	subi	r26, 0xB9	; 185
    3272:	bf 4f       	sbci	r27, 0xFF	; 255
    3274:	fe 01       	movw	r30, r28
    3276:	e5 5b       	subi	r30, 0xB5	; 181
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	8d 93       	st	X+, r24
    3280:	9c 93       	st	X, r25
    3282:	fe 01       	movw	r30, r28
    3284:	e9 5b       	subi	r30, 0xB9	; 185
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <LCD_voidInit+0x722>
    3290:	fe 01       	movw	r30, r28
    3292:	e9 5b       	subi	r30, 0xB9	; 185
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    329a:	88 e2       	ldi	r24, 0x28	; 40
    329c:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
    32a0:	fe 01       	movw	r30, r28
    32a2:	ed 5b       	subi	r30, 0xBD	; 189
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a0 e8       	ldi	r26, 0x80	; 128
    32ac:	bf e3       	ldi	r27, 0x3F	; 63
    32ae:	80 83       	st	Z, r24
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	a2 83       	std	Z+2, r26	; 0x02
    32b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b6:	8e 01       	movw	r16, r28
    32b8:	01 5c       	subi	r16, 0xC1	; 193
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	fe 01       	movw	r30, r28
    32be:	ed 5b       	subi	r30, 0xBD	; 189
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	60 81       	ld	r22, Z
    32c4:	71 81       	ldd	r23, Z+1	; 0x01
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	4a e7       	ldi	r20, 0x7A	; 122
    32d0:	55 e4       	ldi	r21, 0x45	; 69
    32d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	f8 01       	movw	r30, r16
    32dc:	80 83       	st	Z, r24
    32de:	91 83       	std	Z+1, r25	; 0x01
    32e0:	a2 83       	std	Z+2, r26	; 0x02
    32e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32e4:	fe 01       	movw	r30, r28
    32e6:	ff 96       	adiw	r30, 0x3f	; 63
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	93 81       	ldd	r25, Z+3	; 0x03
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <LCD_voidInit+0x7a0>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9e af       	std	Y+62, r25	; 0x3e
    3306:	8d af       	std	Y+61, r24	; 0x3d
    3308:	46 c0       	rjmp	.+140    	; 0x3396 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    330a:	fe 01       	movw	r30, r28
    330c:	ff 96       	adiw	r30, 0x3f	; 63
    330e:	60 81       	ld	r22, Z
    3310:	71 81       	ldd	r23, Z+1	; 0x01
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	93 81       	ldd	r25, Z+3	; 0x03
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	3f ef       	ldi	r19, 0xFF	; 255
    331a:	4f e7       	ldi	r20, 0x7F	; 127
    331c:	57 e4       	ldi	r21, 0x47	; 71
    331e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3322:	18 16       	cp	r1, r24
    3324:	64 f5       	brge	.+88     	; 0x337e <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	fe 01       	movw	r30, r28
    3328:	ed 5b       	subi	r30, 0xBD	; 189
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e2       	ldi	r20, 0x20	; 32
    333a:	51 e4       	ldi	r21, 0x41	; 65
    333c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9e af       	std	Y+62, r25	; 0x3e
    3352:	8d af       	std	Y+61, r24	; 0x3d
    3354:	0f c0       	rjmp	.+30     	; 0x3374 <LCD_voidInit+0x80a>
    3356:	80 e9       	ldi	r24, 0x90	; 144
    3358:	91 e0       	ldi	r25, 0x01	; 1
    335a:	9c af       	std	Y+60, r25	; 0x3c
    335c:	8b af       	std	Y+59, r24	; 0x3b
    335e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3360:	9c ad       	ldd	r25, Y+60	; 0x3c
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	f1 f7       	brne	.-4      	; 0x3362 <LCD_voidInit+0x7f8>
    3366:	9c af       	std	Y+60, r25	; 0x3c
    3368:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8d ad       	ldd	r24, Y+61	; 0x3d
    336c:	9e ad       	ldd	r25, Y+62	; 0x3e
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	9e af       	std	Y+62, r25	; 0x3e
    3372:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8d ad       	ldd	r24, Y+61	; 0x3d
    3376:	9e ad       	ldd	r25, Y+62	; 0x3e
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	69 f7       	brne	.-38     	; 0x3356 <LCD_voidInit+0x7ec>
    337c:	16 c0       	rjmp	.+44     	; 0x33aa <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	fe 01       	movw	r30, r28
    3380:	ff 96       	adiw	r30, 0x3f	; 63
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	9e af       	std	Y+62, r25	; 0x3e
    3394:	8d af       	std	Y+61, r24	; 0x3d
    3396:	8d ad       	ldd	r24, Y+61	; 0x3d
    3398:	9e ad       	ldd	r25, Y+62	; 0x3e
    339a:	9a af       	std	Y+58, r25	; 0x3a
    339c:	89 af       	std	Y+57, r24	; 0x39
    339e:	89 ad       	ldd	r24, Y+57	; 0x39
    33a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <LCD_voidInit+0x838>
    33a6:	9a af       	std	Y+58, r25	; 0x3a
    33a8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    33aa:	88 e0       	ldi	r24, 0x08	; 8
    33ac:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	a0 e8       	ldi	r26, 0x80	; 128
    33b6:	bf e3       	ldi	r27, 0x3F	; 63
    33b8:	8d ab       	std	Y+53, r24	; 0x35
    33ba:	9e ab       	std	Y+54, r25	; 0x36
    33bc:	af ab       	std	Y+55, r26	; 0x37
    33be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c0:	6d a9       	ldd	r22, Y+53	; 0x35
    33c2:	7e a9       	ldd	r23, Y+54	; 0x36
    33c4:	8f a9       	ldd	r24, Y+55	; 0x37
    33c6:	98 ad       	ldd	r25, Y+56	; 0x38
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	4a e7       	ldi	r20, 0x7A	; 122
    33ce:	55 e4       	ldi	r21, 0x45	; 69
    33d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	89 ab       	std	Y+49, r24	; 0x31
    33da:	9a ab       	std	Y+50, r25	; 0x32
    33dc:	ab ab       	std	Y+51, r26	; 0x33
    33de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33e0:	69 a9       	ldd	r22, Y+49	; 0x31
    33e2:	7a a9       	ldd	r23, Y+50	; 0x32
    33e4:	8b a9       	ldd	r24, Y+51	; 0x33
    33e6:	9c a9       	ldd	r25, Y+52	; 0x34
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f e3       	ldi	r21, 0x3F	; 63
    33f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f4:	88 23       	and	r24, r24
    33f6:	2c f4       	brge	.+10     	; 0x3402 <LCD_voidInit+0x898>
		__ticks = 1;
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	98 ab       	std	Y+48, r25	; 0x30
    33fe:	8f a7       	std	Y+47, r24	; 0x2f
    3400:	3f c0       	rjmp	.+126    	; 0x3480 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    3402:	69 a9       	ldd	r22, Y+49	; 0x31
    3404:	7a a9       	ldd	r23, Y+50	; 0x32
    3406:	8b a9       	ldd	r24, Y+51	; 0x33
    3408:	9c a9       	ldd	r25, Y+52	; 0x34
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	3f ef       	ldi	r19, 0xFF	; 255
    340e:	4f e7       	ldi	r20, 0x7F	; 127
    3410:	57 e4       	ldi	r21, 0x47	; 71
    3412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3416:	18 16       	cp	r1, r24
    3418:	4c f5       	brge	.+82     	; 0x346c <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    341a:	6d a9       	ldd	r22, Y+53	; 0x35
    341c:	7e a9       	ldd	r23, Y+54	; 0x36
    341e:	8f a9       	ldd	r24, Y+55	; 0x37
    3420:	98 ad       	ldd	r25, Y+56	; 0x38
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e2       	ldi	r20, 0x20	; 32
    3428:	51 e4       	ldi	r21, 0x41	; 65
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	98 ab       	std	Y+48, r25	; 0x30
    3440:	8f a7       	std	Y+47, r24	; 0x2f
    3442:	0f c0       	rjmp	.+30     	; 0x3462 <LCD_voidInit+0x8f8>
    3444:	80 e9       	ldi	r24, 0x90	; 144
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	9e a7       	std	Y+46, r25	; 0x2e
    344a:	8d a7       	std	Y+45, r24	; 0x2d
    344c:	8d a5       	ldd	r24, Y+45	; 0x2d
    344e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <LCD_voidInit+0x8e6>
    3454:	9e a7       	std	Y+46, r25	; 0x2e
    3456:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	8f a5       	ldd	r24, Y+47	; 0x2f
    345a:	98 a9       	ldd	r25, Y+48	; 0x30
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	98 ab       	std	Y+48, r25	; 0x30
    3460:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3462:	8f a5       	ldd	r24, Y+47	; 0x2f
    3464:	98 a9       	ldd	r25, Y+48	; 0x30
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	69 f7       	brne	.-38     	; 0x3444 <LCD_voidInit+0x8da>
    346a:	14 c0       	rjmp	.+40     	; 0x3494 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346c:	69 a9       	ldd	r22, Y+49	; 0x31
    346e:	7a a9       	ldd	r23, Y+50	; 0x32
    3470:	8b a9       	ldd	r24, Y+51	; 0x33
    3472:	9c a9       	ldd	r25, Y+52	; 0x34
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	98 ab       	std	Y+48, r25	; 0x30
    347e:	8f a7       	std	Y+47, r24	; 0x2f
    3480:	8f a5       	ldd	r24, Y+47	; 0x2f
    3482:	98 a9       	ldd	r25, Y+48	; 0x30
    3484:	9c a7       	std	Y+44, r25	; 0x2c
    3486:	8b a7       	std	Y+43, r24	; 0x2b
    3488:	8b a5       	ldd	r24, Y+43	; 0x2b
    348a:	9c a5       	ldd	r25, Y+44	; 0x2c
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <LCD_voidInit+0x922>
    3490:	9c a7       	std	Y+44, r25	; 0x2c
    3492:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	a0 ea       	ldi	r26, 0xA0	; 160
    34a0:	b0 e4       	ldi	r27, 0x40	; 64
    34a2:	8f a3       	std	Y+39, r24	; 0x27
    34a4:	98 a7       	std	Y+40, r25	; 0x28
    34a6:	a9 a7       	std	Y+41, r26	; 0x29
    34a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34aa:	6f a1       	ldd	r22, Y+39	; 0x27
    34ac:	78 a5       	ldd	r23, Y+40	; 0x28
    34ae:	89 a5       	ldd	r24, Y+41	; 0x29
    34b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	4a e7       	ldi	r20, 0x7A	; 122
    34b8:	55 e4       	ldi	r21, 0x45	; 69
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	8b a3       	std	Y+35, r24	; 0x23
    34c4:	9c a3       	std	Y+36, r25	; 0x24
    34c6:	ad a3       	std	Y+37, r26	; 0x25
    34c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34ca:	6b a1       	ldd	r22, Y+35	; 0x23
    34cc:	7c a1       	ldd	r23, Y+36	; 0x24
    34ce:	8d a1       	ldd	r24, Y+37	; 0x25
    34d0:	9e a1       	ldd	r25, Y+38	; 0x26
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e8       	ldi	r20, 0x80	; 128
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34de:	88 23       	and	r24, r24
    34e0:	2c f4       	brge	.+10     	; 0x34ec <LCD_voidInit+0x982>
		__ticks = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9a a3       	std	Y+34, r25	; 0x22
    34e8:	89 a3       	std	Y+33, r24	; 0x21
    34ea:	3f c0       	rjmp	.+126    	; 0x356a <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    34ec:	6b a1       	ldd	r22, Y+35	; 0x23
    34ee:	7c a1       	ldd	r23, Y+36	; 0x24
    34f0:	8d a1       	ldd	r24, Y+37	; 0x25
    34f2:	9e a1       	ldd	r25, Y+38	; 0x26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	3f ef       	ldi	r19, 0xFF	; 255
    34f8:	4f e7       	ldi	r20, 0x7F	; 127
    34fa:	57 e4       	ldi	r21, 0x47	; 71
    34fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3500:	18 16       	cp	r1, r24
    3502:	4c f5       	brge	.+82     	; 0x3556 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	6f a1       	ldd	r22, Y+39	; 0x27
    3506:	78 a5       	ldd	r23, Y+40	; 0x28
    3508:	89 a5       	ldd	r24, Y+41	; 0x29
    350a:	9a a5       	ldd	r25, Y+42	; 0x2a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e2       	ldi	r20, 0x20	; 32
    3512:	51 e4       	ldi	r21, 0x41	; 65
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9a a3       	std	Y+34, r25	; 0x22
    352a:	89 a3       	std	Y+33, r24	; 0x21
    352c:	0f c0       	rjmp	.+30     	; 0x354c <LCD_voidInit+0x9e2>
    352e:	80 e9       	ldi	r24, 0x90	; 144
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	98 a3       	std	Y+32, r25	; 0x20
    3534:	8f 8f       	std	Y+31, r24	; 0x1f
    3536:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3538:	98 a1       	ldd	r25, Y+32	; 0x20
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <LCD_voidInit+0x9d0>
    353e:	98 a3       	std	Y+32, r25	; 0x20
    3540:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3542:	89 a1       	ldd	r24, Y+33	; 0x21
    3544:	9a a1       	ldd	r25, Y+34	; 0x22
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	9a a3       	std	Y+34, r25	; 0x22
    354a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354c:	89 a1       	ldd	r24, Y+33	; 0x21
    354e:	9a a1       	ldd	r25, Y+34	; 0x22
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	69 f7       	brne	.-38     	; 0x352e <LCD_voidInit+0x9c4>
    3554:	14 c0       	rjmp	.+40     	; 0x357e <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3556:	6b a1       	ldd	r22, Y+35	; 0x23
    3558:	7c a1       	ldd	r23, Y+36	; 0x24
    355a:	8d a1       	ldd	r24, Y+37	; 0x25
    355c:	9e a1       	ldd	r25, Y+38	; 0x26
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9a a3       	std	Y+34, r25	; 0x22
    3568:	89 a3       	std	Y+33, r24	; 0x21
    356a:	89 a1       	ldd	r24, Y+33	; 0x21
    356c:	9a a1       	ldd	r25, Y+34	; 0x22
    356e:	9e 8f       	std	Y+30, r25	; 0x1e
    3570:	8d 8f       	std	Y+29, r24	; 0x1d
    3572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3574:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <LCD_voidInit+0xa0c>
    357a:	9e 8f       	std	Y+30, r25	; 0x1e
    357c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    357e:	8c e0       	ldi	r24, 0x0C	; 12
    3580:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a0 e8       	ldi	r26, 0x80	; 128
    358a:	bf e3       	ldi	r27, 0x3F	; 63
    358c:	89 8f       	std	Y+25, r24	; 0x19
    358e:	9a 8f       	std	Y+26, r25	; 0x1a
    3590:	ab 8f       	std	Y+27, r26	; 0x1b
    3592:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3594:	69 8d       	ldd	r22, Y+25	; 0x19
    3596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    359a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	4a e7       	ldi	r20, 0x7A	; 122
    35a2:	55 e4       	ldi	r21, 0x45	; 69
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	8d 8b       	std	Y+21, r24	; 0x15
    35ae:	9e 8b       	std	Y+22, r25	; 0x16
    35b0:	af 8b       	std	Y+23, r26	; 0x17
    35b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35b4:	6d 89       	ldd	r22, Y+21	; 0x15
    35b6:	7e 89       	ldd	r23, Y+22	; 0x16
    35b8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ba:	98 8d       	ldd	r25, Y+24	; 0x18
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	40 e8       	ldi	r20, 0x80	; 128
    35c2:	5f e3       	ldi	r21, 0x3F	; 63
    35c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c8:	88 23       	and	r24, r24
    35ca:	2c f4       	brge	.+10     	; 0x35d6 <LCD_voidInit+0xa6c>
		__ticks = 1;
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9c 8b       	std	Y+20, r25	; 0x14
    35d2:	8b 8b       	std	Y+19, r24	; 0x13
    35d4:	3f c0       	rjmp	.+126    	; 0x3654 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    35d6:	6d 89       	ldd	r22, Y+21	; 0x15
    35d8:	7e 89       	ldd	r23, Y+22	; 0x16
    35da:	8f 89       	ldd	r24, Y+23	; 0x17
    35dc:	98 8d       	ldd	r25, Y+24	; 0x18
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	3f ef       	ldi	r19, 0xFF	; 255
    35e2:	4f e7       	ldi	r20, 0x7F	; 127
    35e4:	57 e4       	ldi	r21, 0x47	; 71
    35e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35ea:	18 16       	cp	r1, r24
    35ec:	4c f5       	brge	.+82     	; 0x3640 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ee:	69 8d       	ldd	r22, Y+25	; 0x19
    35f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	40 e2       	ldi	r20, 0x20	; 32
    35fc:	51 e4       	ldi	r21, 0x41	; 65
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	8b 8b       	std	Y+19, r24	; 0x13
    3616:	0f c0       	rjmp	.+30     	; 0x3636 <LCD_voidInit+0xacc>
    3618:	80 e9       	ldi	r24, 0x90	; 144
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	9a 8b       	std	Y+18, r25	; 0x12
    361e:	89 8b       	std	Y+17, r24	; 0x11
    3620:	89 89       	ldd	r24, Y+17	; 0x11
    3622:	9a 89       	ldd	r25, Y+18	; 0x12
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <LCD_voidInit+0xaba>
    3628:	9a 8b       	std	Y+18, r25	; 0x12
    362a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362c:	8b 89       	ldd	r24, Y+19	; 0x13
    362e:	9c 89       	ldd	r25, Y+20	; 0x14
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	9c 8b       	std	Y+20, r25	; 0x14
    3634:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	8b 89       	ldd	r24, Y+19	; 0x13
    3638:	9c 89       	ldd	r25, Y+20	; 0x14
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f7       	brne	.-38     	; 0x3618 <LCD_voidInit+0xaae>
    363e:	14 c0       	rjmp	.+40     	; 0x3668 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3640:	6d 89       	ldd	r22, Y+21	; 0x15
    3642:	7e 89       	ldd	r23, Y+22	; 0x16
    3644:	8f 89       	ldd	r24, Y+23	; 0x17
    3646:	98 8d       	ldd	r25, Y+24	; 0x18
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9c 8b       	std	Y+20, r25	; 0x14
    3652:	8b 8b       	std	Y+19, r24	; 0x13
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14
    3658:	98 8b       	std	Y+16, r25	; 0x10
    365a:	8f 87       	std	Y+15, r24	; 0x0f
    365c:	8f 85       	ldd	r24, Y+15	; 0x0f
    365e:	98 89       	ldd	r25, Y+16	; 0x10
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <LCD_voidInit+0xaf6>
    3664:	98 8b       	std	Y+16, r25	; 0x10
    3666:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    3668:	86 e0       	ldi	r24, 0x06	; 6
    366a:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	a0 e8       	ldi	r26, 0x80	; 128
    3674:	bf e3       	ldi	r27, 0x3F	; 63
    3676:	8b 87       	std	Y+11, r24	; 0x0b
    3678:	9c 87       	std	Y+12, r25	; 0x0c
    367a:	ad 87       	std	Y+13, r26	; 0x0d
    367c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3680:	7c 85       	ldd	r23, Y+12	; 0x0c
    3682:	8d 85       	ldd	r24, Y+13	; 0x0d
    3684:	9e 85       	ldd	r25, Y+14	; 0x0e
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	4a e7       	ldi	r20, 0x7A	; 122
    368c:	55 e4       	ldi	r21, 0x45	; 69
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	8f 83       	std	Y+7, r24	; 0x07
    3698:	98 87       	std	Y+8, r25	; 0x08
    369a:	a9 87       	std	Y+9, r26	; 0x09
    369c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    369e:	6f 81       	ldd	r22, Y+7	; 0x07
    36a0:	78 85       	ldd	r23, Y+8	; 0x08
    36a2:	89 85       	ldd	r24, Y+9	; 0x09
    36a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e8       	ldi	r20, 0x80	; 128
    36ac:	5f e3       	ldi	r21, 0x3F	; 63
    36ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36b2:	88 23       	and	r24, r24
    36b4:	2c f4       	brge	.+10     	; 0x36c0 <LCD_voidInit+0xb56>
		__ticks = 1;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9e 83       	std	Y+6, r25	; 0x06
    36bc:	8d 83       	std	Y+5, r24	; 0x05
    36be:	3f c0       	rjmp	.+126    	; 0x373e <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    36c0:	6f 81       	ldd	r22, Y+7	; 0x07
    36c2:	78 85       	ldd	r23, Y+8	; 0x08
    36c4:	89 85       	ldd	r24, Y+9	; 0x09
    36c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	3f ef       	ldi	r19, 0xFF	; 255
    36cc:	4f e7       	ldi	r20, 0x7F	; 127
    36ce:	57 e4       	ldi	r21, 0x47	; 71
    36d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36d4:	18 16       	cp	r1, r24
    36d6:	4c f5       	brge	.+82     	; 0x372a <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36da:	7c 85       	ldd	r23, Y+12	; 0x0c
    36dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36de:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e2       	ldi	r20, 0x20	; 32
    36e6:	51 e4       	ldi	r21, 0x41	; 65
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	bc 01       	movw	r22, r24
    36f2:	cd 01       	movw	r24, r26
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
    3700:	0f c0       	rjmp	.+30     	; 0x3720 <LCD_voidInit+0xbb6>
    3702:	80 e9       	ldi	r24, 0x90	; 144
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	9c 83       	std	Y+4, r25	; 0x04
    3708:	8b 83       	std	Y+3, r24	; 0x03
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <LCD_voidInit+0xba4>
    3712:	9c 83       	std	Y+4, r25	; 0x04
    3714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	9e 81       	ldd	r25, Y+6	; 0x06
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	69 f7       	brne	.-38     	; 0x3702 <LCD_voidInit+0xb98>
    3728:	14 c0       	rjmp	.+40     	; 0x3752 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372a:	6f 81       	ldd	r22, Y+7	; 0x07
    372c:	78 85       	ldd	r23, Y+8	; 0x08
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	9e 83       	std	Y+6, r25	; 0x06
    373c:	8d 83       	std	Y+5, r24	; 0x05
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	9e 81       	ldd	r25, Y+6	; 0x06
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	9a 81       	ldd	r25, Y+2	; 0x02
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	f1 f7       	brne	.-4      	; 0x374a <LCD_voidInit+0xbe0>
    374e:	9a 83       	std	Y+2, r25	; 0x02
    3750:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3752:	c4 57       	subi	r28, 0x74	; 116
    3754:	df 4f       	sbci	r29, 0xFF	; 255
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	08 95       	ret

0000376a <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	2f 97       	sbiw	r28, 0x0f	; 15
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	63 e0       	ldi	r22, 0x03	; 3
    3784:	40 e0       	ldi	r20, 0x00	; 0
    3786:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	62 e0       	ldi	r22, 0x02	; 2
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3794:	8f 85       	ldd	r24, Y+15	; 0x0f
    3796:	82 95       	swap	r24
    3798:	8f 70       	andi	r24, 0x0F	; 15
    379a:	98 2f       	mov	r25, r24
    379c:	91 70       	andi	r25, 0x01	; 1
    379e:	82 e0       	ldi	r24, 0x02	; 2
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	49 2f       	mov	r20, r25
    37a4:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    37a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37aa:	82 95       	swap	r24
    37ac:	86 95       	lsr	r24
    37ae:	87 70       	andi	r24, 0x07	; 7
    37b0:	98 2f       	mov	r25, r24
    37b2:	91 70       	andi	r25, 0x01	; 1
    37b4:	82 e0       	ldi	r24, 0x02	; 2
    37b6:	61 e0       	ldi	r22, 0x01	; 1
    37b8:	49 2f       	mov	r20, r25
    37ba:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    37be:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c0:	82 95       	swap	r24
    37c2:	86 95       	lsr	r24
    37c4:	86 95       	lsr	r24
    37c6:	83 70       	andi	r24, 0x03	; 3
    37c8:	98 2f       	mov	r25, r24
    37ca:	91 70       	andi	r25, 0x01	; 1
    37cc:	82 e0       	ldi	r24, 0x02	; 2
    37ce:	62 e0       	ldi	r22, 0x02	; 2
    37d0:	49 2f       	mov	r20, r25
    37d2:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    37d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d8:	98 2f       	mov	r25, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	99 27       	eor	r25, r25
    37de:	99 1f       	adc	r25, r25
    37e0:	82 e0       	ldi	r24, 0x02	; 2
    37e2:	64 e0       	ldi	r22, 0x04	; 4
    37e4:	49 2f       	mov	r20, r25
    37e6:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	62 e0       	ldi	r22, 0x02	; 2
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	62 e0       	ldi	r22, 0x02	; 2
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    37fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3800:	98 2f       	mov	r25, r24
    3802:	91 70       	andi	r25, 0x01	; 1
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	49 2f       	mov	r20, r25
    380a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    380e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3810:	86 95       	lsr	r24
    3812:	98 2f       	mov	r25, r24
    3814:	91 70       	andi	r25, 0x01	; 1
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	61 e0       	ldi	r22, 0x01	; 1
    381a:	49 2f       	mov	r20, r25
    381c:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    3820:	8f 85       	ldd	r24, Y+15	; 0x0f
    3822:	86 95       	lsr	r24
    3824:	86 95       	lsr	r24
    3826:	98 2f       	mov	r25, r24
    3828:	91 70       	andi	r25, 0x01	; 1
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	62 e0       	ldi	r22, 0x02	; 2
    382e:	49 2f       	mov	r20, r25
    3830:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    3834:	8f 85       	ldd	r24, Y+15	; 0x0f
    3836:	86 95       	lsr	r24
    3838:	86 95       	lsr	r24
    383a:	86 95       	lsr	r24
    383c:	98 2f       	mov	r25, r24
    383e:	91 70       	andi	r25, 0x01	; 1
    3840:	82 e0       	ldi	r24, 0x02	; 2
    3842:	64 e0       	ldi	r22, 0x04	; 4
    3844:	49 2f       	mov	r20, r25
    3846:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	62 e0       	ldi	r22, 0x02	; 2
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	a0 ea       	ldi	r26, 0xA0	; 160
    385a:	b0 e4       	ldi	r27, 0x40	; 64
    385c:	8b 87       	std	Y+11, r24	; 0x0b
    385e:	9c 87       	std	Y+12, r25	; 0x0c
    3860:	ad 87       	std	Y+13, r26	; 0x0d
    3862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4a e7       	ldi	r20, 0x7A	; 122
    3872:	55 e4       	ldi	r21, 0x45	; 69
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8f 83       	std	Y+7, r24	; 0x07
    387e:	98 87       	std	Y+8, r25	; 0x08
    3880:	a9 87       	std	Y+9, r26	; 0x09
    3882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e8       	ldi	r20, 0x80	; 128
    3892:	5f e3       	ldi	r21, 0x3F	; 63
    3894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3898:	88 23       	and	r24, r24
    389a:	2c f4       	brge	.+10     	; 0x38a6 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	3f c0       	rjmp	.+126    	; 0x3924 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    38a6:	6f 81       	ldd	r22, Y+7	; 0x07
    38a8:	78 85       	ldd	r23, Y+8	; 0x08
    38aa:	89 85       	ldd	r24, Y+9	; 0x09
    38ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	3f ef       	ldi	r19, 0xFF	; 255
    38b2:	4f e7       	ldi	r20, 0x7F	; 127
    38b4:	57 e4       	ldi	r21, 0x47	; 71
    38b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ba:	18 16       	cp	r1, r24
    38bc:	4c f5       	brge	.+82     	; 0x3910 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e2       	ldi	r20, 0x20	; 32
    38cc:	51 e4       	ldi	r21, 0x41	; 65
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9e 83       	std	Y+6, r25	; 0x06
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	0f c0       	rjmp	.+30     	; 0x3906 <LCD_voidSendCommand+0x19c>
    38e8:	80 e9       	ldi	r24, 0x90	; 144
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	9c 83       	std	Y+4, r25	; 0x04
    38ee:	8b 83       	std	Y+3, r24	; 0x03
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	9c 81       	ldd	r25, Y+4	; 0x04
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <LCD_voidSendCommand+0x18a>
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fc:	8d 81       	ldd	r24, Y+5	; 0x05
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	9e 83       	std	Y+6, r25	; 0x06
    3904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	69 f7       	brne	.-38     	; 0x38e8 <LCD_voidSendCommand+0x17e>
    390e:	14 c0       	rjmp	.+40     	; 0x3938 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9e 83       	std	Y+6, r25	; 0x06
    3922:	8d 83       	std	Y+5, r24	; 0x05
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
    3926:	9e 81       	ldd	r25, Y+6	; 0x06
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <LCD_voidSendCommand+0x1c6>
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3938:	2f 96       	adiw	r28, 0x0f	; 15
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	2f 97       	sbiw	r28, 0x0f	; 15
    3954:	0f b6       	in	r0, 0x3f	; 63
    3956:	f8 94       	cli
    3958:	de bf       	out	0x3e, r29	; 62
    395a:	0f be       	out	0x3f, r0	; 63
    395c:	cd bf       	out	0x3d, r28	; 61
    395e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	63 e0       	ldi	r22, 0x03	; 3
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	62 e0       	ldi	r22, 0x02	; 2
    396e:	41 e0       	ldi	r20, 0x01	; 1
    3970:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3974:	8f 85       	ldd	r24, Y+15	; 0x0f
    3976:	82 95       	swap	r24
    3978:	8f 70       	andi	r24, 0x0F	; 15
    397a:	98 2f       	mov	r25, r24
    397c:	91 70       	andi	r25, 0x01	; 1
    397e:	82 e0       	ldi	r24, 0x02	; 2
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	49 2f       	mov	r20, r25
    3984:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3988:	8f 85       	ldd	r24, Y+15	; 0x0f
    398a:	82 95       	swap	r24
    398c:	86 95       	lsr	r24
    398e:	87 70       	andi	r24, 0x07	; 7
    3990:	98 2f       	mov	r25, r24
    3992:	91 70       	andi	r25, 0x01	; 1
    3994:	82 e0       	ldi	r24, 0x02	; 2
    3996:	61 e0       	ldi	r22, 0x01	; 1
    3998:	49 2f       	mov	r20, r25
    399a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    399e:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a0:	82 95       	swap	r24
    39a2:	86 95       	lsr	r24
    39a4:	86 95       	lsr	r24
    39a6:	83 70       	andi	r24, 0x03	; 3
    39a8:	98 2f       	mov	r25, r24
    39aa:	91 70       	andi	r25, 0x01	; 1
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	62 e0       	ldi	r22, 0x02	; 2
    39b0:	49 2f       	mov	r20, r25
    39b2:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    39b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b8:	98 2f       	mov	r25, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	99 27       	eor	r25, r25
    39be:	99 1f       	adc	r25, r25
    39c0:	82 e0       	ldi	r24, 0x02	; 2
    39c2:	64 e0       	ldi	r22, 0x04	; 4
    39c4:	49 2f       	mov	r20, r25
    39c6:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	62 e0       	ldi	r22, 0x02	; 2
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	a0 ea       	ldi	r26, 0xA0	; 160
    39da:	b0 e4       	ldi	r27, 0x40	; 64
    39dc:	8b 87       	std	Y+11, r24	; 0x0b
    39de:	9c 87       	std	Y+12, r25	; 0x0c
    39e0:	ad 87       	std	Y+13, r26	; 0x0d
    39e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	4a e7       	ldi	r20, 0x7A	; 122
    39f2:	55 e4       	ldi	r21, 0x45	; 69
    39f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	8f 83       	std	Y+7, r24	; 0x07
    39fe:	98 87       	std	Y+8, r25	; 0x08
    3a00:	a9 87       	std	Y+9, r26	; 0x09
    3a02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a04:	6f 81       	ldd	r22, Y+7	; 0x07
    3a06:	78 85       	ldd	r23, Y+8	; 0x08
    3a08:	89 85       	ldd	r24, Y+9	; 0x09
    3a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e8       	ldi	r20, 0x80	; 128
    3a12:	5f e3       	ldi	r21, 0x3F	; 63
    3a14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a18:	88 23       	and	r24, r24
    3a1a:	2c f4       	brge	.+10     	; 0x3a26 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	3f c0       	rjmp	.+126    	; 0x3aa4 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	3f ef       	ldi	r19, 0xFF	; 255
    3a32:	4f e7       	ldi	r20, 0x7F	; 127
    3a34:	57 e4       	ldi	r21, 0x47	; 71
    3a36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	4c f5       	brge	.+82     	; 0x3a90 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e2       	ldi	r20, 0x20	; 32
    3a4c:	51 e4       	ldi	r21, 0x41	; 65
    3a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	0f c0       	rjmp	.+30     	; 0x3a86 <LCD_voidSendInitCommand+0x13c>
    3a68:	80 e9       	ldi	r24, 0x90	; 144
    3a6a:	91 e0       	ldi	r25, 0x01	; 1
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	9c 81       	ldd	r25, Y+4	; 0x04
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <LCD_voidSendInitCommand+0x12a>
    3a78:	9c 83       	std	Y+4, r25	; 0x04
    3a7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
    3a88:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	69 f7       	brne	.-38     	; 0x3a68 <LCD_voidSendInitCommand+0x11e>
    3a8e:	14 c0       	rjmp	.+40     	; 0x3ab8 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a90:	6f 81       	ldd	r22, Y+7	; 0x07
    3a92:	78 85       	ldd	r23, Y+8	; 0x08
    3a94:	89 85       	ldd	r24, Y+9	; 0x09
    3a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <LCD_voidSendInitCommand+0x166>
    3ab4:	9a 83       	std	Y+2, r25	; 0x02
    3ab6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3ab8:	2f 96       	adiw	r28, 0x0f	; 15
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	63 e0       	ldi	r22, 0x03	; 3
    3ae4:	41 e0       	ldi	r20, 0x01	; 1
    3ae6:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	62 e0       	ldi	r22, 0x02	; 2
    3aee:	41 e0       	ldi	r20, 0x01	; 1
    3af0:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    3af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af6:	82 95       	swap	r24
    3af8:	8f 70       	andi	r24, 0x0F	; 15
    3afa:	98 2f       	mov	r25, r24
    3afc:	91 70       	andi	r25, 0x01	; 1
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	49 2f       	mov	r20, r25
    3b04:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    3b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b0a:	82 95       	swap	r24
    3b0c:	86 95       	lsr	r24
    3b0e:	87 70       	andi	r24, 0x07	; 7
    3b10:	98 2f       	mov	r25, r24
    3b12:	91 70       	andi	r25, 0x01	; 1
    3b14:	82 e0       	ldi	r24, 0x02	; 2
    3b16:	61 e0       	ldi	r22, 0x01	; 1
    3b18:	49 2f       	mov	r20, r25
    3b1a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    3b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b20:	82 95       	swap	r24
    3b22:	86 95       	lsr	r24
    3b24:	86 95       	lsr	r24
    3b26:	83 70       	andi	r24, 0x03	; 3
    3b28:	98 2f       	mov	r25, r24
    3b2a:	91 70       	andi	r25, 0x01	; 1
    3b2c:	82 e0       	ldi	r24, 0x02	; 2
    3b2e:	62 e0       	ldi	r22, 0x02	; 2
    3b30:	49 2f       	mov	r20, r25
    3b32:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    3b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b38:	98 2f       	mov	r25, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	99 27       	eor	r25, r25
    3b3e:	99 1f       	adc	r25, r25
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	64 e0       	ldi	r22, 0x04	; 4
    3b44:	49 2f       	mov	r20, r25
    3b46:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	62 e0       	ldi	r22, 0x02	; 2
    3b4e:	40 e0       	ldi	r20, 0x00	; 0
    3b50:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	62 e0       	ldi	r22, 0x02	; 2
    3b58:	41 e0       	ldi	r20, 0x01	; 1
    3b5a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    3b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b60:	98 2f       	mov	r25, r24
    3b62:	91 70       	andi	r25, 0x01	; 1
    3b64:	82 e0       	ldi	r24, 0x02	; 2
    3b66:	60 e0       	ldi	r22, 0x00	; 0
    3b68:	49 2f       	mov	r20, r25
    3b6a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    3b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b70:	86 95       	lsr	r24
    3b72:	98 2f       	mov	r25, r24
    3b74:	91 70       	andi	r25, 0x01	; 1
    3b76:	82 e0       	ldi	r24, 0x02	; 2
    3b78:	61 e0       	ldi	r22, 0x01	; 1
    3b7a:	49 2f       	mov	r20, r25
    3b7c:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    3b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b82:	86 95       	lsr	r24
    3b84:	86 95       	lsr	r24
    3b86:	98 2f       	mov	r25, r24
    3b88:	91 70       	andi	r25, 0x01	; 1
    3b8a:	82 e0       	ldi	r24, 0x02	; 2
    3b8c:	62 e0       	ldi	r22, 0x02	; 2
    3b8e:	49 2f       	mov	r20, r25
    3b90:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    3b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b96:	86 95       	lsr	r24
    3b98:	86 95       	lsr	r24
    3b9a:	86 95       	lsr	r24
    3b9c:	98 2f       	mov	r25, r24
    3b9e:	91 70       	andi	r25, 0x01	; 1
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	64 e0       	ldi	r22, 0x04	; 4
    3ba4:	49 2f       	mov	r20, r25
    3ba6:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	62 e0       	ldi	r22, 0x02	; 2
    3bae:	40 e0       	ldi	r20, 0x00	; 0
    3bb0:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	a0 ea       	ldi	r26, 0xA0	; 160
    3bba:	b0 e4       	ldi	r27, 0x40	; 64
    3bbc:	8b 87       	std	Y+11, r24	; 0x0b
    3bbe:	9c 87       	std	Y+12, r25	; 0x0c
    3bc0:	ad 87       	std	Y+13, r26	; 0x0d
    3bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	4a e7       	ldi	r20, 0x7A	; 122
    3bd2:	55 e4       	ldi	r21, 0x45	; 69
    3bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	8f 83       	std	Y+7, r24	; 0x07
    3bde:	98 87       	std	Y+8, r25	; 0x08
    3be0:	a9 87       	std	Y+9, r26	; 0x09
    3be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3be4:	6f 81       	ldd	r22, Y+7	; 0x07
    3be6:	78 85       	ldd	r23, Y+8	; 0x08
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	2c f4       	brge	.+10     	; 0x3c06 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	3f c0       	rjmp	.+126    	; 0x3c84 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    3c06:	6f 81       	ldd	r22, Y+7	; 0x07
    3c08:	78 85       	ldd	r23, Y+8	; 0x08
    3c0a:	89 85       	ldd	r24, Y+9	; 0x09
    3c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	3f ef       	ldi	r19, 0xFF	; 255
    3c12:	4f e7       	ldi	r20, 0x7F	; 127
    3c14:	57 e4       	ldi	r21, 0x47	; 71
    3c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c1a:	18 16       	cp	r1, r24
    3c1c:	4c f5       	brge	.+82     	; 0x3c70 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	40 e2       	ldi	r20, 0x20	; 32
    3c2c:	51 e4       	ldi	r21, 0x41	; 65
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	9e 83       	std	Y+6, r25	; 0x06
    3c44:	8d 83       	std	Y+5, r24	; 0x05
    3c46:	0f c0       	rjmp	.+30     	; 0x3c66 <LCD_voidWriteChar+0x19c>
    3c48:	80 e9       	ldi	r24, 0x90	; 144
    3c4a:	91 e0       	ldi	r25, 0x01	; 1
    3c4c:	9c 83       	std	Y+4, r25	; 0x04
    3c4e:	8b 83       	std	Y+3, r24	; 0x03
    3c50:	8b 81       	ldd	r24, Y+3	; 0x03
    3c52:	9c 81       	ldd	r25, Y+4	; 0x04
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <LCD_voidWriteChar+0x18a>
    3c58:	9c 83       	std	Y+4, r25	; 0x04
    3c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	9e 83       	std	Y+6, r25	; 0x06
    3c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c66:	8d 81       	ldd	r24, Y+5	; 0x05
    3c68:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	69 f7       	brne	.-38     	; 0x3c48 <LCD_voidWriteChar+0x17e>
    3c6e:	14 c0       	rjmp	.+40     	; 0x3c98 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c70:	6f 81       	ldd	r22, Y+7	; 0x07
    3c72:	78 85       	ldd	r23, Y+8	; 0x08
    3c74:	89 85       	ldd	r24, Y+9	; 0x09
    3c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	9e 83       	std	Y+6, r25	; 0x06
    3c82:	8d 83       	std	Y+5, r24	; 0x05
    3c84:	8d 81       	ldd	r24, Y+5	; 0x05
    3c86:	9e 81       	ldd	r25, Y+6	; 0x06
    3c88:	9a 83       	std	Y+2, r25	; 0x02
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <LCD_voidWriteChar+0x1c6>
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3c98:	2f 96       	adiw	r28, 0x0f	; 15
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	de bf       	out	0x3e, r29	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	cf 91       	pop	r28
    3ca6:	df 91       	pop	r29
    3ca8:	08 95       	ret

00003caa <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    3caa:	df 93       	push	r29
    3cac:	cf 93       	push	r28
    3cae:	00 d0       	rcall	.+0      	; 0x3cb0 <LCD_voidWriteString+0x6>
    3cb0:	0f 92       	push	r0
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
    3cb6:	9b 83       	std	Y+3, r25	; 0x03
    3cb8:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    3cba:	19 82       	std	Y+1, r1	; 0x01
    3cbc:	0e c0       	rjmp	.+28     	; 0x3cda <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	28 2f       	mov	r18, r24
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	fc 01       	movw	r30, r24
    3cca:	e2 0f       	add	r30, r18
    3ccc:	f3 1f       	adc	r31, r19
    3cce:	80 81       	ld	r24, Z
    3cd0:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
		index++;
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	8f 5f       	subi	r24, 0xFF	; 255
    3cd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	28 2f       	mov	r18, r24
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e2 0f       	add	r30, r18
    3ce8:	f3 1f       	adc	r31, r19
    3cea:	80 81       	ld	r24, Z
    3cec:	88 23       	and	r24, r24
    3cee:	39 f7       	brne	.-50     	; 0x3cbe <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	df 93       	push	r29
    3d02:	cf 93       	push	r28
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	2e 97       	sbiw	r28, 0x0e	; 14
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	69 87       	std	Y+9, r22	; 0x09
    3d16:	7a 87       	std	Y+10, r23	; 0x0a
    3d18:	8b 87       	std	Y+11, r24	; 0x0b
    3d1a:	9c 87       	std	Y+12, r25	; 0x0c
    3d1c:	5e 87       	std	Y+14, r21	; 0x0e
    3d1e:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    3d20:	1d 82       	std	Y+5, r1	; 0x05
    3d22:	1e 82       	std	Y+6, r1	; 0x06
    3d24:	1f 82       	std	Y+7, r1	; 0x07
    3d26:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    3d28:	83 e1       	ldi	r24, 0x13	; 19
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	a0 e0       	ldi	r26, 0x00	; 0
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	89 83       	std	Y+1, r24	; 0x01
    3d32:	9a 83       	std	Y+2, r25	; 0x02
    3d34:	ab 83       	std	Y+3, r26	; 0x03
    3d36:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    3d38:	29 81       	ldd	r18, Y+1	; 0x01
    3d3a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d40:	fc 01       	movw	r30, r24
    3d42:	e2 0f       	add	r30, r18
    3d44:	f3 1f       	adc	r31, r19
    3d46:	10 82       	st	Z, r1
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d4e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	a1 09       	sbc	r26, r1
    3d54:	b1 09       	sbc	r27, r1
    3d56:	89 83       	std	Y+1, r24	; 0x01
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	ab 83       	std	Y+3, r26	; 0x03
    3d5c:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    3d5e:	89 85       	ldd	r24, Y+9	; 0x09
    3d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d62:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d64:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d66:	bb 23       	and	r27, r27
    3d68:	0c f0       	brlt	.+2      	; 0x3d6c <IntToString+0x70>
    3d6a:	4d c0       	rjmp	.+154    	; 0x3e06 <IntToString+0x10a>
		flag = 1;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	a0 e0       	ldi	r26, 0x00	; 0
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	8d 83       	std	Y+5, r24	; 0x05
    3d76:	9e 83       	std	Y+6, r25	; 0x06
    3d78:	af 83       	std	Y+7, r26	; 0x07
    3d7a:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d82:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d84:	b0 95       	com	r27
    3d86:	a0 95       	com	r26
    3d88:	90 95       	com	r25
    3d8a:	81 95       	neg	r24
    3d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8e:	af 4f       	sbci	r26, 0xFF	; 255
    3d90:	bf 4f       	sbci	r27, 0xFF	; 255
    3d92:	89 87       	std	Y+9, r24	; 0x09
    3d94:	9a 87       	std	Y+10, r25	; 0x0a
    3d96:	ab 87       	std	Y+11, r26	; 0x0b
    3d98:	bc 87       	std	Y+12, r27	; 0x0c
    3d9a:	35 c0       	rjmp	.+106    	; 0x3e06 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    3d9c:	29 81       	ldd	r18, Y+1	; 0x01
    3d9e:	3a 81       	ldd	r19, Y+2	; 0x02
    3da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da4:	8c 01       	movw	r16, r24
    3da6:	02 0f       	add	r16, r18
    3da8:	13 1f       	adc	r17, r19
    3daa:	89 85       	ldd	r24, Y+9	; 0x09
    3dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dae:	ab 85       	ldd	r26, Y+11	; 0x0b
    3db0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3db2:	2a e0       	ldi	r18, 0x0A	; 10
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 15 2a 	call	0x542a	; 0x542a <__divmodsi4>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	80 5d       	subi	r24, 0xD0	; 208
    3dc8:	f8 01       	movw	r30, r16
    3dca:	80 83       	st	Z, r24
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd0:	ab 81       	ldd	r26, Y+3	; 0x03
    3dd2:	bc 81       	ldd	r27, Y+4	; 0x04
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	a1 09       	sbc	r26, r1
    3dd8:	b1 09       	sbc	r27, r1
    3dda:	89 83       	std	Y+1, r24	; 0x01
    3ddc:	9a 83       	std	Y+2, r25	; 0x02
    3dde:	ab 83       	std	Y+3, r26	; 0x03
    3de0:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3de2:	89 85       	ldd	r24, Y+9	; 0x09
    3de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de6:	ab 85       	ldd	r26, Y+11	; 0x0b
    3de8:	bc 85       	ldd	r27, Y+12	; 0x0c
    3dea:	2a e0       	ldi	r18, 0x0A	; 10
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	0e 94 15 2a 	call	0x542a	; 0x542a <__divmodsi4>
    3dfa:	da 01       	movw	r26, r20
    3dfc:	c9 01       	movw	r24, r18
    3dfe:	89 87       	std	Y+9, r24	; 0x09
    3e00:	9a 87       	std	Y+10, r25	; 0x0a
    3e02:	ab 87       	std	Y+11, r26	; 0x0b
    3e04:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    3e06:	89 85       	ldd	r24, Y+9	; 0x09
    3e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3e0c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	a1 05       	cpc	r26, r1
    3e12:	b1 05       	cpc	r27, r1
    3e14:	19 f6       	brne	.-122    	; 0x3d9c <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    3e16:	8d 81       	ldd	r24, Y+5	; 0x05
    3e18:	9e 81       	ldd	r25, Y+6	; 0x06
    3e1a:	af 81       	ldd	r26, Y+7	; 0x07
    3e1c:	b8 85       	ldd	r27, Y+8	; 0x08
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	a1 05       	cpc	r26, r1
    3e22:	b1 05       	cpc	r27, r1
    3e24:	a1 f0       	breq	.+40     	; 0x3e4e <IntToString+0x152>
		str[i--] = '-';
    3e26:	29 81       	ldd	r18, Y+1	; 0x01
    3e28:	3a 81       	ldd	r19, Y+2	; 0x02
    3e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2e:	fc 01       	movw	r30, r24
    3e30:	e2 0f       	add	r30, r18
    3e32:	f3 1f       	adc	r31, r19
    3e34:	8d e2       	ldi	r24, 0x2D	; 45
    3e36:	80 83       	st	Z, r24
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
    3e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e3e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	a1 09       	sbc	r26, r1
    3e44:	b1 09       	sbc	r27, r1
    3e46:	89 83       	std	Y+1, r24	; 0x01
    3e48:	9a 83       	std	Y+2, r25	; 0x02
    3e4a:	ab 83       	std	Y+3, r26	; 0x03
    3e4c:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    3e4e:	89 81       	ldd	r24, Y+1	; 0x01
    3e50:	9a 81       	ldd	r25, Y+2	; 0x02
    3e52:	ab 81       	ldd	r26, Y+3	; 0x03
    3e54:	bc 81       	ldd	r27, Y+4	; 0x04
    3e56:	01 96       	adiw	r24, 0x01	; 1
    3e58:	a1 1d       	adc	r26, r1
    3e5a:	b1 1d       	adc	r27, r1
    3e5c:	89 83       	std	Y+1, r24	; 0x01
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	ab 83       	std	Y+3, r26	; 0x03
    3e62:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    3e64:	29 81       	ldd	r18, Y+1	; 0x01
    3e66:	3a 81       	ldd	r19, Y+2	; 0x02
    3e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e6c:	82 0f       	add	r24, r18
    3e6e:	93 1f       	adc	r25, r19

}
    3e70:	2e 96       	adiw	r28, 0x0e	; 14
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	1f 91       	pop	r17
    3e82:	0f 91       	pop	r16
    3e84:	08 95       	ret

00003e86 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	6a 97       	sbiw	r28, 0x1a	; 26
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	6f 8b       	std	Y+23, r22	; 0x17
    3e9c:	78 8f       	std	Y+24, r23	; 0x18
    3e9e:	89 8f       	std	Y+25, r24	; 0x19
    3ea0:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    3ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ea6:	a9 8d       	ldd	r26, Y+25	; 0x19
    3ea8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	a1 05       	cpc	r26, r1
    3eae:	b1 05       	cpc	r27, r1
    3eb0:	99 f0       	breq	.+38     	; 0x3ed8 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    3eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb6:	a9 8d       	ldd	r26, Y+25	; 0x19
    3eb8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3eba:	9e 01       	movw	r18, r28
    3ebc:	2d 5f       	subi	r18, 0xFD	; 253
    3ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	a9 01       	movw	r20, r18
    3ec6:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <IntToString>
    3eca:	9a 83       	std	Y+2, r25	; 0x02
    3ecc:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	0e 94 55 1e 	call	0x3caa	; 0x3caa <LCD_voidWriteString>
    3ed6:	03 c0       	rjmp	.+6      	; 0x3ede <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    3ed8:	80 e3       	ldi	r24, 0x30	; 48
    3eda:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
	}
}
    3ede:	6a 96       	adiw	r28, 0x1a	; 26
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	cd bf       	out	0x3d, r28	; 61
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	a6 97       	sbiw	r28, 0x26	; 38
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	6b a3       	std	Y+35, r22	; 0x23
    3f06:	7c a3       	std	Y+36, r23	; 0x24
    3f08:	8d a3       	std	Y+37, r24	; 0x25
    3f0a:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    3f0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3f0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3f10:	8d a1       	ldd	r24, Y+37	; 0x25
    3f12:	9e a1       	ldd	r25, Y+38	; 0x26
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	48 ec       	ldi	r20, 0xC8	; 200
    3f1a:	52 e4       	ldi	r21, 0x42	; 66
    3f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	bc 01       	movw	r22, r24
    3f26:	cd 01       	movw	r24, r26
    3f28:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	8b 87       	std	Y+11, r24	; 0x0b
    3f32:	9c 87       	std	Y+12, r25	; 0x0c
    3f34:	ad 87       	std	Y+13, r26	; 0x0d
    3f36:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    3f38:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f3c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3f3e:	be 85       	ldd	r27, Y+14	; 0x0e
    3f40:	9e 01       	movw	r18, r28
    3f42:	21 5f       	subi	r18, 0xF1	; 241
    3f44:	3f 4f       	sbci	r19, 0xFF	; 255
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	a9 01       	movw	r20, r18
    3f4c:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <IntToString>
    3f50:	9a 87       	std	Y+10, r25	; 0x0a
    3f52:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    3f54:	1d 82       	std	Y+5, r1	; 0x05
    3f56:	1e 82       	std	Y+6, r1	; 0x06
    3f58:	1f 82       	std	Y+7, r1	; 0x07
    3f5a:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    3f5c:	19 82       	std	Y+1, r1	; 0x01
    3f5e:	1a 82       	std	Y+2, r1	; 0x02
    3f60:	1b 82       	std	Y+3, r1	; 0x03
    3f62:	1c 82       	std	Y+4, r1	; 0x04
    3f64:	0b c0       	rjmp	.+22     	; 0x3f7c <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    3f66:	8d 81       	ldd	r24, Y+5	; 0x05
    3f68:	9e 81       	ldd	r25, Y+6	; 0x06
    3f6a:	af 81       	ldd	r26, Y+7	; 0x07
    3f6c:	b8 85       	ldd	r27, Y+8	; 0x08
    3f6e:	01 96       	adiw	r24, 0x01	; 1
    3f70:	a1 1d       	adc	r26, r1
    3f72:	b1 1d       	adc	r27, r1
    3f74:	8d 83       	std	Y+5, r24	; 0x05
    3f76:	9e 83       	std	Y+6, r25	; 0x06
    3f78:	af 83       	std	Y+7, r26	; 0x07
    3f7a:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    3f7c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f7e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f80:	89 85       	ldd	r24, Y+9	; 0x09
    3f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f84:	fc 01       	movw	r30, r24
    3f86:	e2 0f       	add	r30, r18
    3f88:	f3 1f       	adc	r31, r19
    3f8a:	80 81       	ld	r24, Z
    3f8c:	88 23       	and	r24, r24
    3f8e:	59 f7       	brne	.-42     	; 0x3f66 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    3f90:	8d 81       	ldd	r24, Y+5	; 0x05
    3f92:	9e 81       	ldd	r25, Y+6	; 0x06
    3f94:	af 81       	ldd	r26, Y+7	; 0x07
    3f96:	b8 85       	ldd	r27, Y+8	; 0x08
    3f98:	02 97       	sbiw	r24, 0x02	; 2
    3f9a:	a1 09       	sbc	r26, r1
    3f9c:	b1 09       	sbc	r27, r1
    3f9e:	8d 83       	std	Y+5, r24	; 0x05
    3fa0:	9e 83       	std	Y+6, r25	; 0x06
    3fa2:	af 83       	std	Y+7, r26	; 0x07
    3fa4:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    3fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3faa:	af 81       	ldd	r26, Y+7	; 0x07
    3fac:	b8 85       	ldd	r27, Y+8	; 0x08
    3fae:	00 97       	sbiw	r24, 0x00	; 0
    3fb0:	a1 05       	cpc	r26, r1
    3fb2:	b1 05       	cpc	r27, r1
    3fb4:	49 f5       	brne	.+82     	; 0x4008 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    3fb6:	80 e3       	ldi	r24, 0x30	; 48
    3fb8:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
    3fbc:	25 c0       	rjmp	.+74     	; 0x4008 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3fbe:	29 81       	ldd	r18, Y+1	; 0x01
    3fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fc2:	4b 81       	ldd	r20, Y+3	; 0x03
    3fc4:	5c 81       	ldd	r21, Y+4	; 0x04
    3fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fca:	af 81       	ldd	r26, Y+7	; 0x07
    3fcc:	b8 85       	ldd	r27, Y+8	; 0x08
    3fce:	28 17       	cp	r18, r24
    3fd0:	39 07       	cpc	r19, r25
    3fd2:	4a 07       	cpc	r20, r26
    3fd4:	5b 07       	cpc	r21, r27
    3fd6:	19 f4       	brne	.+6      	; 0x3fde <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    3fd8:	8e e2       	ldi	r24, 0x2E	; 46
    3fda:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    3fde:	29 81       	ldd	r18, Y+1	; 0x01
    3fe0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fe2:	89 85       	ldd	r24, Y+9	; 0x09
    3fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	e2 0f       	add	r30, r18
    3fea:	f3 1f       	adc	r31, r19
    3fec:	80 81       	ld	r24, Z
    3fee:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
		counter2++;
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    3ffa:	01 96       	adiw	r24, 0x01	; 1
    3ffc:	a1 1d       	adc	r26, r1
    3ffe:	b1 1d       	adc	r27, r1
    4000:	89 83       	std	Y+1, r24	; 0x01
    4002:	9a 83       	std	Y+2, r25	; 0x02
    4004:	ab 83       	std	Y+3, r26	; 0x03
    4006:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    4008:	29 81       	ldd	r18, Y+1	; 0x01
    400a:	3a 81       	ldd	r19, Y+2	; 0x02
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	fc 01       	movw	r30, r24
    4012:	e2 0f       	add	r30, r18
    4014:	f3 1f       	adc	r31, r19
    4016:	80 81       	ld	r24, Z
    4018:	88 23       	and	r24, r24
    401a:	89 f6       	brne	.-94     	; 0x3fbe <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    401c:	a6 96       	adiw	r28, 0x26	; 38
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
    4028:	cf 91       	pop	r28
    402a:	df 91       	pop	r29
    402c:	08 95       	ret

0000402e <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	00 d0       	rcall	.+0      	; 0x4034 <LCD_voidGoToPosition+0x6>
    4034:	0f 92       	push	r0
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	8a 83       	std	Y+2, r24	; 0x02
    403c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    403e:	80 e8       	ldi	r24, 0x80	; 128
    4040:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	88 23       	and	r24, r24
    4046:	21 f4       	brne	.+8      	; 0x4050 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    4048:	8b 81       	ldd	r24, Y+3	; 0x03
    404a:	80 58       	subi	r24, 0x80	; 128
    404c:	89 83       	std	Y+1, r24	; 0x01
    404e:	14 c0       	rjmp	.+40     	; 0x4078 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    4050:	8a 81       	ldd	r24, Y+2	; 0x02
    4052:	81 30       	cpi	r24, 0x01	; 1
    4054:	21 f4       	brne	.+8      	; 0x405e <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	80 54       	subi	r24, 0x40	; 64
    405a:	89 83       	std	Y+1, r24	; 0x01
    405c:	0d c0       	rjmp	.+26     	; 0x4078 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    405e:	8a 81       	ldd	r24, Y+2	; 0x02
    4060:	82 30       	cpi	r24, 0x02	; 2
    4062:	21 f4       	brne	.+8      	; 0x406c <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	8c 56       	subi	r24, 0x6C	; 108
    4068:	89 83       	std	Y+1, r24	; 0x01
    406a:	06 c0       	rjmp	.+12     	; 0x4078 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    406c:	8a 81       	ldd	r24, Y+2	; 0x02
    406e:	83 30       	cpi	r24, 0x03	; 3
    4070:	19 f4       	brne	.+6      	; 0x4078 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    4072:	8b 81       	ldd	r24, Y+3	; 0x03
    4074:	8c 52       	subi	r24, 0x2C	; 44
    4076:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	80 68       	ori	r24, 0x80	; 128
    407c:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
}
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	cf 91       	pop	r28
    408c:	df 91       	pop	r29
    408e:	08 95       	ret

00004090 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    4090:	df 93       	push	r29
    4092:	cf 93       	push	r28
    4094:	cd b7       	in	r28, 0x3d	; 61
    4096:	de b7       	in	r29, 0x3e	; 62
    4098:	27 97       	sbiw	r28, 0x07	; 7
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	9c 83       	std	Y+4, r25	; 0x04
    40a6:	8b 83       	std	Y+3, r24	; 0x03
    40a8:	6d 83       	std	Y+5, r22	; 0x05
    40aa:	4e 83       	std	Y+6, r20	; 0x06
    40ac:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    40ae:	8e 81       	ldd	r24, Y+6	; 0x06
    40b0:	6f 81       	ldd	r22, Y+7	; 0x07
    40b2:	0e 94 17 20 	call	0x402e	; 0x402e <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    40b6:	8d 81       	ldd	r24, Y+5	; 0x05
    40b8:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
	u8 address = 0;
    40bc:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    40be:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	88 30       	cpi	r24, 0x08	; 8
    40c4:	30 f5       	brcc	.+76     	; 0x4112 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    40c6:	8d 81       	ldd	r24, Y+5	; 0x05
    40c8:	88 2f       	mov	r24, r24
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	88 0f       	add	r24, r24
    40ce:	99 1f       	adc	r25, r25
    40d0:	88 0f       	add	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	88 0f       	add	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    40da:	8a 81       	ldd	r24, Y+2	; 0x02
    40dc:	80 64       	ori	r24, 0x40	; 64
    40de:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
    40e2:	8f 77       	andi	r24, 0x7F	; 127
    40e4:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    40e6:	8a 81       	ldd	r24, Y+2	; 0x02
    40e8:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    40ec:	19 82       	std	Y+1, r1	; 0x01
    40ee:	0e c0       	rjmp	.+28     	; 0x410c <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
    40f2:	28 2f       	mov	r18, r24
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	8b 81       	ldd	r24, Y+3	; 0x03
    40f8:	9c 81       	ldd	r25, Y+4	; 0x04
    40fa:	fc 01       	movw	r30, r24
    40fc:	e2 0f       	add	r30, r18
    40fe:	f3 1f       	adc	r31, r19
    4100:	80 81       	ld	r24, Z
    4102:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	89 83       	std	Y+1, r24	; 0x01
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	88 30       	cpi	r24, 0x08	; 8
    4110:	78 f3       	brcs	.-34     	; 0x40f0 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    4112:	82 e0       	ldi	r24, 0x02	; 2
    4114:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
}
    4118:	27 96       	adiw	r28, 0x07	; 7
    411a:	0f b6       	in	r0, 0x3f	; 63
    411c:	f8 94       	cli
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	cd bf       	out	0x3d, r28	; 61
    4124:	cf 91       	pop	r28
    4126:	df 91       	pop	r29
    4128:	08 95       	ret

0000412a <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	cd b7       	in	r28, 0x3d	; 61
    4130:	de b7       	in	r29, 0x3e	; 62
    4132:	a1 97       	sbiw	r28, 0x21	; 33
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    413e:	8f ef       	ldi	r24, 0xFF	; 255
    4140:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    4142:	ce 01       	movw	r24, r28
    4144:	04 96       	adiw	r24, 0x04	; 4
    4146:	9e 8f       	std	Y+30, r25	; 0x1e
    4148:	8d 8f       	std	Y+29, r24	; 0x1d
    414a:	e5 ef       	ldi	r30, 0xF5	; 245
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	f8 a3       	std	Y+32, r31	; 0x20
    4150:	ef 8f       	std	Y+31, r30	; 0x1f
    4152:	f0 e1       	ldi	r31, 0x10	; 16
    4154:	f9 a3       	std	Y+33, r31	; 0x21
    4156:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4158:	f8 a1       	ldd	r31, Y+32	; 0x20
    415a:	00 80       	ld	r0, Z
    415c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    415e:	98 a1       	ldd	r25, Y+32	; 0x20
    4160:	01 96       	adiw	r24, 0x01	; 1
    4162:	98 a3       	std	Y+32, r25	; 0x20
    4164:	8f 8f       	std	Y+31, r24	; 0x1f
    4166:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4168:	fe 8d       	ldd	r31, Y+30	; 0x1e
    416a:	00 82       	st	Z, r0
    416c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    416e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4170:	01 96       	adiw	r24, 0x01	; 1
    4172:	9e 8f       	std	Y+30, r25	; 0x1e
    4174:	8d 8f       	std	Y+29, r24	; 0x1d
    4176:	99 a1       	ldd	r25, Y+33	; 0x21
    4178:	91 50       	subi	r25, 0x01	; 1
    417a:	99 a3       	std	Y+33, r25	; 0x21
    417c:	e9 a1       	ldd	r30, Y+33	; 0x21
    417e:	ee 23       	and	r30, r30
    4180:	51 f7       	brne	.-44     	; 0x4156 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    4182:	87 e0       	ldi	r24, 0x07	; 7
    4184:	8c 8b       	std	Y+20, r24	; 0x14
    4186:	86 e0       	ldi	r24, 0x06	; 6
    4188:	8d 8b       	std	Y+21, r24	; 0x15
    418a:	85 e0       	ldi	r24, 0x05	; 5
    418c:	8e 8b       	std	Y+22, r24	; 0x16
    418e:	83 e0       	ldi	r24, 0x03	; 3
    4190:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    4192:	85 e0       	ldi	r24, 0x05	; 5
    4194:	88 8f       	std	Y+24, r24	; 0x18
    4196:	84 e0       	ldi	r24, 0x04	; 4
    4198:	89 8f       	std	Y+25, r24	; 0x19
    419a:	83 e0       	ldi	r24, 0x03	; 3
    419c:	8a 8f       	std	Y+26, r24	; 0x1a
    419e:	82 e0       	ldi	r24, 0x02	; 2
    41a0:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    41a2:	1a 82       	std	Y+2, r1	; 0x02
    41a4:	6b c0       	rjmp	.+214    	; 0x427c <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    41a6:	8a 81       	ldd	r24, Y+2	; 0x02
    41a8:	28 2f       	mov	r18, r24
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	ce 01       	movw	r24, r28
    41ae:	44 96       	adiw	r24, 0x14	; 20
    41b0:	fc 01       	movw	r30, r24
    41b2:	e2 0f       	add	r30, r18
    41b4:	f3 1f       	adc	r31, r19
    41b6:	90 81       	ld	r25, Z
    41b8:	84 e0       	ldi	r24, 0x04	; 4
    41ba:	69 2f       	mov	r22, r25
    41bc:	40 e0       	ldi	r20, 0x00	; 0
    41be:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    41c2:	19 82       	std	Y+1, r1	; 0x01
    41c4:	46 c0       	rjmp	.+140    	; 0x4252 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    41c6:	89 81       	ldd	r24, Y+1	; 0x01
    41c8:	28 2f       	mov	r18, r24
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	ce 01       	movw	r24, r28
    41ce:	48 96       	adiw	r24, 0x18	; 24
    41d0:	fc 01       	movw	r30, r24
    41d2:	e2 0f       	add	r30, r18
    41d4:	f3 1f       	adc	r31, r19
    41d6:	90 81       	ld	r25, Z
    41d8:	83 e0       	ldi	r24, 0x03	; 3
    41da:	69 2f       	mov	r22, r25
    41dc:	0e 94 d6 07 	call	0xfac	; 0xfac <DIO_u8GetPinValue>
    41e0:	88 23       	and	r24, r24
    41e2:	a1 f5       	brne	.+104    	; 0x424c <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	8a 81       	ldd	r24, Y+2	; 0x02
    41ec:	48 2f       	mov	r20, r24
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	22 0f       	add	r18, r18
    41f2:	33 1f       	adc	r19, r19
    41f4:	22 0f       	add	r18, r18
    41f6:	33 1f       	adc	r19, r19
    41f8:	ce 01       	movw	r24, r28
    41fa:	01 96       	adiw	r24, 0x01	; 1
    41fc:	82 0f       	add	r24, r18
    41fe:	93 1f       	adc	r25, r19
    4200:	84 0f       	add	r24, r20
    4202:	95 1f       	adc	r25, r21
    4204:	fc 01       	movw	r30, r24
    4206:	33 96       	adiw	r30, 0x03	; 3
    4208:	80 81       	ld	r24, Z
    420a:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	28 2f       	mov	r18, r24
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	ce 01       	movw	r24, r28
    4214:	48 96       	adiw	r24, 0x18	; 24
    4216:	fc 01       	movw	r30, r24
    4218:	e2 0f       	add	r30, r18
    421a:	f3 1f       	adc	r31, r19
    421c:	90 81       	ld	r25, Z
    421e:	83 e0       	ldi	r24, 0x03	; 3
    4220:	69 2f       	mov	r22, r25
    4222:	0e 94 d6 07 	call	0xfac	; 0xfac <DIO_u8GetPinValue>
    4226:	88 23       	and	r24, r24
    4228:	89 f3       	breq	.-30     	; 0x420c <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	28 2f       	mov	r18, r24
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	ce 01       	movw	r24, r28
    4232:	44 96       	adiw	r24, 0x14	; 20
    4234:	fc 01       	movw	r30, r24
    4236:	e2 0f       	add	r30, r18
    4238:	f3 1f       	adc	r31, r19
    423a:	90 81       	ld	r25, Z
    423c:	84 e0       	ldi	r24, 0x04	; 4
    423e:	69 2f       	mov	r22, r25
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    4246:	fb 81       	ldd	r31, Y+3	; 0x03
    4248:	fc 8f       	std	Y+28, r31	; 0x1c
    424a:	1e c0       	rjmp	.+60     	; 0x4288 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	8f 5f       	subi	r24, 0xFF	; 255
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	84 30       	cpi	r24, 0x04	; 4
    4256:	08 f4       	brcc	.+2      	; 0x425a <KPD_u8GetPressedKey+0x130>
    4258:	b6 cf       	rjmp	.-148    	; 0x41c6 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    425a:	8a 81       	ldd	r24, Y+2	; 0x02
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	ce 01       	movw	r24, r28
    4262:	44 96       	adiw	r24, 0x14	; 20
    4264:	fc 01       	movw	r30, r24
    4266:	e2 0f       	add	r30, r18
    4268:	f3 1f       	adc	r31, r19
    426a:	90 81       	ld	r25, Z
    426c:	84 e0       	ldi	r24, 0x04	; 4
    426e:	69 2f       	mov	r22, r25
    4270:	41 e0       	ldi	r20, 0x01	; 1
    4272:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	8f 5f       	subi	r24, 0xFF	; 255
    427a:	8a 83       	std	Y+2, r24	; 0x02
    427c:	8a 81       	ldd	r24, Y+2	; 0x02
    427e:	84 30       	cpi	r24, 0x04	; 4
    4280:	08 f4       	brcc	.+2      	; 0x4284 <KPD_u8GetPressedKey+0x15a>
    4282:	91 cf       	rjmp	.-222    	; 0x41a6 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    4284:	8b 81       	ldd	r24, Y+3	; 0x03
    4286:	8c 8f       	std	Y+28, r24	; 0x1c
    4288:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    428a:	a1 96       	adiw	r28, 0x21	; 33
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	f8 94       	cli
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	0f be       	out	0x3f, r0	; 63
    4294:	cd bf       	out	0x3d, r28	; 61
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	08 95       	ret

0000429c <main>:
		}
};

u8 posArr[4][20] ={{0}};

int main(){
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	df 93       	push	r29
    42a2:	cf 93       	push	r28
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	c6 54       	subi	r28, 0x46	; 70
    42aa:	d0 40       	sbci	r29, 0x00	; 0
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    42b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
    42ba:	83 e0       	ldi	r24, 0x03	; 3
    42bc:	6f ef       	ldi	r22, 0xFF	; 255
    42be:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_voidSetPortValue>
	LCD_voidInit();
    42c2:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LCD_voidInit>
	InitializeSnake();
    42c6:	0e 94 77 24 	call	0x48ee	; 0x48ee <InitializeSnake>
	SpawnSnake();
    42ca:	0e 94 dd 24 	call	0x49ba	; 0x49ba <SpawnSnake>
    42ce:	fe 01       	movw	r30, r28
    42d0:	ed 5b       	subi	r30, 0xBD	; 189
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	a8 ec       	ldi	r26, 0xC8	; 200
    42da:	b2 e4       	ldi	r27, 0x42	; 66
    42dc:	80 83       	st	Z, r24
    42de:	91 83       	std	Z+1, r25	; 0x01
    42e0:	a2 83       	std	Z+2, r26	; 0x02
    42e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e4:	8e 01       	movw	r16, r28
    42e6:	01 5c       	subi	r16, 0xC1	; 193
    42e8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ea:	fe 01       	movw	r30, r28
    42ec:	ed 5b       	subi	r30, 0xBD	; 189
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	60 81       	ld	r22, Z
    42f2:	71 81       	ldd	r23, Z+1	; 0x01
    42f4:	82 81       	ldd	r24, Z+2	; 0x02
    42f6:	93 81       	ldd	r25, Z+3	; 0x03
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	4a e7       	ldi	r20, 0x7A	; 122
    42fe:	55 e4       	ldi	r21, 0x45	; 69
    4300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	f8 01       	movw	r30, r16
    430a:	80 83       	st	Z, r24
    430c:	91 83       	std	Z+1, r25	; 0x01
    430e:	a2 83       	std	Z+2, r26	; 0x02
    4310:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4312:	fe 01       	movw	r30, r28
    4314:	ff 96       	adiw	r30, 0x3f	; 63
    4316:	60 81       	ld	r22, Z
    4318:	71 81       	ldd	r23, Z+1	; 0x01
    431a:	82 81       	ldd	r24, Z+2	; 0x02
    431c:	93 81       	ldd	r25, Z+3	; 0x03
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e8       	ldi	r20, 0x80	; 128
    4324:	5f e3       	ldi	r21, 0x3F	; 63
    4326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    432a:	88 23       	and	r24, r24
    432c:	2c f4       	brge	.+10     	; 0x4338 <main+0x9c>
		__ticks = 1;
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	9e af       	std	Y+62, r25	; 0x3e
    4334:	8d af       	std	Y+61, r24	; 0x3d
    4336:	46 c0       	rjmp	.+140    	; 0x43c4 <main+0x128>
	else if (__tmp > 65535)
    4338:	fe 01       	movw	r30, r28
    433a:	ff 96       	adiw	r30, 0x3f	; 63
    433c:	60 81       	ld	r22, Z
    433e:	71 81       	ldd	r23, Z+1	; 0x01
    4340:	82 81       	ldd	r24, Z+2	; 0x02
    4342:	93 81       	ldd	r25, Z+3	; 0x03
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	3f ef       	ldi	r19, 0xFF	; 255
    4348:	4f e7       	ldi	r20, 0x7F	; 127
    434a:	57 e4       	ldi	r21, 0x47	; 71
    434c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4350:	18 16       	cp	r1, r24
    4352:	64 f5       	brge	.+88     	; 0x43ac <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4354:	fe 01       	movw	r30, r28
    4356:	ed 5b       	subi	r30, 0xBD	; 189
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e2       	ldi	r20, 0x20	; 32
    4368:	51 e4       	ldi	r21, 0x41	; 65
    436a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	bc 01       	movw	r22, r24
    4374:	cd 01       	movw	r24, r26
    4376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	9e af       	std	Y+62, r25	; 0x3e
    4380:	8d af       	std	Y+61, r24	; 0x3d
    4382:	0f c0       	rjmp	.+30     	; 0x43a2 <main+0x106>
    4384:	80 e9       	ldi	r24, 0x90	; 144
    4386:	91 e0       	ldi	r25, 0x01	; 1
    4388:	9c af       	std	Y+60, r25	; 0x3c
    438a:	8b af       	std	Y+59, r24	; 0x3b
    438c:	8b ad       	ldd	r24, Y+59	; 0x3b
    438e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	f1 f7       	brne	.-4      	; 0x4390 <main+0xf4>
    4394:	9c af       	std	Y+60, r25	; 0x3c
    4396:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4398:	8d ad       	ldd	r24, Y+61	; 0x3d
    439a:	9e ad       	ldd	r25, Y+62	; 0x3e
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	9e af       	std	Y+62, r25	; 0x3e
    43a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    43a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	69 f7       	brne	.-38     	; 0x4384 <main+0xe8>
    43aa:	16 c0       	rjmp	.+44     	; 0x43d8 <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ac:	fe 01       	movw	r30, r28
    43ae:	ff 96       	adiw	r30, 0x3f	; 63
    43b0:	60 81       	ld	r22, Z
    43b2:	71 81       	ldd	r23, Z+1	; 0x01
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	9e af       	std	Y+62, r25	; 0x3e
    43c2:	8d af       	std	Y+61, r24	; 0x3d
    43c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    43c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    43c8:	9a af       	std	Y+58, r25	; 0x3a
    43ca:	89 af       	std	Y+57, r24	; 0x39
    43cc:	89 ad       	ldd	r24, Y+57	; 0x39
    43ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	f1 f7       	brne	.-4      	; 0x43d0 <main+0x134>
    43d4:	9a af       	std	Y+58, r25	; 0x3a
    43d6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	while(1){
		if(foodAvailable == 0){
    43d8:	80 91 0a 01 	lds	r24, 0x010A
    43dc:	88 23       	and	r24, r24
    43de:	51 f4       	brne	.+20     	; 0x43f4 <main+0x158>
			foodAvailable = 1;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	80 93 0a 01 	sts	0x010A, r24
			SpawnFood();
    43e6:	0e 94 7f 29 	call	0x52fe	; 0x52fe <SpawnFood>
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    43ea:	83 e0       	ldi	r24, 0x03	; 3
    43ec:	66 e0       	ldi	r22, 0x06	; 6
    43ee:	41 e0       	ldi	r20, 0x01	; 1
    43f0:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
		}
		key = KPD_u8GetPressedKey();
    43f4:	0e 94 95 20 	call	0x412a	; 0x412a <KPD_u8GetPressedKey>
    43f8:	80 93 82 00 	sts	0x0082, r24
		if(key != NO_PRESSED_KEY){
    43fc:	80 91 82 00 	lds	r24, 0x0082
    4400:	8f 3f       	cpi	r24, 0xFF	; 255
    4402:	09 f4       	brne	.+2      	; 0x4406 <main+0x16a>
    4404:	bc c0       	rjmp	.+376    	; 0x457e <main+0x2e2>
			if(endGame == 0){
    4406:	80 91 07 01 	lds	r24, 0x0107
    440a:	88 23       	and	r24, r24
    440c:	71 f5       	brne	.+92     	; 0x446a <main+0x1ce>
				if(key == 8 && snakeArr[0].currentDirection != Down){
    440e:	80 91 82 00 	lds	r24, 0x0082
    4412:	88 30       	cpi	r24, 0x08	; 8
    4414:	41 f4       	brne	.+16     	; 0x4426 <main+0x18a>
    4416:	80 91 5b 01 	lds	r24, 0x015B
    441a:	83 30       	cpi	r24, 0x03	; 3
    441c:	21 f0       	breq	.+8      	; 0x4426 <main+0x18a>
					snakeArr[0].nextDirection = Up;
    441e:	82 e0       	ldi	r24, 0x02	; 2
    4420:	80 93 5c 01 	sts	0x015C, r24
    4424:	22 c0       	rjmp	.+68     	; 0x446a <main+0x1ce>
				}
				else if(key == 4 && snakeArr[0].currentDirection != Right){
    4426:	80 91 82 00 	lds	r24, 0x0082
    442a:	84 30       	cpi	r24, 0x04	; 4
    442c:	41 f4       	brne	.+16     	; 0x443e <main+0x1a2>
    442e:	80 91 5b 01 	lds	r24, 0x015B
    4432:	88 23       	and	r24, r24
    4434:	21 f0       	breq	.+8      	; 0x443e <main+0x1a2>
					snakeArr[0].nextDirection = Left;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	80 93 5c 01 	sts	0x015C, r24
    443c:	16 c0       	rjmp	.+44     	; 0x446a <main+0x1ce>
				}
				else if(key == 6 && snakeArr[0].currentDirection != Left){
    443e:	80 91 82 00 	lds	r24, 0x0082
    4442:	86 30       	cpi	r24, 0x06	; 6
    4444:	39 f4       	brne	.+14     	; 0x4454 <main+0x1b8>
    4446:	80 91 5b 01 	lds	r24, 0x015B
    444a:	81 30       	cpi	r24, 0x01	; 1
    444c:	19 f0       	breq	.+6      	; 0x4454 <main+0x1b8>
					snakeArr[0].nextDirection = Right;
    444e:	10 92 5c 01 	sts	0x015C, r1
    4452:	0b c0       	rjmp	.+22     	; 0x446a <main+0x1ce>
				}
				else if(key == 2 && snakeArr[0].currentDirection != Up){
    4454:	80 91 82 00 	lds	r24, 0x0082
    4458:	82 30       	cpi	r24, 0x02	; 2
    445a:	39 f4       	brne	.+14     	; 0x446a <main+0x1ce>
    445c:	80 91 5b 01 	lds	r24, 0x015B
    4460:	82 30       	cpi	r24, 0x02	; 2
    4462:	19 f0       	breq	.+6      	; 0x446a <main+0x1ce>
					snakeArr[0].nextDirection = Down;
    4464:	83 e0       	ldi	r24, 0x03	; 3
    4466:	80 93 5c 01 	sts	0x015C, r24
				}
			}
			if(key == 'C'){
    446a:	80 91 82 00 	lds	r24, 0x0082
    446e:	83 34       	cpi	r24, 0x43	; 67
    4470:	09 f0       	breq	.+2      	; 0x4474 <main+0x1d8>
    4472:	85 c0       	rjmp	.+266    	; 0x457e <main+0x2e2>
				LCD_voidSendCommand(LCD_ClearDisplay);
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
				endGame = 0;
    447a:	10 92 07 01 	sts	0x0107, r1
				currentSize = STARTING_SIZE;
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	80 93 81 00 	sts	0x0081, r24
				ResetPositionArr();
    4484:	0e 94 4b 29 	call	0x5296	; 0x5296 <ResetPositionArr>
				InitializeSnake();
    4488:	0e 94 77 24 	call	0x48ee	; 0x48ee <InitializeSnake>
				SpawnSnake();
    448c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <SpawnSnake>
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	a6 e9       	ldi	r26, 0x96	; 150
    4496:	b3 e4       	ldi	r27, 0x43	; 67
    4498:	8d ab       	std	Y+53, r24	; 0x35
    449a:	9e ab       	std	Y+54, r25	; 0x36
    449c:	af ab       	std	Y+55, r26	; 0x37
    449e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a0:	6d a9       	ldd	r22, Y+53	; 0x35
    44a2:	7e a9       	ldd	r23, Y+54	; 0x36
    44a4:	8f a9       	ldd	r24, Y+55	; 0x37
    44a6:	98 ad       	ldd	r25, Y+56	; 0x38
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	4a e7       	ldi	r20, 0x7A	; 122
    44ae:	55 e4       	ldi	r21, 0x45	; 69
    44b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	89 ab       	std	Y+49, r24	; 0x31
    44ba:	9a ab       	std	Y+50, r25	; 0x32
    44bc:	ab ab       	std	Y+51, r26	; 0x33
    44be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44c0:	69 a9       	ldd	r22, Y+49	; 0x31
    44c2:	7a a9       	ldd	r23, Y+50	; 0x32
    44c4:	8b a9       	ldd	r24, Y+51	; 0x33
    44c6:	9c a9       	ldd	r25, Y+52	; 0x34
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e8       	ldi	r20, 0x80	; 128
    44ce:	5f e3       	ldi	r21, 0x3F	; 63
    44d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44d4:	88 23       	and	r24, r24
    44d6:	2c f4       	brge	.+10     	; 0x44e2 <main+0x246>
		__ticks = 1;
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	98 ab       	std	Y+48, r25	; 0x30
    44de:	8f a7       	std	Y+47, r24	; 0x2f
    44e0:	3f c0       	rjmp	.+126    	; 0x4560 <main+0x2c4>
	else if (__tmp > 65535)
    44e2:	69 a9       	ldd	r22, Y+49	; 0x31
    44e4:	7a a9       	ldd	r23, Y+50	; 0x32
    44e6:	8b a9       	ldd	r24, Y+51	; 0x33
    44e8:	9c a9       	ldd	r25, Y+52	; 0x34
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	3f ef       	ldi	r19, 0xFF	; 255
    44ee:	4f e7       	ldi	r20, 0x7F	; 127
    44f0:	57 e4       	ldi	r21, 0x47	; 71
    44f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44f6:	18 16       	cp	r1, r24
    44f8:	4c f5       	brge	.+82     	; 0x454c <main+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44fa:	6d a9       	ldd	r22, Y+53	; 0x35
    44fc:	7e a9       	ldd	r23, Y+54	; 0x36
    44fe:	8f a9       	ldd	r24, Y+55	; 0x37
    4500:	98 ad       	ldd	r25, Y+56	; 0x38
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e2       	ldi	r20, 0x20	; 32
    4508:	51 e4       	ldi	r21, 0x41	; 65
    450a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	bc 01       	movw	r22, r24
    4514:	cd 01       	movw	r24, r26
    4516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	98 ab       	std	Y+48, r25	; 0x30
    4520:	8f a7       	std	Y+47, r24	; 0x2f
    4522:	0f c0       	rjmp	.+30     	; 0x4542 <main+0x2a6>
    4524:	80 e9       	ldi	r24, 0x90	; 144
    4526:	91 e0       	ldi	r25, 0x01	; 1
    4528:	9e a7       	std	Y+46, r25	; 0x2e
    452a:	8d a7       	std	Y+45, r24	; 0x2d
    452c:	8d a5       	ldd	r24, Y+45	; 0x2d
    452e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	f1 f7       	brne	.-4      	; 0x4530 <main+0x294>
    4534:	9e a7       	std	Y+46, r25	; 0x2e
    4536:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4538:	8f a5       	ldd	r24, Y+47	; 0x2f
    453a:	98 a9       	ldd	r25, Y+48	; 0x30
    453c:	01 97       	sbiw	r24, 0x01	; 1
    453e:	98 ab       	std	Y+48, r25	; 0x30
    4540:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4542:	8f a5       	ldd	r24, Y+47	; 0x2f
    4544:	98 a9       	ldd	r25, Y+48	; 0x30
    4546:	00 97       	sbiw	r24, 0x00	; 0
    4548:	69 f7       	brne	.-38     	; 0x4524 <main+0x288>
    454a:	14 c0       	rjmp	.+40     	; 0x4574 <main+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454c:	69 a9       	ldd	r22, Y+49	; 0x31
    454e:	7a a9       	ldd	r23, Y+50	; 0x32
    4550:	8b a9       	ldd	r24, Y+51	; 0x33
    4552:	9c a9       	ldd	r25, Y+52	; 0x34
    4554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	98 ab       	std	Y+48, r25	; 0x30
    455e:	8f a7       	std	Y+47, r24	; 0x2f
    4560:	8f a5       	ldd	r24, Y+47	; 0x2f
    4562:	98 a9       	ldd	r25, Y+48	; 0x30
    4564:	9c a7       	std	Y+44, r25	; 0x2c
    4566:	8b a7       	std	Y+43, r24	; 0x2b
    4568:	8b a5       	ldd	r24, Y+43	; 0x2b
    456a:	9c a5       	ldd	r25, Y+44	; 0x2c
    456c:	01 97       	sbiw	r24, 0x01	; 1
    456e:	f1 f7       	brne	.-4      	; 0x456c <main+0x2d0>
    4570:	9c a7       	std	Y+44, r25	; 0x2c
    4572:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(300);
				DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    4574:	83 e0       	ldi	r24, 0x03	; 3
    4576:	66 e0       	ldi	r22, 0x06	; 6
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
			}
		}
		LCD_voidSendCommand(LCD_ClearDisplay);
    457e:	81 e0       	ldi	r24, 0x01	; 1
    4580:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
		if(endGame == 0){
    4584:	80 91 07 01 	lds	r24, 0x0107
    4588:	88 23       	and	r24, r24
    458a:	99 f5       	brne	.+102    	; 0x45f2 <main+0x356>
			LCD_voidGoToPosition(foodX,foodY);
    458c:	80 91 08 01 	lds	r24, 0x0108
    4590:	90 91 09 01 	lds	r25, 0x0109
    4594:	69 2f       	mov	r22, r25
    4596:	0e 94 17 20 	call	0x402e	; 0x402e <LCD_voidGoToPosition>
			LCD_voidWriteChar('o');
    459a:	8f e6       	ldi	r24, 0x6F	; 111
    459c:	0e 94 65 1d 	call	0x3aca	; 0x3aca <LCD_voidWriteChar>
			MoveSnake();
    45a0:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <MoveSnake>
			UpdateSize();
    45a4:	0e 94 a6 29 	call	0x534c	; 0x534c <UpdateSize>
			if(posArr[snakeArr[0].posX][snakeArr[0].posY] == 1){
    45a8:	80 91 5d 01 	lds	r24, 0x015D
    45ac:	28 2f       	mov	r18, r24
    45ae:	33 27       	eor	r19, r19
    45b0:	27 fd       	sbrc	r18, 7
    45b2:	30 95       	com	r19
    45b4:	80 91 5e 01 	lds	r24, 0x015E
    45b8:	48 2f       	mov	r20, r24
    45ba:	55 27       	eor	r21, r21
    45bc:	47 fd       	sbrc	r20, 7
    45be:	50 95       	com	r21
    45c0:	c9 01       	movw	r24, r18
    45c2:	88 0f       	add	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	88 0f       	add	r24, r24
    45c8:	99 1f       	adc	r25, r25
    45ca:	9c 01       	movw	r18, r24
    45cc:	22 0f       	add	r18, r18
    45ce:	33 1f       	adc	r19, r19
    45d0:	22 0f       	add	r18, r18
    45d2:	33 1f       	adc	r19, r19
    45d4:	82 0f       	add	r24, r18
    45d6:	93 1f       	adc	r25, r19
    45d8:	84 0f       	add	r24, r20
    45da:	95 1f       	adc	r25, r21
    45dc:	fc 01       	movw	r30, r24
    45de:	e5 5f       	subi	r30, 0xF5	; 245
    45e0:	fe 4f       	sbci	r31, 0xFE	; 254
    45e2:	80 81       	ld	r24, Z
    45e4:	81 30       	cpi	r24, 0x01	; 1
    45e6:	09 f0       	breq	.+2      	; 0x45ea <main+0x34e>
    45e8:	0a c1       	rjmp	.+532    	; 0x47fe <main+0x562>
				endGame = 1;
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	80 93 07 01 	sts	0x0107, r24
    45f0:	f3 ce       	rjmp	.-538    	; 0x43d8 <main+0x13c>
				continue;
			}
		}
		else{
			endGame = 0;
    45f2:	10 92 07 01 	sts	0x0107, r1
			LCD_voidGoToPosition(1,5);
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	65 e0       	ldi	r22, 0x05	; 5
    45fa:	0e 94 17 20 	call	0x402e	; 0x402e <LCD_voidGoToPosition>
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    45fe:	83 e0       	ldi	r24, 0x03	; 3
    4600:	66 e0       	ldi	r22, 0x06	; 6
    4602:	41 e0       	ldi	r20, 0x01	; 1
    4604:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
			LCD_voidWriteString((u8*)"Game Over!");
    4608:	80 e6       	ldi	r24, 0x60	; 96
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 55 1e 	call	0x3caa	; 0x3caa <LCD_voidWriteString>
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	a6 e9       	ldi	r26, 0x96	; 150
    4616:	b3 e4       	ldi	r27, 0x43	; 67
    4618:	8f a3       	std	Y+39, r24	; 0x27
    461a:	98 a7       	std	Y+40, r25	; 0x28
    461c:	a9 a7       	std	Y+41, r26	; 0x29
    461e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4620:	6f a1       	ldd	r22, Y+39	; 0x27
    4622:	78 a5       	ldd	r23, Y+40	; 0x28
    4624:	89 a5       	ldd	r24, Y+41	; 0x29
    4626:	9a a5       	ldd	r25, Y+42	; 0x2a
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	4a e7       	ldi	r20, 0x7A	; 122
    462e:	55 e4       	ldi	r21, 0x45	; 69
    4630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	8b a3       	std	Y+35, r24	; 0x23
    463a:	9c a3       	std	Y+36, r25	; 0x24
    463c:	ad a3       	std	Y+37, r26	; 0x25
    463e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4640:	6b a1       	ldd	r22, Y+35	; 0x23
    4642:	7c a1       	ldd	r23, Y+36	; 0x24
    4644:	8d a1       	ldd	r24, Y+37	; 0x25
    4646:	9e a1       	ldd	r25, Y+38	; 0x26
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	5f e3       	ldi	r21, 0x3F	; 63
    4650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4654:	88 23       	and	r24, r24
    4656:	2c f4       	brge	.+10     	; 0x4662 <main+0x3c6>
		__ticks = 1;
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	9a a3       	std	Y+34, r25	; 0x22
    465e:	89 a3       	std	Y+33, r24	; 0x21
    4660:	3f c0       	rjmp	.+126    	; 0x46e0 <main+0x444>
	else if (__tmp > 65535)
    4662:	6b a1       	ldd	r22, Y+35	; 0x23
    4664:	7c a1       	ldd	r23, Y+36	; 0x24
    4666:	8d a1       	ldd	r24, Y+37	; 0x25
    4668:	9e a1       	ldd	r25, Y+38	; 0x26
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	3f ef       	ldi	r19, 0xFF	; 255
    466e:	4f e7       	ldi	r20, 0x7F	; 127
    4670:	57 e4       	ldi	r21, 0x47	; 71
    4672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4676:	18 16       	cp	r1, r24
    4678:	4c f5       	brge	.+82     	; 0x46cc <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    467a:	6f a1       	ldd	r22, Y+39	; 0x27
    467c:	78 a5       	ldd	r23, Y+40	; 0x28
    467e:	89 a5       	ldd	r24, Y+41	; 0x29
    4680:	9a a5       	ldd	r25, Y+42	; 0x2a
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	40 e2       	ldi	r20, 0x20	; 32
    4688:	51 e4       	ldi	r21, 0x41	; 65
    468a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468e:	dc 01       	movw	r26, r24
    4690:	cb 01       	movw	r24, r22
    4692:	bc 01       	movw	r22, r24
    4694:	cd 01       	movw	r24, r26
    4696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	9a a3       	std	Y+34, r25	; 0x22
    46a0:	89 a3       	std	Y+33, r24	; 0x21
    46a2:	0f c0       	rjmp	.+30     	; 0x46c2 <main+0x426>
    46a4:	80 e9       	ldi	r24, 0x90	; 144
    46a6:	91 e0       	ldi	r25, 0x01	; 1
    46a8:	98 a3       	std	Y+32, r25	; 0x20
    46aa:	8f 8f       	std	Y+31, r24	; 0x1f
    46ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46ae:	98 a1       	ldd	r25, Y+32	; 0x20
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	f1 f7       	brne	.-4      	; 0x46b0 <main+0x414>
    46b4:	98 a3       	std	Y+32, r25	; 0x20
    46b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b8:	89 a1       	ldd	r24, Y+33	; 0x21
    46ba:	9a a1       	ldd	r25, Y+34	; 0x22
    46bc:	01 97       	sbiw	r24, 0x01	; 1
    46be:	9a a3       	std	Y+34, r25	; 0x22
    46c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c2:	89 a1       	ldd	r24, Y+33	; 0x21
    46c4:	9a a1       	ldd	r25, Y+34	; 0x22
    46c6:	00 97       	sbiw	r24, 0x00	; 0
    46c8:	69 f7       	brne	.-38     	; 0x46a4 <main+0x408>
    46ca:	14 c0       	rjmp	.+40     	; 0x46f4 <main+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46cc:	6b a1       	ldd	r22, Y+35	; 0x23
    46ce:	7c a1       	ldd	r23, Y+36	; 0x24
    46d0:	8d a1       	ldd	r24, Y+37	; 0x25
    46d2:	9e a1       	ldd	r25, Y+38	; 0x26
    46d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d8:	dc 01       	movw	r26, r24
    46da:	cb 01       	movw	r24, r22
    46dc:	9a a3       	std	Y+34, r25	; 0x22
    46de:	89 a3       	std	Y+33, r24	; 0x21
    46e0:	89 a1       	ldd	r24, Y+33	; 0x21
    46e2:	9a a1       	ldd	r25, Y+34	; 0x22
    46e4:	9e 8f       	std	Y+30, r25	; 0x1e
    46e6:	8d 8f       	std	Y+29, r24	; 0x1d
    46e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	f1 f7       	brne	.-4      	; 0x46ec <main+0x450>
    46f0:	9e 8f       	std	Y+30, r25	; 0x1e
    46f2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    46f4:	83 e0       	ldi	r24, 0x03	; 3
    46f6:	66 e0       	ldi	r22, 0x06	; 6
    46f8:	40 e0       	ldi	r20, 0x00	; 0
    46fa:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    46fe:	80 e0       	ldi	r24, 0x00	; 0
    4700:	90 ee       	ldi	r25, 0xE0	; 224
    4702:	a2 e9       	ldi	r26, 0x92	; 146
    4704:	b5 e4       	ldi	r27, 0x45	; 69
    4706:	89 8f       	std	Y+25, r24	; 0x19
    4708:	9a 8f       	std	Y+26, r25	; 0x1a
    470a:	ab 8f       	std	Y+27, r26	; 0x1b
    470c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470e:	69 8d       	ldd	r22, Y+25	; 0x19
    4710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	4a e7       	ldi	r20, 0x7A	; 122
    471c:	55 e4       	ldi	r21, 0x45	; 69
    471e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4722:	dc 01       	movw	r26, r24
    4724:	cb 01       	movw	r24, r22
    4726:	8d 8b       	std	Y+21, r24	; 0x15
    4728:	9e 8b       	std	Y+22, r25	; 0x16
    472a:	af 8b       	std	Y+23, r26	; 0x17
    472c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    472e:	6d 89       	ldd	r22, Y+21	; 0x15
    4730:	7e 89       	ldd	r23, Y+22	; 0x16
    4732:	8f 89       	ldd	r24, Y+23	; 0x17
    4734:	98 8d       	ldd	r25, Y+24	; 0x18
    4736:	20 e0       	ldi	r18, 0x00	; 0
    4738:	30 e0       	ldi	r19, 0x00	; 0
    473a:	40 e8       	ldi	r20, 0x80	; 128
    473c:	5f e3       	ldi	r21, 0x3F	; 63
    473e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4742:	88 23       	and	r24, r24
    4744:	2c f4       	brge	.+10     	; 0x4750 <main+0x4b4>
		__ticks = 1;
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	9c 8b       	std	Y+20, r25	; 0x14
    474c:	8b 8b       	std	Y+19, r24	; 0x13
    474e:	3f c0       	rjmp	.+126    	; 0x47ce <main+0x532>
	else if (__tmp > 65535)
    4750:	6d 89       	ldd	r22, Y+21	; 0x15
    4752:	7e 89       	ldd	r23, Y+22	; 0x16
    4754:	8f 89       	ldd	r24, Y+23	; 0x17
    4756:	98 8d       	ldd	r25, Y+24	; 0x18
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	3f ef       	ldi	r19, 0xFF	; 255
    475c:	4f e7       	ldi	r20, 0x7F	; 127
    475e:	57 e4       	ldi	r21, 0x47	; 71
    4760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4764:	18 16       	cp	r1, r24
    4766:	4c f5       	brge	.+82     	; 0x47ba <main+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4768:	69 8d       	ldd	r22, Y+25	; 0x19
    476a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    476c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    476e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	40 e2       	ldi	r20, 0x20	; 32
    4776:	51 e4       	ldi	r21, 0x41	; 65
    4778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	bc 01       	movw	r22, r24
    4782:	cd 01       	movw	r24, r26
    4784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4788:	dc 01       	movw	r26, r24
    478a:	cb 01       	movw	r24, r22
    478c:	9c 8b       	std	Y+20, r25	; 0x14
    478e:	8b 8b       	std	Y+19, r24	; 0x13
    4790:	0f c0       	rjmp	.+30     	; 0x47b0 <main+0x514>
    4792:	80 e9       	ldi	r24, 0x90	; 144
    4794:	91 e0       	ldi	r25, 0x01	; 1
    4796:	9a 8b       	std	Y+18, r25	; 0x12
    4798:	89 8b       	std	Y+17, r24	; 0x11
    479a:	89 89       	ldd	r24, Y+17	; 0x11
    479c:	9a 89       	ldd	r25, Y+18	; 0x12
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	f1 f7       	brne	.-4      	; 0x479e <main+0x502>
    47a2:	9a 8b       	std	Y+18, r25	; 0x12
    47a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a6:	8b 89       	ldd	r24, Y+19	; 0x13
    47a8:	9c 89       	ldd	r25, Y+20	; 0x14
    47aa:	01 97       	sbiw	r24, 0x01	; 1
    47ac:	9c 8b       	std	Y+20, r25	; 0x14
    47ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b0:	8b 89       	ldd	r24, Y+19	; 0x13
    47b2:	9c 89       	ldd	r25, Y+20	; 0x14
    47b4:	00 97       	sbiw	r24, 0x00	; 0
    47b6:	69 f7       	brne	.-38     	; 0x4792 <main+0x4f6>
    47b8:	14 c0       	rjmp	.+40     	; 0x47e2 <main+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ba:	6d 89       	ldd	r22, Y+21	; 0x15
    47bc:	7e 89       	ldd	r23, Y+22	; 0x16
    47be:	8f 89       	ldd	r24, Y+23	; 0x17
    47c0:	98 8d       	ldd	r25, Y+24	; 0x18
    47c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	9c 8b       	std	Y+20, r25	; 0x14
    47cc:	8b 8b       	std	Y+19, r24	; 0x13
    47ce:	8b 89       	ldd	r24, Y+19	; 0x13
    47d0:	9c 89       	ldd	r25, Y+20	; 0x14
    47d2:	98 8b       	std	Y+16, r25	; 0x10
    47d4:	8f 87       	std	Y+15, r24	; 0x0f
    47d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    47d8:	98 89       	ldd	r25, Y+16	; 0x10
    47da:	01 97       	sbiw	r24, 0x01	; 1
    47dc:	f1 f7       	brne	.-4      	; 0x47da <main+0x53e>
    47de:	98 8b       	std	Y+16, r25	; 0x10
    47e0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(4700);
			LCD_voidSendCommand(LCD_ClearDisplay);
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	0e 94 b5 1b 	call	0x376a	; 0x376a <LCD_voidSendCommand>
			currentSize = STARTING_SIZE;
    47e8:	83 e0       	ldi	r24, 0x03	; 3
    47ea:	80 93 81 00 	sts	0x0081, r24
			ResetPositionArr();
    47ee:	0e 94 4b 29 	call	0x5296	; 0x5296 <ResetPositionArr>
			InitializeSnake();
    47f2:	0e 94 77 24 	call	0x48ee	; 0x48ee <InitializeSnake>
			SpawnSnake();
    47f6:	0e 94 dd 24 	call	0x49ba	; 0x49ba <SpawnSnake>
			foodAvailable = 0;
    47fa:	10 92 0a 01 	sts	0x010A, r1
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	a6 e9       	ldi	r26, 0x96	; 150
    4804:	b3 e4       	ldi	r27, 0x43	; 67
    4806:	8b 87       	std	Y+11, r24	; 0x0b
    4808:	9c 87       	std	Y+12, r25	; 0x0c
    480a:	ad 87       	std	Y+13, r26	; 0x0d
    480c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4810:	7c 85       	ldd	r23, Y+12	; 0x0c
    4812:	8d 85       	ldd	r24, Y+13	; 0x0d
    4814:	9e 85       	ldd	r25, Y+14	; 0x0e
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	4a e7       	ldi	r20, 0x7A	; 122
    481c:	55 e4       	ldi	r21, 0x45	; 69
    481e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	8f 83       	std	Y+7, r24	; 0x07
    4828:	98 87       	std	Y+8, r25	; 0x08
    482a:	a9 87       	std	Y+9, r26	; 0x09
    482c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    482e:	6f 81       	ldd	r22, Y+7	; 0x07
    4830:	78 85       	ldd	r23, Y+8	; 0x08
    4832:	89 85       	ldd	r24, Y+9	; 0x09
    4834:	9a 85       	ldd	r25, Y+10	; 0x0a
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e8       	ldi	r20, 0x80	; 128
    483c:	5f e3       	ldi	r21, 0x3F	; 63
    483e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4842:	88 23       	and	r24, r24
    4844:	2c f4       	brge	.+10     	; 0x4850 <main+0x5b4>
		__ticks = 1;
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	9e 83       	std	Y+6, r25	; 0x06
    484c:	8d 83       	std	Y+5, r24	; 0x05
    484e:	3f c0       	rjmp	.+126    	; 0x48ce <main+0x632>
	else if (__tmp > 65535)
    4850:	6f 81       	ldd	r22, Y+7	; 0x07
    4852:	78 85       	ldd	r23, Y+8	; 0x08
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	3f ef       	ldi	r19, 0xFF	; 255
    485c:	4f e7       	ldi	r20, 0x7F	; 127
    485e:	57 e4       	ldi	r21, 0x47	; 71
    4860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4864:	18 16       	cp	r1, r24
    4866:	4c f5       	brge	.+82     	; 0x48ba <main+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4868:	6b 85       	ldd	r22, Y+11	; 0x0b
    486a:	7c 85       	ldd	r23, Y+12	; 0x0c
    486c:	8d 85       	ldd	r24, Y+13	; 0x0d
    486e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	40 e2       	ldi	r20, 0x20	; 32
    4876:	51 e4       	ldi	r21, 0x41	; 65
    4878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	bc 01       	movw	r22, r24
    4882:	cd 01       	movw	r24, r26
    4884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	9e 83       	std	Y+6, r25	; 0x06
    488e:	8d 83       	std	Y+5, r24	; 0x05
    4890:	0f c0       	rjmp	.+30     	; 0x48b0 <main+0x614>
    4892:	80 e9       	ldi	r24, 0x90	; 144
    4894:	91 e0       	ldi	r25, 0x01	; 1
    4896:	9c 83       	std	Y+4, r25	; 0x04
    4898:	8b 83       	std	Y+3, r24	; 0x03
    489a:	8b 81       	ldd	r24, Y+3	; 0x03
    489c:	9c 81       	ldd	r25, Y+4	; 0x04
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	f1 f7       	brne	.-4      	; 0x489e <main+0x602>
    48a2:	9c 83       	std	Y+4, r25	; 0x04
    48a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a6:	8d 81       	ldd	r24, Y+5	; 0x05
    48a8:	9e 81       	ldd	r25, Y+6	; 0x06
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	9e 83       	std	Y+6, r25	; 0x06
    48ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b0:	8d 81       	ldd	r24, Y+5	; 0x05
    48b2:	9e 81       	ldd	r25, Y+6	; 0x06
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	69 f7       	brne	.-38     	; 0x4892 <main+0x5f6>
    48b8:	14 c0       	rjmp	.+40     	; 0x48e2 <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ba:	6f 81       	ldd	r22, Y+7	; 0x07
    48bc:	78 85       	ldd	r23, Y+8	; 0x08
    48be:	89 85       	ldd	r24, Y+9	; 0x09
    48c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	9e 83       	std	Y+6, r25	; 0x06
    48cc:	8d 83       	std	Y+5, r24	; 0x05
    48ce:	8d 81       	ldd	r24, Y+5	; 0x05
    48d0:	9e 81       	ldd	r25, Y+6	; 0x06
    48d2:	9a 83       	std	Y+2, r25	; 0x02
    48d4:	89 83       	std	Y+1, r24	; 0x01
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	9a 81       	ldd	r25, Y+2	; 0x02
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <main+0x63e>
    48de:	9a 83       	std	Y+2, r25	; 0x02
    48e0:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(300);
		DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    48e2:	83 e0       	ldi	r24, 0x03	; 3
    48e4:	66 e0       	ldi	r22, 0x06	; 6
    48e6:	40 e0       	ldi	r20, 0x00	; 0
    48e8:	0e 94 c8 06 	call	0xd90	; 0xd90 <DIO_voidSetPinValue>
    48ec:	75 cd       	rjmp	.-1302   	; 0x43d8 <main+0x13c>

000048ee <InitializeSnake>:
	}
	return 0;
}

void InitializeSnake(){
    48ee:	df 93       	push	r29
    48f0:	cf 93       	push	r28
    48f2:	0f 92       	push	r0
    48f4:	cd b7       	in	r28, 0x3d	; 61
    48f6:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    48f8:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0; index < currentSize; index++){
    48fa:	19 82       	std	Y+1, r1	; 0x01
    48fc:	4d c0       	rjmp	.+154    	; 0x4998 <InitializeSnake+0xaa>
		snakeArr[index].currentDirection = Right;
    48fe:	89 81       	ldd	r24, Y+1	; 0x01
    4900:	28 2f       	mov	r18, r24
    4902:	33 27       	eor	r19, r19
    4904:	27 fd       	sbrc	r18, 7
    4906:	30 95       	com	r19
    4908:	c9 01       	movw	r24, r18
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	82 0f       	add	r24, r18
    4910:	93 1f       	adc	r25, r19
    4912:	88 0f       	add	r24, r24
    4914:	99 1f       	adc	r25, r25
    4916:	fc 01       	movw	r30, r24
    4918:	e5 5a       	subi	r30, 0xA5	; 165
    491a:	fe 4f       	sbci	r31, 0xFE	; 254
    491c:	10 82       	st	Z, r1
		snakeArr[index].nextDirection = Right;
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	28 2f       	mov	r18, r24
    4922:	33 27       	eor	r19, r19
    4924:	27 fd       	sbrc	r18, 7
    4926:	30 95       	com	r19
    4928:	c9 01       	movw	r24, r18
    492a:	88 0f       	add	r24, r24
    492c:	99 1f       	adc	r25, r25
    492e:	82 0f       	add	r24, r18
    4930:	93 1f       	adc	r25, r19
    4932:	88 0f       	add	r24, r24
    4934:	99 1f       	adc	r25, r25
    4936:	fc 01       	movw	r30, r24
    4938:	e4 5a       	subi	r30, 0xA4	; 164
    493a:	fe 4f       	sbci	r31, 0xFE	; 254
    493c:	10 82       	st	Z, r1
		if(index == 0){
    493e:	89 81       	ldd	r24, Y+1	; 0x01
    4940:	88 23       	and	r24, r24
    4942:	a1 f4       	brne	.+40     	; 0x496c <InitializeSnake+0x7e>
			snakeArr[index].shape = Head[Right];
    4944:	89 81       	ldd	r24, Y+1	; 0x01
    4946:	28 2f       	mov	r18, r24
    4948:	33 27       	eor	r19, r19
    494a:	27 fd       	sbrc	r18, 7
    494c:	30 95       	com	r19
    494e:	43 e8       	ldi	r20, 0x83	; 131
    4950:	50 e0       	ldi	r21, 0x00	; 0
    4952:	c9 01       	movw	r24, r18
    4954:	88 0f       	add	r24, r24
    4956:	99 1f       	adc	r25, r25
    4958:	82 0f       	add	r24, r18
    495a:	93 1f       	adc	r25, r19
    495c:	88 0f       	add	r24, r24
    495e:	99 1f       	adc	r25, r25
    4960:	fc 01       	movw	r30, r24
    4962:	e1 5a       	subi	r30, 0xA1	; 161
    4964:	fe 4f       	sbci	r31, 0xFE	; 254
    4966:	51 83       	std	Z+1, r21	; 0x01
    4968:	40 83       	st	Z, r20
    496a:	13 c0       	rjmp	.+38     	; 0x4992 <InitializeSnake+0xa4>
		}
		else{
			snakeArr[index].shape = Body[Right];
    496c:	89 81       	ldd	r24, Y+1	; 0x01
    496e:	28 2f       	mov	r18, r24
    4970:	33 27       	eor	r19, r19
    4972:	27 fd       	sbrc	r18, 7
    4974:	30 95       	com	r19
    4976:	43 ea       	ldi	r20, 0xA3	; 163
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	c9 01       	movw	r24, r18
    497c:	88 0f       	add	r24, r24
    497e:	99 1f       	adc	r25, r25
    4980:	82 0f       	add	r24, r18
    4982:	93 1f       	adc	r25, r19
    4984:	88 0f       	add	r24, r24
    4986:	99 1f       	adc	r25, r25
    4988:	fc 01       	movw	r30, r24
    498a:	e1 5a       	subi	r30, 0xA1	; 161
    498c:	fe 4f       	sbci	r31, 0xFE	; 254
    498e:	51 83       	std	Z+1, r21	; 0x01
    4990:	40 83       	st	Z, r20
	return 0;
}

void InitializeSnake(){
	s8 index = 0;
	for(index = 0; index < currentSize; index++){
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	8f 5f       	subi	r24, 0xFF	; 255
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	28 2f       	mov	r18, r24
    499c:	33 27       	eor	r19, r19
    499e:	27 fd       	sbrc	r18, 7
    49a0:	30 95       	com	r19
    49a2:	80 91 81 00 	lds	r24, 0x0081
    49a6:	88 2f       	mov	r24, r24
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	28 17       	cp	r18, r24
    49ac:	39 07       	cpc	r19, r25
    49ae:	0c f4       	brge	.+2      	; 0x49b2 <InitializeSnake+0xc4>
    49b0:	a6 cf       	rjmp	.-180    	; 0x48fe <InitializeSnake+0x10>
		}
		else{
			snakeArr[index].shape = Body[Right];
		}
	}
}
    49b2:	0f 90       	pop	r0
    49b4:	cf 91       	pop	r28
    49b6:	df 91       	pop	r29
    49b8:	08 95       	ret

000049ba <SpawnSnake>:

void SpawnSnake(){
    49ba:	df 93       	push	r29
    49bc:	cf 93       	push	r28
    49be:	00 d0       	rcall	.+0      	; 0x49c0 <SpawnSnake+0x6>
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    49c4:	1a 82       	std	Y+2, r1	; 0x02
	u8 cgRamIndex = 1;
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	89 83       	std	Y+1, r24	; 0x01
	for(index = 0; index < currentSize; index++){
    49ca:	1a 82       	std	Y+2, r1	; 0x02
    49cc:	79 c0       	rjmp	.+242    	; 0x4ac0 <SpawnSnake+0x106>

		snakeArr[index].posX = 0;
    49ce:	8a 81       	ldd	r24, Y+2	; 0x02
    49d0:	28 2f       	mov	r18, r24
    49d2:	33 27       	eor	r19, r19
    49d4:	27 fd       	sbrc	r18, 7
    49d6:	30 95       	com	r19
    49d8:	c9 01       	movw	r24, r18
    49da:	88 0f       	add	r24, r24
    49dc:	99 1f       	adc	r25, r25
    49de:	82 0f       	add	r24, r18
    49e0:	93 1f       	adc	r25, r19
    49e2:	01 96       	adiw	r24, 0x01	; 1
    49e4:	88 0f       	add	r24, r24
    49e6:	99 1f       	adc	r25, r25
    49e8:	fc 01       	movw	r30, r24
    49ea:	e5 5a       	subi	r30, 0xA5	; 165
    49ec:	fe 4f       	sbci	r31, 0xFE	; 254
    49ee:	10 82       	st	Z, r1
		snakeArr[index].posY = 10 - index;
    49f0:	8a 81       	ldd	r24, Y+2	; 0x02
    49f2:	28 2f       	mov	r18, r24
    49f4:	33 27       	eor	r19, r19
    49f6:	27 fd       	sbrc	r18, 7
    49f8:	30 95       	com	r19
    49fa:	9a 81       	ldd	r25, Y+2	; 0x02
    49fc:	8a e0       	ldi	r24, 0x0A	; 10
    49fe:	89 1b       	sub	r24, r25
    4a00:	48 2f       	mov	r20, r24
    4a02:	c9 01       	movw	r24, r18
    4a04:	88 0f       	add	r24, r24
    4a06:	99 1f       	adc	r25, r25
    4a08:	82 0f       	add	r24, r18
    4a0a:	93 1f       	adc	r25, r19
    4a0c:	88 0f       	add	r24, r24
    4a0e:	99 1f       	adc	r25, r25
    4a10:	fc 01       	movw	r30, r24
    4a12:	e2 5a       	subi	r30, 0xA2	; 162
    4a14:	fe 4f       	sbci	r31, 0xFE	; 254
    4a16:	40 83       	st	Z, r20

		if(index == 0){
    4a18:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1a:	88 23       	and	r24, r24
    4a1c:	19 f4       	brne	.+6      	; 0x4a24 <SpawnSnake+0x6a>
			cgRamIndex = 1;
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	89 83       	std	Y+1, r24	; 0x01
    4a22:	12 c0       	rjmp	.+36     	; 0x4a48 <SpawnSnake+0x8e>
		}
		else if(index == currentSize - 1){
    4a24:	8a 81       	ldd	r24, Y+2	; 0x02
    4a26:	28 2f       	mov	r18, r24
    4a28:	33 27       	eor	r19, r19
    4a2a:	27 fd       	sbrc	r18, 7
    4a2c:	30 95       	com	r19
    4a2e:	80 91 81 00 	lds	r24, 0x0081
    4a32:	88 2f       	mov	r24, r24
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	01 97       	sbiw	r24, 0x01	; 1
    4a38:	28 17       	cp	r18, r24
    4a3a:	39 07       	cpc	r19, r25
    4a3c:	19 f4       	brne	.+6      	; 0x4a44 <SpawnSnake+0x8a>
			cgRamIndex = 2;
    4a3e:	82 e0       	ldi	r24, 0x02	; 2
    4a40:	89 83       	std	Y+1, r24	; 0x01
    4a42:	02 c0       	rjmp	.+4      	; 0x4a48 <SpawnSnake+0x8e>
		}
		else{
			cgRamIndex = 3;
    4a44:	83 e0       	ldi	r24, 0x03	; 3
    4a46:	89 83       	std	Y+1, r24	; 0x01
		}
		LCD_voidDisplaySpecialChar(snakeArr[index].shape, cgRamIndex, snakeArr[index].posX, snakeArr[index].posY);
    4a48:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4a:	28 2f       	mov	r18, r24
    4a4c:	33 27       	eor	r19, r19
    4a4e:	27 fd       	sbrc	r18, 7
    4a50:	30 95       	com	r19
    4a52:	c9 01       	movw	r24, r18
    4a54:	88 0f       	add	r24, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	82 0f       	add	r24, r18
    4a5a:	93 1f       	adc	r25, r19
    4a5c:	88 0f       	add	r24, r24
    4a5e:	99 1f       	adc	r25, r25
    4a60:	fc 01       	movw	r30, r24
    4a62:	e1 5a       	subi	r30, 0xA1	; 161
    4a64:	fe 4f       	sbci	r31, 0xFE	; 254
    4a66:	40 81       	ld	r20, Z
    4a68:	51 81       	ldd	r21, Z+1	; 0x01
    4a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6c:	28 2f       	mov	r18, r24
    4a6e:	33 27       	eor	r19, r19
    4a70:	27 fd       	sbrc	r18, 7
    4a72:	30 95       	com	r19
    4a74:	c9 01       	movw	r24, r18
    4a76:	88 0f       	add	r24, r24
    4a78:	99 1f       	adc	r25, r25
    4a7a:	82 0f       	add	r24, r18
    4a7c:	93 1f       	adc	r25, r19
    4a7e:	01 96       	adiw	r24, 0x01	; 1
    4a80:	88 0f       	add	r24, r24
    4a82:	99 1f       	adc	r25, r25
    4a84:	fc 01       	movw	r30, r24
    4a86:	e5 5a       	subi	r30, 0xA5	; 165
    4a88:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8a:	80 81       	ld	r24, Z
    4a8c:	78 2f       	mov	r23, r24
    4a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a90:	28 2f       	mov	r18, r24
    4a92:	33 27       	eor	r19, r19
    4a94:	27 fd       	sbrc	r18, 7
    4a96:	30 95       	com	r19
    4a98:	c9 01       	movw	r24, r18
    4a9a:	88 0f       	add	r24, r24
    4a9c:	99 1f       	adc	r25, r25
    4a9e:	82 0f       	add	r24, r18
    4aa0:	93 1f       	adc	r25, r19
    4aa2:	88 0f       	add	r24, r24
    4aa4:	99 1f       	adc	r25, r25
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	e2 5a       	subi	r30, 0xA2	; 162
    4aaa:	fe 4f       	sbci	r31, 0xFE	; 254
    4aac:	80 81       	ld	r24, Z
    4aae:	28 2f       	mov	r18, r24
    4ab0:	ca 01       	movw	r24, r20
    4ab2:	69 81       	ldd	r22, Y+1	; 0x01
    4ab4:	47 2f       	mov	r20, r23
    4ab6:	0e 94 48 20 	call	0x4090	; 0x4090 <LCD_voidDisplaySpecialChar>
}

void SpawnSnake(){
	s8 index = 0;
	u8 cgRamIndex = 1;
	for(index = 0; index < currentSize; index++){
    4aba:	8a 81       	ldd	r24, Y+2	; 0x02
    4abc:	8f 5f       	subi	r24, 0xFF	; 255
    4abe:	8a 83       	std	Y+2, r24	; 0x02
    4ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac2:	28 2f       	mov	r18, r24
    4ac4:	33 27       	eor	r19, r19
    4ac6:	27 fd       	sbrc	r18, 7
    4ac8:	30 95       	com	r19
    4aca:	80 91 81 00 	lds	r24, 0x0081
    4ace:	88 2f       	mov	r24, r24
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	28 17       	cp	r18, r24
    4ad4:	39 07       	cpc	r19, r25
    4ad6:	0c f4       	brge	.+2      	; 0x4ada <SpawnSnake+0x120>
    4ad8:	7a cf       	rjmp	.-268    	; 0x49ce <SpawnSnake+0x14>
		else{
			cgRamIndex = 3;
		}
		LCD_voidDisplaySpecialChar(snakeArr[index].shape, cgRamIndex, snakeArr[index].posX, snakeArr[index].posY);
	}
}
    4ada:	0f 90       	pop	r0
    4adc:	0f 90       	pop	r0
    4ade:	cf 91       	pop	r28
    4ae0:	df 91       	pop	r29
    4ae2:	08 95       	ret

00004ae4 <MoveSnake>:
void MoveSnake(){
    4ae4:	0f 93       	push	r16
    4ae6:	1f 93       	push	r17
    4ae8:	df 93       	push	r29
    4aea:	cf 93       	push	r28
    4aec:	0f 92       	push	r0
    4aee:	cd b7       	in	r28, 0x3d	; 61
    4af0:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    4af2:	19 82       	std	Y+1, r1	; 0x01
	index = currentSize - 1;
    4af4:	80 91 81 00 	lds	r24, 0x0081
    4af8:	81 50       	subi	r24, 0x01	; 1
    4afa:	89 83       	std	Y+1, r24	; 0x01
	posArr[snakeArr[index].posX][snakeArr[index].posY] = 0;
    4afc:	89 81       	ldd	r24, Y+1	; 0x01
    4afe:	28 2f       	mov	r18, r24
    4b00:	33 27       	eor	r19, r19
    4b02:	27 fd       	sbrc	r18, 7
    4b04:	30 95       	com	r19
    4b06:	c9 01       	movw	r24, r18
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	82 0f       	add	r24, r18
    4b0e:	93 1f       	adc	r25, r19
    4b10:	01 96       	adiw	r24, 0x01	; 1
    4b12:	88 0f       	add	r24, r24
    4b14:	99 1f       	adc	r25, r25
    4b16:	fc 01       	movw	r30, r24
    4b18:	e5 5a       	subi	r30, 0xA5	; 165
    4b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b1c:	80 81       	ld	r24, Z
    4b1e:	68 2f       	mov	r22, r24
    4b20:	77 27       	eor	r23, r23
    4b22:	67 fd       	sbrc	r22, 7
    4b24:	70 95       	com	r23
    4b26:	89 81       	ldd	r24, Y+1	; 0x01
    4b28:	28 2f       	mov	r18, r24
    4b2a:	33 27       	eor	r19, r19
    4b2c:	27 fd       	sbrc	r18, 7
    4b2e:	30 95       	com	r19
    4b30:	c9 01       	movw	r24, r18
    4b32:	88 0f       	add	r24, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	82 0f       	add	r24, r18
    4b38:	93 1f       	adc	r25, r19
    4b3a:	88 0f       	add	r24, r24
    4b3c:	99 1f       	adc	r25, r25
    4b3e:	fc 01       	movw	r30, r24
    4b40:	e2 5a       	subi	r30, 0xA2	; 162
    4b42:	fe 4f       	sbci	r31, 0xFE	; 254
    4b44:	80 81       	ld	r24, Z
    4b46:	48 2f       	mov	r20, r24
    4b48:	55 27       	eor	r21, r21
    4b4a:	47 fd       	sbrc	r20, 7
    4b4c:	50 95       	com	r21
    4b4e:	cb 01       	movw	r24, r22
    4b50:	88 0f       	add	r24, r24
    4b52:	99 1f       	adc	r25, r25
    4b54:	88 0f       	add	r24, r24
    4b56:	99 1f       	adc	r25, r25
    4b58:	9c 01       	movw	r18, r24
    4b5a:	22 0f       	add	r18, r18
    4b5c:	33 1f       	adc	r19, r19
    4b5e:	22 0f       	add	r18, r18
    4b60:	33 1f       	adc	r19, r19
    4b62:	82 0f       	add	r24, r18
    4b64:	93 1f       	adc	r25, r19
    4b66:	84 0f       	add	r24, r20
    4b68:	95 1f       	adc	r25, r21
    4b6a:	fc 01       	movw	r30, r24
    4b6c:	e5 5f       	subi	r30, 0xF5	; 245
    4b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b70:	10 82       	st	Z, r1
    4b72:	ea c2       	rjmp	.+1492   	; 0x5148 <MoveSnake+0x664>
	while(index >= 0){

		if(index != 0){
    4b74:	89 81       	ldd	r24, Y+1	; 0x01
    4b76:	88 23       	and	r24, r24
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <MoveSnake+0x98>
    4b7a:	fd c0       	rjmp	.+506    	; 0x4d76 <MoveSnake+0x292>
			snakeArr[index].currentDirection = snakeArr[index - 1].currentDirection;
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	48 2f       	mov	r20, r24
    4b80:	55 27       	eor	r21, r21
    4b82:	47 fd       	sbrc	r20, 7
    4b84:	50 95       	com	r21
    4b86:	89 81       	ldd	r24, Y+1	; 0x01
    4b88:	99 27       	eor	r25, r25
    4b8a:	87 fd       	sbrc	r24, 7
    4b8c:	90 95       	com	r25
    4b8e:	9c 01       	movw	r18, r24
    4b90:	21 50       	subi	r18, 0x01	; 1
    4b92:	30 40       	sbci	r19, 0x00	; 0
    4b94:	c9 01       	movw	r24, r18
    4b96:	88 0f       	add	r24, r24
    4b98:	99 1f       	adc	r25, r25
    4b9a:	82 0f       	add	r24, r18
    4b9c:	93 1f       	adc	r25, r19
    4b9e:	88 0f       	add	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	e5 5a       	subi	r30, 0xA5	; 165
    4ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba8:	20 81       	ld	r18, Z
    4baa:	ca 01       	movw	r24, r20
    4bac:	88 0f       	add	r24, r24
    4bae:	99 1f       	adc	r25, r25
    4bb0:	84 0f       	add	r24, r20
    4bb2:	95 1f       	adc	r25, r21
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	fc 01       	movw	r30, r24
    4bba:	e5 5a       	subi	r30, 0xA5	; 165
    4bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4bbe:	20 83       	st	Z, r18
			snakeArr[index].nextDirection = snakeArr[index - 1].nextDirection;
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	48 2f       	mov	r20, r24
    4bc4:	55 27       	eor	r21, r21
    4bc6:	47 fd       	sbrc	r20, 7
    4bc8:	50 95       	com	r21
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	99 27       	eor	r25, r25
    4bce:	87 fd       	sbrc	r24, 7
    4bd0:	90 95       	com	r25
    4bd2:	9c 01       	movw	r18, r24
    4bd4:	21 50       	subi	r18, 0x01	; 1
    4bd6:	30 40       	sbci	r19, 0x00	; 0
    4bd8:	c9 01       	movw	r24, r18
    4bda:	88 0f       	add	r24, r24
    4bdc:	99 1f       	adc	r25, r25
    4bde:	82 0f       	add	r24, r18
    4be0:	93 1f       	adc	r25, r19
    4be2:	88 0f       	add	r24, r24
    4be4:	99 1f       	adc	r25, r25
    4be6:	fc 01       	movw	r30, r24
    4be8:	e4 5a       	subi	r30, 0xA4	; 164
    4bea:	fe 4f       	sbci	r31, 0xFE	; 254
    4bec:	20 81       	ld	r18, Z
    4bee:	ca 01       	movw	r24, r20
    4bf0:	88 0f       	add	r24, r24
    4bf2:	99 1f       	adc	r25, r25
    4bf4:	84 0f       	add	r24, r20
    4bf6:	95 1f       	adc	r25, r21
    4bf8:	88 0f       	add	r24, r24
    4bfa:	99 1f       	adc	r25, r25
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	e4 5a       	subi	r30, 0xA4	; 164
    4c00:	fe 4f       	sbci	r31, 0xFE	; 254
    4c02:	20 83       	st	Z, r18
			snakeArr[index].posX = snakeArr[index - 1].posX;
    4c04:	89 81       	ldd	r24, Y+1	; 0x01
    4c06:	48 2f       	mov	r20, r24
    4c08:	55 27       	eor	r21, r21
    4c0a:	47 fd       	sbrc	r20, 7
    4c0c:	50 95       	com	r21
    4c0e:	89 81       	ldd	r24, Y+1	; 0x01
    4c10:	99 27       	eor	r25, r25
    4c12:	87 fd       	sbrc	r24, 7
    4c14:	90 95       	com	r25
    4c16:	9c 01       	movw	r18, r24
    4c18:	21 50       	subi	r18, 0x01	; 1
    4c1a:	30 40       	sbci	r19, 0x00	; 0
    4c1c:	c9 01       	movw	r24, r18
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	82 0f       	add	r24, r18
    4c24:	93 1f       	adc	r25, r19
    4c26:	01 96       	adiw	r24, 0x01	; 1
    4c28:	88 0f       	add	r24, r24
    4c2a:	99 1f       	adc	r25, r25
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	e5 5a       	subi	r30, 0xA5	; 165
    4c30:	fe 4f       	sbci	r31, 0xFE	; 254
    4c32:	20 81       	ld	r18, Z
    4c34:	ca 01       	movw	r24, r20
    4c36:	88 0f       	add	r24, r24
    4c38:	99 1f       	adc	r25, r25
    4c3a:	84 0f       	add	r24, r20
    4c3c:	95 1f       	adc	r25, r21
    4c3e:	01 96       	adiw	r24, 0x01	; 1
    4c40:	88 0f       	add	r24, r24
    4c42:	99 1f       	adc	r25, r25
    4c44:	fc 01       	movw	r30, r24
    4c46:	e5 5a       	subi	r30, 0xA5	; 165
    4c48:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4a:	20 83       	st	Z, r18
			snakeArr[index].posY = snakeArr[index - 1].posY;
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	48 2f       	mov	r20, r24
    4c50:	55 27       	eor	r21, r21
    4c52:	47 fd       	sbrc	r20, 7
    4c54:	50 95       	com	r21
    4c56:	89 81       	ldd	r24, Y+1	; 0x01
    4c58:	99 27       	eor	r25, r25
    4c5a:	87 fd       	sbrc	r24, 7
    4c5c:	90 95       	com	r25
    4c5e:	9c 01       	movw	r18, r24
    4c60:	21 50       	subi	r18, 0x01	; 1
    4c62:	30 40       	sbci	r19, 0x00	; 0
    4c64:	c9 01       	movw	r24, r18
    4c66:	88 0f       	add	r24, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	82 0f       	add	r24, r18
    4c6c:	93 1f       	adc	r25, r19
    4c6e:	88 0f       	add	r24, r24
    4c70:	99 1f       	adc	r25, r25
    4c72:	fc 01       	movw	r30, r24
    4c74:	e2 5a       	subi	r30, 0xA2	; 162
    4c76:	fe 4f       	sbci	r31, 0xFE	; 254
    4c78:	20 81       	ld	r18, Z
    4c7a:	ca 01       	movw	r24, r20
    4c7c:	88 0f       	add	r24, r24
    4c7e:	99 1f       	adc	r25, r25
    4c80:	84 0f       	add	r24, r20
    4c82:	95 1f       	adc	r25, r21
    4c84:	88 0f       	add	r24, r24
    4c86:	99 1f       	adc	r25, r25
    4c88:	fc 01       	movw	r30, r24
    4c8a:	e2 5a       	subi	r30, 0xA2	; 162
    4c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c8e:	20 83       	st	Z, r18
			snakeArr[index].shape = FindShape(snakeArr[index].currentDirection, snakeArr[index].nextDirection);
    4c90:	89 81       	ldd	r24, Y+1	; 0x01
    4c92:	08 2f       	mov	r16, r24
    4c94:	11 27       	eor	r17, r17
    4c96:	07 fd       	sbrc	r16, 7
    4c98:	10 95       	com	r17
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	28 2f       	mov	r18, r24
    4c9e:	33 27       	eor	r19, r19
    4ca0:	27 fd       	sbrc	r18, 7
    4ca2:	30 95       	com	r19
    4ca4:	c9 01       	movw	r24, r18
    4ca6:	88 0f       	add	r24, r24
    4ca8:	99 1f       	adc	r25, r25
    4caa:	82 0f       	add	r24, r18
    4cac:	93 1f       	adc	r25, r19
    4cae:	88 0f       	add	r24, r24
    4cb0:	99 1f       	adc	r25, r25
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	e5 5a       	subi	r30, 0xA5	; 165
    4cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cb8:	40 81       	ld	r20, Z
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	28 2f       	mov	r18, r24
    4cbe:	33 27       	eor	r19, r19
    4cc0:	27 fd       	sbrc	r18, 7
    4cc2:	30 95       	com	r19
    4cc4:	c9 01       	movw	r24, r18
    4cc6:	88 0f       	add	r24, r24
    4cc8:	99 1f       	adc	r25, r25
    4cca:	82 0f       	add	r24, r18
    4ccc:	93 1f       	adc	r25, r19
    4cce:	88 0f       	add	r24, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	e4 5a       	subi	r30, 0xA4	; 164
    4cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd8:	90 81       	ld	r25, Z
    4cda:	84 2f       	mov	r24, r20
    4cdc:	69 2f       	mov	r22, r25
    4cde:	0e 94 ae 28 	call	0x515c	; 0x515c <FindShape>
    4ce2:	9c 01       	movw	r18, r24
    4ce4:	c8 01       	movw	r24, r16
    4ce6:	88 0f       	add	r24, r24
    4ce8:	99 1f       	adc	r25, r25
    4cea:	80 0f       	add	r24, r16
    4cec:	91 1f       	adc	r25, r17
    4cee:	88 0f       	add	r24, r24
    4cf0:	99 1f       	adc	r25, r25
    4cf2:	fc 01       	movw	r30, r24
    4cf4:	e1 5a       	subi	r30, 0xA1	; 161
    4cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf8:	31 83       	std	Z+1, r19	; 0x01
    4cfa:	20 83       	st	Z, r18
			posArr[snakeArr[index].posX][snakeArr[index].posY] = 1;
    4cfc:	89 81       	ldd	r24, Y+1	; 0x01
    4cfe:	28 2f       	mov	r18, r24
    4d00:	33 27       	eor	r19, r19
    4d02:	27 fd       	sbrc	r18, 7
    4d04:	30 95       	com	r19
    4d06:	c9 01       	movw	r24, r18
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	82 0f       	add	r24, r18
    4d0e:	93 1f       	adc	r25, r19
    4d10:	01 96       	adiw	r24, 0x01	; 1
    4d12:	88 0f       	add	r24, r24
    4d14:	99 1f       	adc	r25, r25
    4d16:	fc 01       	movw	r30, r24
    4d18:	e5 5a       	subi	r30, 0xA5	; 165
    4d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d1c:	80 81       	ld	r24, Z
    4d1e:	68 2f       	mov	r22, r24
    4d20:	77 27       	eor	r23, r23
    4d22:	67 fd       	sbrc	r22, 7
    4d24:	70 95       	com	r23
    4d26:	89 81       	ldd	r24, Y+1	; 0x01
    4d28:	28 2f       	mov	r18, r24
    4d2a:	33 27       	eor	r19, r19
    4d2c:	27 fd       	sbrc	r18, 7
    4d2e:	30 95       	com	r19
    4d30:	c9 01       	movw	r24, r18
    4d32:	88 0f       	add	r24, r24
    4d34:	99 1f       	adc	r25, r25
    4d36:	82 0f       	add	r24, r18
    4d38:	93 1f       	adc	r25, r19
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	fc 01       	movw	r30, r24
    4d40:	e2 5a       	subi	r30, 0xA2	; 162
    4d42:	fe 4f       	sbci	r31, 0xFE	; 254
    4d44:	80 81       	ld	r24, Z
    4d46:	48 2f       	mov	r20, r24
    4d48:	55 27       	eor	r21, r21
    4d4a:	47 fd       	sbrc	r20, 7
    4d4c:	50 95       	com	r21
    4d4e:	cb 01       	movw	r24, r22
    4d50:	88 0f       	add	r24, r24
    4d52:	99 1f       	adc	r25, r25
    4d54:	88 0f       	add	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	9c 01       	movw	r18, r24
    4d5a:	22 0f       	add	r18, r18
    4d5c:	33 1f       	adc	r19, r19
    4d5e:	22 0f       	add	r18, r18
    4d60:	33 1f       	adc	r19, r19
    4d62:	82 0f       	add	r24, r18
    4d64:	93 1f       	adc	r25, r19
    4d66:	84 0f       	add	r24, r20
    4d68:	95 1f       	adc	r25, r21
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	e5 5f       	subi	r30, 0xF5	; 245
    4d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	80 83       	st	Z, r24
    4d74:	1c c1       	rjmp	.+568    	; 0x4fae <MoveSnake+0x4ca>
		}
		else{
			snakeArr[index].currentDirection = snakeArr[index].nextDirection;
    4d76:	89 81       	ldd	r24, Y+1	; 0x01
    4d78:	48 2f       	mov	r20, r24
    4d7a:	55 27       	eor	r21, r21
    4d7c:	47 fd       	sbrc	r20, 7
    4d7e:	50 95       	com	r21
    4d80:	89 81       	ldd	r24, Y+1	; 0x01
    4d82:	28 2f       	mov	r18, r24
    4d84:	33 27       	eor	r19, r19
    4d86:	27 fd       	sbrc	r18, 7
    4d88:	30 95       	com	r19
    4d8a:	c9 01       	movw	r24, r18
    4d8c:	88 0f       	add	r24, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	82 0f       	add	r24, r18
    4d92:	93 1f       	adc	r25, r19
    4d94:	88 0f       	add	r24, r24
    4d96:	99 1f       	adc	r25, r25
    4d98:	fc 01       	movw	r30, r24
    4d9a:	e4 5a       	subi	r30, 0xA4	; 164
    4d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d9e:	20 81       	ld	r18, Z
    4da0:	ca 01       	movw	r24, r20
    4da2:	88 0f       	add	r24, r24
    4da4:	99 1f       	adc	r25, r25
    4da6:	84 0f       	add	r24, r20
    4da8:	95 1f       	adc	r25, r21
    4daa:	88 0f       	add	r24, r24
    4dac:	99 1f       	adc	r25, r25
    4dae:	fc 01       	movw	r30, r24
    4db0:	e5 5a       	subi	r30, 0xA5	; 165
    4db2:	fe 4f       	sbci	r31, 0xFE	; 254
    4db4:	20 83       	st	Z, r18
			snakeArr[index].shape = Head[snakeArr[index].currentDirection];
    4db6:	89 81       	ldd	r24, Y+1	; 0x01
    4db8:	48 2f       	mov	r20, r24
    4dba:	55 27       	eor	r21, r21
    4dbc:	47 fd       	sbrc	r20, 7
    4dbe:	50 95       	com	r21
    4dc0:	63 e8       	ldi	r22, 0x83	; 131
    4dc2:	70 e0       	ldi	r23, 0x00	; 0
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	28 2f       	mov	r18, r24
    4dc8:	33 27       	eor	r19, r19
    4dca:	27 fd       	sbrc	r18, 7
    4dcc:	30 95       	com	r19
    4dce:	c9 01       	movw	r24, r18
    4dd0:	88 0f       	add	r24, r24
    4dd2:	99 1f       	adc	r25, r25
    4dd4:	82 0f       	add	r24, r18
    4dd6:	93 1f       	adc	r25, r19
    4dd8:	88 0f       	add	r24, r24
    4dda:	99 1f       	adc	r25, r25
    4ddc:	fc 01       	movw	r30, r24
    4dde:	e5 5a       	subi	r30, 0xA5	; 165
    4de0:	fe 4f       	sbci	r31, 0xFE	; 254
    4de2:	80 81       	ld	r24, Z
    4de4:	88 2f       	mov	r24, r24
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	88 0f       	add	r24, r24
    4dea:	99 1f       	adc	r25, r25
    4dec:	88 0f       	add	r24, r24
    4dee:	99 1f       	adc	r25, r25
    4df0:	88 0f       	add	r24, r24
    4df2:	99 1f       	adc	r25, r25
    4df4:	9b 01       	movw	r18, r22
    4df6:	28 0f       	add	r18, r24
    4df8:	39 1f       	adc	r19, r25
    4dfa:	ca 01       	movw	r24, r20
    4dfc:	88 0f       	add	r24, r24
    4dfe:	99 1f       	adc	r25, r25
    4e00:	84 0f       	add	r24, r20
    4e02:	95 1f       	adc	r25, r21
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	fc 01       	movw	r30, r24
    4e0a:	e1 5a       	subi	r30, 0xA1	; 161
    4e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0e:	31 83       	std	Z+1, r19	; 0x01
    4e10:	20 83       	st	Z, r18
			if(snakeArr[index].nextDirection == Down){
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	28 2f       	mov	r18, r24
    4e16:	33 27       	eor	r19, r19
    4e18:	27 fd       	sbrc	r18, 7
    4e1a:	30 95       	com	r19
    4e1c:	c9 01       	movw	r24, r18
    4e1e:	88 0f       	add	r24, r24
    4e20:	99 1f       	adc	r25, r25
    4e22:	82 0f       	add	r24, r18
    4e24:	93 1f       	adc	r25, r19
    4e26:	88 0f       	add	r24, r24
    4e28:	99 1f       	adc	r25, r25
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	e4 5a       	subi	r30, 0xA4	; 164
    4e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e30:	80 81       	ld	r24, Z
    4e32:	83 30       	cpi	r24, 0x03	; 3
    4e34:	19 f5       	brne	.+70     	; 0x4e7c <MoveSnake+0x398>
				snakeArr[index].posX++;
    4e36:	89 81       	ldd	r24, Y+1	; 0x01
    4e38:	28 2f       	mov	r18, r24
    4e3a:	33 27       	eor	r19, r19
    4e3c:	27 fd       	sbrc	r18, 7
    4e3e:	30 95       	com	r19
    4e40:	c9 01       	movw	r24, r18
    4e42:	88 0f       	add	r24, r24
    4e44:	99 1f       	adc	r25, r25
    4e46:	82 0f       	add	r24, r18
    4e48:	93 1f       	adc	r25, r19
    4e4a:	01 96       	adiw	r24, 0x01	; 1
    4e4c:	88 0f       	add	r24, r24
    4e4e:	99 1f       	adc	r25, r25
    4e50:	fc 01       	movw	r30, r24
    4e52:	e5 5a       	subi	r30, 0xA5	; 165
    4e54:	fe 4f       	sbci	r31, 0xFE	; 254
    4e56:	80 81       	ld	r24, Z
    4e58:	48 2f       	mov	r20, r24
    4e5a:	4f 5f       	subi	r20, 0xFF	; 255
    4e5c:	c9 01       	movw	r24, r18
    4e5e:	88 0f       	add	r24, r24
    4e60:	99 1f       	adc	r25, r25
    4e62:	82 0f       	add	r24, r18
    4e64:	93 1f       	adc	r25, r19
    4e66:	01 96       	adiw	r24, 0x01	; 1
    4e68:	88 0f       	add	r24, r24
    4e6a:	99 1f       	adc	r25, r25
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	e5 5a       	subi	r30, 0xA5	; 165
    4e70:	fe 4f       	sbci	r31, 0xFE	; 254
    4e72:	40 83       	st	Z, r20
				cgRamIndex = 3;
    4e74:	83 e0       	ldi	r24, 0x03	; 3
    4e76:	80 93 06 01 	sts	0x0106, r24
    4e7a:	99 c0       	rjmp	.+306    	; 0x4fae <MoveSnake+0x4ca>
			}
			else if(snakeArr[index].nextDirection == Up){
    4e7c:	89 81       	ldd	r24, Y+1	; 0x01
    4e7e:	28 2f       	mov	r18, r24
    4e80:	33 27       	eor	r19, r19
    4e82:	27 fd       	sbrc	r18, 7
    4e84:	30 95       	com	r19
    4e86:	c9 01       	movw	r24, r18
    4e88:	88 0f       	add	r24, r24
    4e8a:	99 1f       	adc	r25, r25
    4e8c:	82 0f       	add	r24, r18
    4e8e:	93 1f       	adc	r25, r19
    4e90:	88 0f       	add	r24, r24
    4e92:	99 1f       	adc	r25, r25
    4e94:	fc 01       	movw	r30, r24
    4e96:	e4 5a       	subi	r30, 0xA4	; 164
    4e98:	fe 4f       	sbci	r31, 0xFE	; 254
    4e9a:	80 81       	ld	r24, Z
    4e9c:	82 30       	cpi	r24, 0x02	; 2
    4e9e:	19 f5       	brne	.+70     	; 0x4ee6 <MoveSnake+0x402>
				snakeArr[index].posX--;
    4ea0:	89 81       	ldd	r24, Y+1	; 0x01
    4ea2:	28 2f       	mov	r18, r24
    4ea4:	33 27       	eor	r19, r19
    4ea6:	27 fd       	sbrc	r18, 7
    4ea8:	30 95       	com	r19
    4eaa:	c9 01       	movw	r24, r18
    4eac:	88 0f       	add	r24, r24
    4eae:	99 1f       	adc	r25, r25
    4eb0:	82 0f       	add	r24, r18
    4eb2:	93 1f       	adc	r25, r19
    4eb4:	01 96       	adiw	r24, 0x01	; 1
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	fc 01       	movw	r30, r24
    4ebc:	e5 5a       	subi	r30, 0xA5	; 165
    4ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec0:	80 81       	ld	r24, Z
    4ec2:	48 2f       	mov	r20, r24
    4ec4:	41 50       	subi	r20, 0x01	; 1
    4ec6:	c9 01       	movw	r24, r18
    4ec8:	88 0f       	add	r24, r24
    4eca:	99 1f       	adc	r25, r25
    4ecc:	82 0f       	add	r24, r18
    4ece:	93 1f       	adc	r25, r19
    4ed0:	01 96       	adiw	r24, 0x01	; 1
    4ed2:	88 0f       	add	r24, r24
    4ed4:	99 1f       	adc	r25, r25
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	e5 5a       	subi	r30, 0xA5	; 165
    4eda:	fe 4f       	sbci	r31, 0xFE	; 254
    4edc:	40 83       	st	Z, r20
				cgRamIndex = 2;
    4ede:	82 e0       	ldi	r24, 0x02	; 2
    4ee0:	80 93 06 01 	sts	0x0106, r24
    4ee4:	64 c0       	rjmp	.+200    	; 0x4fae <MoveSnake+0x4ca>
			}
			else if(snakeArr[index].nextDirection == Right){
    4ee6:	89 81       	ldd	r24, Y+1	; 0x01
    4ee8:	28 2f       	mov	r18, r24
    4eea:	33 27       	eor	r19, r19
    4eec:	27 fd       	sbrc	r18, 7
    4eee:	30 95       	com	r19
    4ef0:	c9 01       	movw	r24, r18
    4ef2:	88 0f       	add	r24, r24
    4ef4:	99 1f       	adc	r25, r25
    4ef6:	82 0f       	add	r24, r18
    4ef8:	93 1f       	adc	r25, r19
    4efa:	88 0f       	add	r24, r24
    4efc:	99 1f       	adc	r25, r25
    4efe:	fc 01       	movw	r30, r24
    4f00:	e4 5a       	subi	r30, 0xA4	; 164
    4f02:	fe 4f       	sbci	r31, 0xFE	; 254
    4f04:	80 81       	ld	r24, Z
    4f06:	88 23       	and	r24, r24
    4f08:	01 f5       	brne	.+64     	; 0x4f4a <MoveSnake+0x466>
				snakeArr[index].posY++;
    4f0a:	89 81       	ldd	r24, Y+1	; 0x01
    4f0c:	28 2f       	mov	r18, r24
    4f0e:	33 27       	eor	r19, r19
    4f10:	27 fd       	sbrc	r18, 7
    4f12:	30 95       	com	r19
    4f14:	c9 01       	movw	r24, r18
    4f16:	88 0f       	add	r24, r24
    4f18:	99 1f       	adc	r25, r25
    4f1a:	82 0f       	add	r24, r18
    4f1c:	93 1f       	adc	r25, r19
    4f1e:	88 0f       	add	r24, r24
    4f20:	99 1f       	adc	r25, r25
    4f22:	fc 01       	movw	r30, r24
    4f24:	e2 5a       	subi	r30, 0xA2	; 162
    4f26:	fe 4f       	sbci	r31, 0xFE	; 254
    4f28:	80 81       	ld	r24, Z
    4f2a:	48 2f       	mov	r20, r24
    4f2c:	4f 5f       	subi	r20, 0xFF	; 255
    4f2e:	c9 01       	movw	r24, r18
    4f30:	88 0f       	add	r24, r24
    4f32:	99 1f       	adc	r25, r25
    4f34:	82 0f       	add	r24, r18
    4f36:	93 1f       	adc	r25, r19
    4f38:	88 0f       	add	r24, r24
    4f3a:	99 1f       	adc	r25, r25
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	e2 5a       	subi	r30, 0xA2	; 162
    4f40:	fe 4f       	sbci	r31, 0xFE	; 254
    4f42:	40 83       	st	Z, r20
				cgRamIndex = 0;
    4f44:	10 92 06 01 	sts	0x0106, r1
    4f48:	32 c0       	rjmp	.+100    	; 0x4fae <MoveSnake+0x4ca>
			}
			else if(snakeArr[index].nextDirection == Left){
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01
    4f4c:	28 2f       	mov	r18, r24
    4f4e:	33 27       	eor	r19, r19
    4f50:	27 fd       	sbrc	r18, 7
    4f52:	30 95       	com	r19
    4f54:	c9 01       	movw	r24, r18
    4f56:	88 0f       	add	r24, r24
    4f58:	99 1f       	adc	r25, r25
    4f5a:	82 0f       	add	r24, r18
    4f5c:	93 1f       	adc	r25, r19
    4f5e:	88 0f       	add	r24, r24
    4f60:	99 1f       	adc	r25, r25
    4f62:	fc 01       	movw	r30, r24
    4f64:	e4 5a       	subi	r30, 0xA4	; 164
    4f66:	fe 4f       	sbci	r31, 0xFE	; 254
    4f68:	80 81       	ld	r24, Z
    4f6a:	81 30       	cpi	r24, 0x01	; 1
    4f6c:	01 f5       	brne	.+64     	; 0x4fae <MoveSnake+0x4ca>
				snakeArr[index].posY--;
    4f6e:	89 81       	ldd	r24, Y+1	; 0x01
    4f70:	28 2f       	mov	r18, r24
    4f72:	33 27       	eor	r19, r19
    4f74:	27 fd       	sbrc	r18, 7
    4f76:	30 95       	com	r19
    4f78:	c9 01       	movw	r24, r18
    4f7a:	88 0f       	add	r24, r24
    4f7c:	99 1f       	adc	r25, r25
    4f7e:	82 0f       	add	r24, r18
    4f80:	93 1f       	adc	r25, r19
    4f82:	88 0f       	add	r24, r24
    4f84:	99 1f       	adc	r25, r25
    4f86:	fc 01       	movw	r30, r24
    4f88:	e2 5a       	subi	r30, 0xA2	; 162
    4f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f8c:	80 81       	ld	r24, Z
    4f8e:	48 2f       	mov	r20, r24
    4f90:	41 50       	subi	r20, 0x01	; 1
    4f92:	c9 01       	movw	r24, r18
    4f94:	88 0f       	add	r24, r24
    4f96:	99 1f       	adc	r25, r25
    4f98:	82 0f       	add	r24, r18
    4f9a:	93 1f       	adc	r25, r19
    4f9c:	88 0f       	add	r24, r24
    4f9e:	99 1f       	adc	r25, r25
    4fa0:	fc 01       	movw	r30, r24
    4fa2:	e2 5a       	subi	r30, 0xA2	; 162
    4fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa6:	40 83       	st	Z, r20
				cgRamIndex = 1;
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	80 93 06 01 	sts	0x0106, r24
			}
		}
		if(snakeArr[index].posX > 3){
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	28 2f       	mov	r18, r24
    4fb2:	33 27       	eor	r19, r19
    4fb4:	27 fd       	sbrc	r18, 7
    4fb6:	30 95       	com	r19
    4fb8:	c9 01       	movw	r24, r18
    4fba:	88 0f       	add	r24, r24
    4fbc:	99 1f       	adc	r25, r25
    4fbe:	82 0f       	add	r24, r18
    4fc0:	93 1f       	adc	r25, r19
    4fc2:	01 96       	adiw	r24, 0x01	; 1
    4fc4:	88 0f       	add	r24, r24
    4fc6:	99 1f       	adc	r25, r25
    4fc8:	fc 01       	movw	r30, r24
    4fca:	e5 5a       	subi	r30, 0xA5	; 165
    4fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fce:	80 81       	ld	r24, Z
    4fd0:	84 30       	cpi	r24, 0x04	; 4
    4fd2:	94 f0       	brlt	.+36     	; 0x4ff8 <MoveSnake+0x514>
			snakeArr[index].posX = 0;
    4fd4:	89 81       	ldd	r24, Y+1	; 0x01
    4fd6:	28 2f       	mov	r18, r24
    4fd8:	33 27       	eor	r19, r19
    4fda:	27 fd       	sbrc	r18, 7
    4fdc:	30 95       	com	r19
    4fde:	c9 01       	movw	r24, r18
    4fe0:	88 0f       	add	r24, r24
    4fe2:	99 1f       	adc	r25, r25
    4fe4:	82 0f       	add	r24, r18
    4fe6:	93 1f       	adc	r25, r19
    4fe8:	01 96       	adiw	r24, 0x01	; 1
    4fea:	88 0f       	add	r24, r24
    4fec:	99 1f       	adc	r25, r25
    4fee:	fc 01       	movw	r30, r24
    4ff0:	e5 5a       	subi	r30, 0xA5	; 165
    4ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ff4:	10 82       	st	Z, r1
    4ff6:	25 c0       	rjmp	.+74     	; 0x5042 <MoveSnake+0x55e>
		}
		else if(snakeArr[index].posX < 0){
    4ff8:	89 81       	ldd	r24, Y+1	; 0x01
    4ffa:	28 2f       	mov	r18, r24
    4ffc:	33 27       	eor	r19, r19
    4ffe:	27 fd       	sbrc	r18, 7
    5000:	30 95       	com	r19
    5002:	c9 01       	movw	r24, r18
    5004:	88 0f       	add	r24, r24
    5006:	99 1f       	adc	r25, r25
    5008:	82 0f       	add	r24, r18
    500a:	93 1f       	adc	r25, r19
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	88 0f       	add	r24, r24
    5010:	99 1f       	adc	r25, r25
    5012:	fc 01       	movw	r30, r24
    5014:	e5 5a       	subi	r30, 0xA5	; 165
    5016:	fe 4f       	sbci	r31, 0xFE	; 254
    5018:	80 81       	ld	r24, Z
    501a:	88 23       	and	r24, r24
    501c:	94 f4       	brge	.+36     	; 0x5042 <MoveSnake+0x55e>
			snakeArr[index].posX = 3;
    501e:	89 81       	ldd	r24, Y+1	; 0x01
    5020:	28 2f       	mov	r18, r24
    5022:	33 27       	eor	r19, r19
    5024:	27 fd       	sbrc	r18, 7
    5026:	30 95       	com	r19
    5028:	c9 01       	movw	r24, r18
    502a:	88 0f       	add	r24, r24
    502c:	99 1f       	adc	r25, r25
    502e:	82 0f       	add	r24, r18
    5030:	93 1f       	adc	r25, r19
    5032:	01 96       	adiw	r24, 0x01	; 1
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	fc 01       	movw	r30, r24
    503a:	e5 5a       	subi	r30, 0xA5	; 165
    503c:	fe 4f       	sbci	r31, 0xFE	; 254
    503e:	83 e0       	ldi	r24, 0x03	; 3
    5040:	80 83       	st	Z, r24
		}

		if(snakeArr[index].posY > 19){
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	28 2f       	mov	r18, r24
    5046:	33 27       	eor	r19, r19
    5048:	27 fd       	sbrc	r18, 7
    504a:	30 95       	com	r19
    504c:	c9 01       	movw	r24, r18
    504e:	88 0f       	add	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	82 0f       	add	r24, r18
    5054:	93 1f       	adc	r25, r19
    5056:	88 0f       	add	r24, r24
    5058:	99 1f       	adc	r25, r25
    505a:	fc 01       	movw	r30, r24
    505c:	e2 5a       	subi	r30, 0xA2	; 162
    505e:	fe 4f       	sbci	r31, 0xFE	; 254
    5060:	80 81       	ld	r24, Z
    5062:	84 31       	cpi	r24, 0x14	; 20
    5064:	8c f0       	brlt	.+34     	; 0x5088 <MoveSnake+0x5a4>
			snakeArr[index].posY = 0;
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	28 2f       	mov	r18, r24
    506a:	33 27       	eor	r19, r19
    506c:	27 fd       	sbrc	r18, 7
    506e:	30 95       	com	r19
    5070:	c9 01       	movw	r24, r18
    5072:	88 0f       	add	r24, r24
    5074:	99 1f       	adc	r25, r25
    5076:	82 0f       	add	r24, r18
    5078:	93 1f       	adc	r25, r19
    507a:	88 0f       	add	r24, r24
    507c:	99 1f       	adc	r25, r25
    507e:	fc 01       	movw	r30, r24
    5080:	e2 5a       	subi	r30, 0xA2	; 162
    5082:	fe 4f       	sbci	r31, 0xFE	; 254
    5084:	10 82       	st	Z, r1
    5086:	23 c0       	rjmp	.+70     	; 0x50ce <MoveSnake+0x5ea>
		}
		else if(snakeArr[index].posY < 0){
    5088:	89 81       	ldd	r24, Y+1	; 0x01
    508a:	28 2f       	mov	r18, r24
    508c:	33 27       	eor	r19, r19
    508e:	27 fd       	sbrc	r18, 7
    5090:	30 95       	com	r19
    5092:	c9 01       	movw	r24, r18
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	82 0f       	add	r24, r18
    509a:	93 1f       	adc	r25, r19
    509c:	88 0f       	add	r24, r24
    509e:	99 1f       	adc	r25, r25
    50a0:	fc 01       	movw	r30, r24
    50a2:	e2 5a       	subi	r30, 0xA2	; 162
    50a4:	fe 4f       	sbci	r31, 0xFE	; 254
    50a6:	80 81       	ld	r24, Z
    50a8:	88 23       	and	r24, r24
    50aa:	8c f4       	brge	.+34     	; 0x50ce <MoveSnake+0x5ea>
			snakeArr[index].posY = 19;
    50ac:	89 81       	ldd	r24, Y+1	; 0x01
    50ae:	28 2f       	mov	r18, r24
    50b0:	33 27       	eor	r19, r19
    50b2:	27 fd       	sbrc	r18, 7
    50b4:	30 95       	com	r19
    50b6:	c9 01       	movw	r24, r18
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	82 0f       	add	r24, r18
    50be:	93 1f       	adc	r25, r19
    50c0:	88 0f       	add	r24, r24
    50c2:	99 1f       	adc	r25, r25
    50c4:	fc 01       	movw	r30, r24
    50c6:	e2 5a       	subi	r30, 0xA2	; 162
    50c8:	fe 4f       	sbci	r31, 0xFE	; 254
    50ca:	83 e1       	ldi	r24, 0x13	; 19
    50cc:	80 83       	st	Z, r24
		}

		LCD_voidDisplaySpecialChar(snakeArr[index].shape, cgRamIndex, (u8)snakeArr[index].posX, (u8)snakeArr[index].posY);
    50ce:	89 81       	ldd	r24, Y+1	; 0x01
    50d0:	28 2f       	mov	r18, r24
    50d2:	33 27       	eor	r19, r19
    50d4:	27 fd       	sbrc	r18, 7
    50d6:	30 95       	com	r19
    50d8:	c9 01       	movw	r24, r18
    50da:	88 0f       	add	r24, r24
    50dc:	99 1f       	adc	r25, r25
    50de:	82 0f       	add	r24, r18
    50e0:	93 1f       	adc	r25, r19
    50e2:	88 0f       	add	r24, r24
    50e4:	99 1f       	adc	r25, r25
    50e6:	fc 01       	movw	r30, r24
    50e8:	e1 5a       	subi	r30, 0xA1	; 161
    50ea:	fe 4f       	sbci	r31, 0xFE	; 254
    50ec:	40 81       	ld	r20, Z
    50ee:	51 81       	ldd	r21, Z+1	; 0x01
    50f0:	60 91 06 01 	lds	r22, 0x0106
    50f4:	89 81       	ldd	r24, Y+1	; 0x01
    50f6:	28 2f       	mov	r18, r24
    50f8:	33 27       	eor	r19, r19
    50fa:	27 fd       	sbrc	r18, 7
    50fc:	30 95       	com	r19
    50fe:	c9 01       	movw	r24, r18
    5100:	88 0f       	add	r24, r24
    5102:	99 1f       	adc	r25, r25
    5104:	82 0f       	add	r24, r18
    5106:	93 1f       	adc	r25, r19
    5108:	01 96       	adiw	r24, 0x01	; 1
    510a:	88 0f       	add	r24, r24
    510c:	99 1f       	adc	r25, r25
    510e:	fc 01       	movw	r30, r24
    5110:	e5 5a       	subi	r30, 0xA5	; 165
    5112:	fe 4f       	sbci	r31, 0xFE	; 254
    5114:	80 81       	ld	r24, Z
    5116:	78 2f       	mov	r23, r24
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	28 2f       	mov	r18, r24
    511c:	33 27       	eor	r19, r19
    511e:	27 fd       	sbrc	r18, 7
    5120:	30 95       	com	r19
    5122:	c9 01       	movw	r24, r18
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	82 0f       	add	r24, r18
    512a:	93 1f       	adc	r25, r19
    512c:	88 0f       	add	r24, r24
    512e:	99 1f       	adc	r25, r25
    5130:	fc 01       	movw	r30, r24
    5132:	e2 5a       	subi	r30, 0xA2	; 162
    5134:	fe 4f       	sbci	r31, 0xFE	; 254
    5136:	80 81       	ld	r24, Z
    5138:	28 2f       	mov	r18, r24
    513a:	ca 01       	movw	r24, r20
    513c:	47 2f       	mov	r20, r23
    513e:	0e 94 48 20 	call	0x4090	; 0x4090 <LCD_voidDisplaySpecialChar>

		index--;
    5142:	89 81       	ldd	r24, Y+1	; 0x01
    5144:	81 50       	subi	r24, 0x01	; 1
    5146:	89 83       	std	Y+1, r24	; 0x01
}
void MoveSnake(){
	s8 index = 0;
	index = currentSize - 1;
	posArr[snakeArr[index].posX][snakeArr[index].posY] = 0;
	while(index >= 0){
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	88 23       	and	r24, r24
    514c:	0c f0       	brlt	.+2      	; 0x5150 <MoveSnake+0x66c>
    514e:	12 cd       	rjmp	.-1500   	; 0x4b74 <MoveSnake+0x90>

		LCD_voidDisplaySpecialChar(snakeArr[index].shape, cgRamIndex, (u8)snakeArr[index].posX, (u8)snakeArr[index].posY);

		index--;
	}
}
    5150:	0f 90       	pop	r0
    5152:	cf 91       	pop	r28
    5154:	df 91       	pop	r29
    5156:	1f 91       	pop	r17
    5158:	0f 91       	pop	r16
    515a:	08 95       	ret

0000515c <FindShape>:

u8* FindShape(u8 currentDir, u8 nextDir){
    515c:	df 93       	push	r29
    515e:	cf 93       	push	r28
    5160:	00 d0       	rcall	.+0      	; 0x5162 <FindShape+0x6>
    5162:	00 d0       	rcall	.+0      	; 0x5164 <FindShape+0x8>
    5164:	0f 92       	push	r0
    5166:	cd b7       	in	r28, 0x3d	; 61
    5168:	de b7       	in	r29, 0x3e	; 62
    516a:	8a 83       	std	Y+2, r24	; 0x02
    516c:	6b 83       	std	Y+3, r22	; 0x03
	u8 index = 0;
    516e:	19 82       	std	Y+1, r1	; 0x01
	switch(currentDir){
    5170:	8a 81       	ldd	r24, Y+2	; 0x02
    5172:	28 2f       	mov	r18, r24
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	3d 83       	std	Y+5, r19	; 0x05
    5178:	2c 83       	std	Y+4, r18	; 0x04
    517a:	8c 81       	ldd	r24, Y+4	; 0x04
    517c:	9d 81       	ldd	r25, Y+5	; 0x05
    517e:	81 30       	cpi	r24, 0x01	; 1
    5180:	91 05       	cpc	r25, r1
    5182:	89 f1       	breq	.+98     	; 0x51e6 <FindShape+0x8a>
    5184:	2c 81       	ldd	r18, Y+4	; 0x04
    5186:	3d 81       	ldd	r19, Y+5	; 0x05
    5188:	22 30       	cpi	r18, 0x02	; 2
    518a:	31 05       	cpc	r19, r1
    518c:	2c f4       	brge	.+10     	; 0x5198 <FindShape+0x3c>
    518e:	8c 81       	ldd	r24, Y+4	; 0x04
    5190:	9d 81       	ldd	r25, Y+5	; 0x05
    5192:	00 97       	sbiw	r24, 0x00	; 0
    5194:	69 f0       	breq	.+26     	; 0x51b0 <FindShape+0x54>
    5196:	6a c0       	rjmp	.+212    	; 0x526c <FindShape+0x110>
    5198:	2c 81       	ldd	r18, Y+4	; 0x04
    519a:	3d 81       	ldd	r19, Y+5	; 0x05
    519c:	22 30       	cpi	r18, 0x02	; 2
    519e:	31 05       	cpc	r19, r1
    51a0:	e1 f1       	breq	.+120    	; 0x521a <FindShape+0xbe>
    51a2:	8c 81       	ldd	r24, Y+4	; 0x04
    51a4:	9d 81       	ldd	r25, Y+5	; 0x05
    51a6:	83 30       	cpi	r24, 0x03	; 3
    51a8:	91 05       	cpc	r25, r1
    51aa:	09 f4       	brne	.+2      	; 0x51ae <FindShape+0x52>
    51ac:	4b c0       	rjmp	.+150    	; 0x5244 <FindShape+0xe8>
    51ae:	5e c0       	rjmp	.+188    	; 0x526c <FindShape+0x110>
	case Right:
		if(nextDir == Right){
    51b0:	8b 81       	ldd	r24, Y+3	; 0x03
    51b2:	88 23       	and	r24, r24
    51b4:	29 f4       	brne	.+10     	; 0x51c0 <FindShape+0x64>
			index = RightLeft;
    51b6:	19 82       	std	Y+1, r1	; 0x01
			cgRamIndex = 4;
    51b8:	84 e0       	ldi	r24, 0x04	; 4
    51ba:	80 93 06 01 	sts	0x0106, r24
    51be:	56 c0       	rjmp	.+172    	; 0x526c <FindShape+0x110>
		}
		else if(nextDir == Up){
    51c0:	8b 81       	ldd	r24, Y+3	; 0x03
    51c2:	82 30       	cpi	r24, 0x02	; 2
    51c4:	31 f4       	brne	.+12     	; 0x51d2 <FindShape+0x76>
			index = RightLeft_Up;
    51c6:	83 e0       	ldi	r24, 0x03	; 3
    51c8:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 5;
    51ca:	85 e0       	ldi	r24, 0x05	; 5
    51cc:	80 93 06 01 	sts	0x0106, r24
    51d0:	4d c0       	rjmp	.+154    	; 0x526c <FindShape+0x110>
		}
		else if(nextDir == Down){
    51d2:	8b 81       	ldd	r24, Y+3	; 0x03
    51d4:	83 30       	cpi	r24, 0x03	; 3
    51d6:	09 f0       	breq	.+2      	; 0x51da <FindShape+0x7e>
    51d8:	49 c0       	rjmp	.+146    	; 0x526c <FindShape+0x110>
			index =  RightLeft_Down;
    51da:	82 e0       	ldi	r24, 0x02	; 2
    51dc:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 6;
    51de:	86 e0       	ldi	r24, 0x06	; 6
    51e0:	80 93 06 01 	sts	0x0106, r24
    51e4:	43 c0       	rjmp	.+134    	; 0x526c <FindShape+0x110>
		}
		break;
	case Left:
		if(nextDir == Left){
    51e6:	8b 81       	ldd	r24, Y+3	; 0x03
    51e8:	81 30       	cpi	r24, 0x01	; 1
    51ea:	29 f4       	brne	.+10     	; 0x51f6 <FindShape+0x9a>
			index = RightLeft;
    51ec:	19 82       	std	Y+1, r1	; 0x01
			cgRamIndex = 4;
    51ee:	84 e0       	ldi	r24, 0x04	; 4
    51f0:	80 93 06 01 	sts	0x0106, r24
    51f4:	3b c0       	rjmp	.+118    	; 0x526c <FindShape+0x110>
		}
		else if(nextDir == Up){
    51f6:	8b 81       	ldd	r24, Y+3	; 0x03
    51f8:	82 30       	cpi	r24, 0x02	; 2
    51fa:	31 f4       	brne	.+12     	; 0x5208 <FindShape+0xac>
			index = RightLeft_Up;
    51fc:	83 e0       	ldi	r24, 0x03	; 3
    51fe:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 5;
    5200:	85 e0       	ldi	r24, 0x05	; 5
    5202:	80 93 06 01 	sts	0x0106, r24
    5206:	32 c0       	rjmp	.+100    	; 0x526c <FindShape+0x110>
		}
		else if(nextDir == Down){
    5208:	8b 81       	ldd	r24, Y+3	; 0x03
    520a:	83 30       	cpi	r24, 0x03	; 3
    520c:	79 f5       	brne	.+94     	; 0x526c <FindShape+0x110>
			index =  RightLeft_Down;
    520e:	82 e0       	ldi	r24, 0x02	; 2
    5210:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 6;
    5212:	86 e0       	ldi	r24, 0x06	; 6
    5214:	80 93 06 01 	sts	0x0106, r24
    5218:	29 c0       	rjmp	.+82     	; 0x526c <FindShape+0x110>
		}
		break;
	case Up:
		if(nextDir == Right || nextDir == Left){
    521a:	8b 81       	ldd	r24, Y+3	; 0x03
    521c:	88 23       	and	r24, r24
    521e:	19 f0       	breq	.+6      	; 0x5226 <FindShape+0xca>
    5220:	8b 81       	ldd	r24, Y+3	; 0x03
    5222:	81 30       	cpi	r24, 0x01	; 1
    5224:	31 f4       	brne	.+12     	; 0x5232 <FindShape+0xd6>
			index =  Up_RightLeft;
    5226:	82 e0       	ldi	r24, 0x02	; 2
    5228:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 6;
    522a:	86 e0       	ldi	r24, 0x06	; 6
    522c:	80 93 06 01 	sts	0x0106, r24
    5230:	1d c0       	rjmp	.+58     	; 0x526c <FindShape+0x110>
		}
		else if(nextDir == Up){
    5232:	8b 81       	ldd	r24, Y+3	; 0x03
    5234:	82 30       	cpi	r24, 0x02	; 2
    5236:	d1 f4       	brne	.+52     	; 0x526c <FindShape+0x110>
			index =  UpDown;
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 7;
    523c:	87 e0       	ldi	r24, 0x07	; 7
    523e:	80 93 06 01 	sts	0x0106, r24
    5242:	14 c0       	rjmp	.+40     	; 0x526c <FindShape+0x110>
		}
		break;
	case Down:
		if(nextDir == Right || nextDir == Left){
    5244:	8b 81       	ldd	r24, Y+3	; 0x03
    5246:	88 23       	and	r24, r24
    5248:	19 f0       	breq	.+6      	; 0x5250 <FindShape+0xf4>
    524a:	8b 81       	ldd	r24, Y+3	; 0x03
    524c:	81 30       	cpi	r24, 0x01	; 1
    524e:	31 f4       	brne	.+12     	; 0x525c <FindShape+0x100>
			index =  Down_RightLeft;
    5250:	83 e0       	ldi	r24, 0x03	; 3
    5252:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 5;
    5254:	85 e0       	ldi	r24, 0x05	; 5
    5256:	80 93 06 01 	sts	0x0106, r24
    525a:	08 c0       	rjmp	.+16     	; 0x526c <FindShape+0x110>
		}
		else if(nextDir == Down){
    525c:	8b 81       	ldd	r24, Y+3	; 0x03
    525e:	83 30       	cpi	r24, 0x03	; 3
    5260:	29 f4       	brne	.+10     	; 0x526c <FindShape+0x110>
			index =  UpDown;
    5262:	81 e0       	ldi	r24, 0x01	; 1
    5264:	89 83       	std	Y+1, r24	; 0x01
			cgRamIndex = 7;
    5266:	87 e0       	ldi	r24, 0x07	; 7
    5268:	80 93 06 01 	sts	0x0106, r24
		}
		break;
	}
	return Body[index];
    526c:	23 ea       	ldi	r18, 0xA3	; 163
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	89 81       	ldd	r24, Y+1	; 0x01
    5272:	88 2f       	mov	r24, r24
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	88 0f       	add	r24, r24
    5278:	99 1f       	adc	r25, r25
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	88 0f       	add	r24, r24
    5280:	99 1f       	adc	r25, r25
    5282:	82 0f       	add	r24, r18
    5284:	93 1f       	adc	r25, r19
}
    5286:	0f 90       	pop	r0
    5288:	0f 90       	pop	r0
    528a:	0f 90       	pop	r0
    528c:	0f 90       	pop	r0
    528e:	0f 90       	pop	r0
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <ResetPositionArr>:

void ResetPositionArr(){
    5296:	df 93       	push	r29
    5298:	cf 93       	push	r28
    529a:	00 d0       	rcall	.+0      	; 0x529c <ResetPositionArr+0x6>
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
	u8 x= 0;
    52a0:	1a 82       	std	Y+2, r1	; 0x02
	u8 y =0;
    52a2:	19 82       	std	Y+1, r1	; 0x01
	for(x =0; x < 4; x++){
    52a4:	1a 82       	std	Y+2, r1	; 0x02
    52a6:	23 c0       	rjmp	.+70     	; 0x52ee <ResetPositionArr+0x58>
		for(y=0; y < 20; y++){
    52a8:	19 82       	std	Y+1, r1	; 0x01
    52aa:	1b c0       	rjmp	.+54     	; 0x52e2 <ResetPositionArr+0x4c>
			posArr[x][y] = 0;
    52ac:	8a 81       	ldd	r24, Y+2	; 0x02
    52ae:	28 2f       	mov	r18, r24
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	48 2f       	mov	r20, r24
    52b6:	50 e0       	ldi	r21, 0x00	; 0
    52b8:	c9 01       	movw	r24, r18
    52ba:	88 0f       	add	r24, r24
    52bc:	99 1f       	adc	r25, r25
    52be:	88 0f       	add	r24, r24
    52c0:	99 1f       	adc	r25, r25
    52c2:	9c 01       	movw	r18, r24
    52c4:	22 0f       	add	r18, r18
    52c6:	33 1f       	adc	r19, r19
    52c8:	22 0f       	add	r18, r18
    52ca:	33 1f       	adc	r19, r19
    52cc:	82 0f       	add	r24, r18
    52ce:	93 1f       	adc	r25, r19
    52d0:	84 0f       	add	r24, r20
    52d2:	95 1f       	adc	r25, r21
    52d4:	fc 01       	movw	r30, r24
    52d6:	e5 5f       	subi	r30, 0xF5	; 245
    52d8:	fe 4f       	sbci	r31, 0xFE	; 254
    52da:	10 82       	st	Z, r1

void ResetPositionArr(){
	u8 x= 0;
	u8 y =0;
	for(x =0; x < 4; x++){
		for(y=0; y < 20; y++){
    52dc:	89 81       	ldd	r24, Y+1	; 0x01
    52de:	8f 5f       	subi	r24, 0xFF	; 255
    52e0:	89 83       	std	Y+1, r24	; 0x01
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	84 31       	cpi	r24, 0x14	; 20
    52e6:	10 f3       	brcs	.-60     	; 0x52ac <ResetPositionArr+0x16>
}

void ResetPositionArr(){
	u8 x= 0;
	u8 y =0;
	for(x =0; x < 4; x++){
    52e8:	8a 81       	ldd	r24, Y+2	; 0x02
    52ea:	8f 5f       	subi	r24, 0xFF	; 255
    52ec:	8a 83       	std	Y+2, r24	; 0x02
    52ee:	8a 81       	ldd	r24, Y+2	; 0x02
    52f0:	84 30       	cpi	r24, 0x04	; 4
    52f2:	d0 f2       	brcs	.-76     	; 0x52a8 <ResetPositionArr+0x12>
		for(y=0; y < 20; y++){
			posArr[x][y] = 0;
		}
	}
}
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	cf 91       	pop	r28
    52fa:	df 91       	pop	r29
    52fc:	08 95       	ret

000052fe <SpawnFood>:

void SpawnFood(){
    52fe:	df 93       	push	r29
    5300:	cf 93       	push	r28
    5302:	00 d0       	rcall	.+0      	; 0x5304 <SpawnFood+0x6>
    5304:	cd b7       	in	r28, 0x3d	; 61
    5306:	de b7       	in	r29, 0x3e	; 62
	u8 oldfoodX = foodX;
    5308:	80 91 08 01 	lds	r24, 0x0108
    530c:	8a 83       	std	Y+2, r24	; 0x02
	u8 oldfoodY = foodY;
    530e:	80 91 09 01 	lds	r24, 0x0109
    5312:	89 83       	std	Y+1, r24	; 0x01
    5314:	0c c0       	rjmp	.+24     	; 0x532e <SpawnFood+0x30>
	while(oldfoodX == foodX && oldfoodY == foodY){
		foodX = Random(0,3);
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	63 e0       	ldi	r22, 0x03	; 3
    531a:	0e 94 ce 29 	call	0x539c	; 0x539c <Random>
    531e:	80 93 08 01 	sts	0x0108, r24
		foodY = Random(0,19);
    5322:	80 e0       	ldi	r24, 0x00	; 0
    5324:	63 e1       	ldi	r22, 0x13	; 19
    5326:	0e 94 ce 29 	call	0x539c	; 0x539c <Random>
    532a:	80 93 09 01 	sts	0x0109, r24
}

void SpawnFood(){
	u8 oldfoodX = foodX;
	u8 oldfoodY = foodY;
	while(oldfoodX == foodX && oldfoodY == foodY){
    532e:	90 91 08 01 	lds	r25, 0x0108
    5332:	8a 81       	ldd	r24, Y+2	; 0x02
    5334:	89 17       	cp	r24, r25
    5336:	29 f4       	brne	.+10     	; 0x5342 <SpawnFood+0x44>
    5338:	90 91 09 01 	lds	r25, 0x0109
    533c:	89 81       	ldd	r24, Y+1	; 0x01
    533e:	89 17       	cp	r24, r25
    5340:	51 f3       	breq	.-44     	; 0x5316 <SpawnFood+0x18>
		foodX = Random(0,3);
		foodY = Random(0,19);
	}
}
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	cf 91       	pop	r28
    5348:	df 91       	pop	r29
    534a:	08 95       	ret

0000534c <UpdateSize>:

void UpdateSize(){
    534c:	df 93       	push	r29
    534e:	cf 93       	push	r28
    5350:	cd b7       	in	r28, 0x3d	; 61
    5352:	de b7       	in	r29, 0x3e	; 62
	if(snakeArr[0].posX == foodX && snakeArr[0].posY == foodY){
    5354:	80 91 5d 01 	lds	r24, 0x015D
    5358:	28 2f       	mov	r18, r24
    535a:	33 27       	eor	r19, r19
    535c:	27 fd       	sbrc	r18, 7
    535e:	30 95       	com	r19
    5360:	80 91 08 01 	lds	r24, 0x0108
    5364:	88 2f       	mov	r24, r24
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	28 17       	cp	r18, r24
    536a:	39 07       	cpc	r19, r25
    536c:	a1 f4       	brne	.+40     	; 0x5396 <UpdateSize+0x4a>
    536e:	80 91 5e 01 	lds	r24, 0x015E
    5372:	28 2f       	mov	r18, r24
    5374:	33 27       	eor	r19, r19
    5376:	27 fd       	sbrc	r18, 7
    5378:	30 95       	com	r19
    537a:	80 91 09 01 	lds	r24, 0x0109
    537e:	88 2f       	mov	r24, r24
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	28 17       	cp	r18, r24
    5384:	39 07       	cpc	r19, r25
    5386:	39 f4       	brne	.+14     	; 0x5396 <UpdateSize+0x4a>
		currentSize++;
    5388:	80 91 81 00 	lds	r24, 0x0081
    538c:	8f 5f       	subi	r24, 0xFF	; 255
    538e:	80 93 81 00 	sts	0x0081, r24
		foodAvailable = 0;
    5392:	10 92 0a 01 	sts	0x010A, r1
	}
}
    5396:	cf 91       	pop	r28
    5398:	df 91       	pop	r29
    539a:	08 95       	ret

0000539c <Random>:

u8 Random(u8 lower, u8 upper){
    539c:	df 93       	push	r29
    539e:	cf 93       	push	r28
    53a0:	00 d0       	rcall	.+0      	; 0x53a2 <Random+0x6>
    53a2:	0f 92       	push	r0
    53a4:	cd b7       	in	r28, 0x3d	; 61
    53a6:	de b7       	in	r29, 0x3e	; 62
    53a8:	8a 83       	std	Y+2, r24	; 0x02
    53aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 num = (rand() %  (upper - lower + 1)) + lower;
    53ac:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <rand>
    53b0:	ac 01       	movw	r20, r24
    53b2:	8b 81       	ldd	r24, Y+3	; 0x03
    53b4:	28 2f       	mov	r18, r24
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ba:	88 2f       	mov	r24, r24
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	b9 01       	movw	r22, r18
    53c0:	68 1b       	sub	r22, r24
    53c2:	79 0b       	sbc	r23, r25
    53c4:	cb 01       	movw	r24, r22
    53c6:	9c 01       	movw	r18, r24
    53c8:	2f 5f       	subi	r18, 0xFF	; 255
    53ca:	3f 4f       	sbci	r19, 0xFF	; 255
    53cc:	ca 01       	movw	r24, r20
    53ce:	b9 01       	movw	r22, r18
    53d0:	0e 94 02 2a 	call	0x5404	; 0x5404 <__divmodhi4>
    53d4:	98 2f       	mov	r25, r24
    53d6:	8a 81       	ldd	r24, Y+2	; 0x02
    53d8:	89 0f       	add	r24, r25
    53da:	89 83       	std	Y+1, r24	; 0x01
	return num;
    53dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	cf 91       	pop	r28
    53e6:	df 91       	pop	r29
    53e8:	08 95       	ret

000053ea <__divmodqi4>:
    53ea:	87 fb       	bst	r24, 7
    53ec:	08 2e       	mov	r0, r24
    53ee:	06 26       	eor	r0, r22
    53f0:	87 fd       	sbrc	r24, 7
    53f2:	81 95       	neg	r24
    53f4:	67 fd       	sbrc	r22, 7
    53f6:	61 95       	neg	r22
    53f8:	33 d0       	rcall	.+102    	; 0x5460 <__udivmodqi4>
    53fa:	0e f4       	brtc	.+2      	; 0x53fe <__divmodqi4_1>
    53fc:	91 95       	neg	r25

000053fe <__divmodqi4_1>:
    53fe:	07 fc       	sbrc	r0, 7
    5400:	81 95       	neg	r24

00005402 <__divmodqi4_exit>:
    5402:	08 95       	ret

00005404 <__divmodhi4>:
    5404:	97 fb       	bst	r25, 7
    5406:	09 2e       	mov	r0, r25
    5408:	07 26       	eor	r0, r23
    540a:	0a d0       	rcall	.+20     	; 0x5420 <__divmodhi4_neg1>
    540c:	77 fd       	sbrc	r23, 7
    540e:	04 d0       	rcall	.+8      	; 0x5418 <__divmodhi4_neg2>
    5410:	33 d0       	rcall	.+102    	; 0x5478 <__udivmodhi4>
    5412:	06 d0       	rcall	.+12     	; 0x5420 <__divmodhi4_neg1>
    5414:	00 20       	and	r0, r0
    5416:	1a f4       	brpl	.+6      	; 0x541e <__divmodhi4_exit>

00005418 <__divmodhi4_neg2>:
    5418:	70 95       	com	r23
    541a:	61 95       	neg	r22
    541c:	7f 4f       	sbci	r23, 0xFF	; 255

0000541e <__divmodhi4_exit>:
    541e:	08 95       	ret

00005420 <__divmodhi4_neg1>:
    5420:	f6 f7       	brtc	.-4      	; 0x541e <__divmodhi4_exit>
    5422:	90 95       	com	r25
    5424:	81 95       	neg	r24
    5426:	9f 4f       	sbci	r25, 0xFF	; 255
    5428:	08 95       	ret

0000542a <__divmodsi4>:
    542a:	97 fb       	bst	r25, 7
    542c:	09 2e       	mov	r0, r25
    542e:	05 26       	eor	r0, r21
    5430:	0e d0       	rcall	.+28     	; 0x544e <__divmodsi4_neg1>
    5432:	57 fd       	sbrc	r21, 7
    5434:	04 d0       	rcall	.+8      	; 0x543e <__divmodsi4_neg2>
    5436:	34 d0       	rcall	.+104    	; 0x54a0 <__udivmodsi4>
    5438:	0a d0       	rcall	.+20     	; 0x544e <__divmodsi4_neg1>
    543a:	00 1c       	adc	r0, r0
    543c:	38 f4       	brcc	.+14     	; 0x544c <__divmodsi4_exit>

0000543e <__divmodsi4_neg2>:
    543e:	50 95       	com	r21
    5440:	40 95       	com	r20
    5442:	30 95       	com	r19
    5444:	21 95       	neg	r18
    5446:	3f 4f       	sbci	r19, 0xFF	; 255
    5448:	4f 4f       	sbci	r20, 0xFF	; 255
    544a:	5f 4f       	sbci	r21, 0xFF	; 255

0000544c <__divmodsi4_exit>:
    544c:	08 95       	ret

0000544e <__divmodsi4_neg1>:
    544e:	f6 f7       	brtc	.-4      	; 0x544c <__divmodsi4_exit>
    5450:	90 95       	com	r25
    5452:	80 95       	com	r24
    5454:	70 95       	com	r23
    5456:	61 95       	neg	r22
    5458:	7f 4f       	sbci	r23, 0xFF	; 255
    545a:	8f 4f       	sbci	r24, 0xFF	; 255
    545c:	9f 4f       	sbci	r25, 0xFF	; 255
    545e:	08 95       	ret

00005460 <__udivmodqi4>:
    5460:	99 1b       	sub	r25, r25
    5462:	79 e0       	ldi	r23, 0x09	; 9
    5464:	04 c0       	rjmp	.+8      	; 0x546e <__udivmodqi4_ep>

00005466 <__udivmodqi4_loop>:
    5466:	99 1f       	adc	r25, r25
    5468:	96 17       	cp	r25, r22
    546a:	08 f0       	brcs	.+2      	; 0x546e <__udivmodqi4_ep>
    546c:	96 1b       	sub	r25, r22

0000546e <__udivmodqi4_ep>:
    546e:	88 1f       	adc	r24, r24
    5470:	7a 95       	dec	r23
    5472:	c9 f7       	brne	.-14     	; 0x5466 <__udivmodqi4_loop>
    5474:	80 95       	com	r24
    5476:	08 95       	ret

00005478 <__udivmodhi4>:
    5478:	aa 1b       	sub	r26, r26
    547a:	bb 1b       	sub	r27, r27
    547c:	51 e1       	ldi	r21, 0x11	; 17
    547e:	07 c0       	rjmp	.+14     	; 0x548e <__udivmodhi4_ep>

00005480 <__udivmodhi4_loop>:
    5480:	aa 1f       	adc	r26, r26
    5482:	bb 1f       	adc	r27, r27
    5484:	a6 17       	cp	r26, r22
    5486:	b7 07       	cpc	r27, r23
    5488:	10 f0       	brcs	.+4      	; 0x548e <__udivmodhi4_ep>
    548a:	a6 1b       	sub	r26, r22
    548c:	b7 0b       	sbc	r27, r23

0000548e <__udivmodhi4_ep>:
    548e:	88 1f       	adc	r24, r24
    5490:	99 1f       	adc	r25, r25
    5492:	5a 95       	dec	r21
    5494:	a9 f7       	brne	.-22     	; 0x5480 <__udivmodhi4_loop>
    5496:	80 95       	com	r24
    5498:	90 95       	com	r25
    549a:	bc 01       	movw	r22, r24
    549c:	cd 01       	movw	r24, r26
    549e:	08 95       	ret

000054a0 <__udivmodsi4>:
    54a0:	a1 e2       	ldi	r26, 0x21	; 33
    54a2:	1a 2e       	mov	r1, r26
    54a4:	aa 1b       	sub	r26, r26
    54a6:	bb 1b       	sub	r27, r27
    54a8:	fd 01       	movw	r30, r26
    54aa:	0d c0       	rjmp	.+26     	; 0x54c6 <__udivmodsi4_ep>

000054ac <__udivmodsi4_loop>:
    54ac:	aa 1f       	adc	r26, r26
    54ae:	bb 1f       	adc	r27, r27
    54b0:	ee 1f       	adc	r30, r30
    54b2:	ff 1f       	adc	r31, r31
    54b4:	a2 17       	cp	r26, r18
    54b6:	b3 07       	cpc	r27, r19
    54b8:	e4 07       	cpc	r30, r20
    54ba:	f5 07       	cpc	r31, r21
    54bc:	20 f0       	brcs	.+8      	; 0x54c6 <__udivmodsi4_ep>
    54be:	a2 1b       	sub	r26, r18
    54c0:	b3 0b       	sbc	r27, r19
    54c2:	e4 0b       	sbc	r30, r20
    54c4:	f5 0b       	sbc	r31, r21

000054c6 <__udivmodsi4_ep>:
    54c6:	66 1f       	adc	r22, r22
    54c8:	77 1f       	adc	r23, r23
    54ca:	88 1f       	adc	r24, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	1a 94       	dec	r1
    54d0:	69 f7       	brne	.-38     	; 0x54ac <__udivmodsi4_loop>
    54d2:	60 95       	com	r22
    54d4:	70 95       	com	r23
    54d6:	80 95       	com	r24
    54d8:	90 95       	com	r25
    54da:	9b 01       	movw	r18, r22
    54dc:	ac 01       	movw	r20, r24
    54de:	bd 01       	movw	r22, r26
    54e0:	cf 01       	movw	r24, r30
    54e2:	08 95       	ret

000054e4 <__prologue_saves__>:
    54e4:	2f 92       	push	r2
    54e6:	3f 92       	push	r3
    54e8:	4f 92       	push	r4
    54ea:	5f 92       	push	r5
    54ec:	6f 92       	push	r6
    54ee:	7f 92       	push	r7
    54f0:	8f 92       	push	r8
    54f2:	9f 92       	push	r9
    54f4:	af 92       	push	r10
    54f6:	bf 92       	push	r11
    54f8:	cf 92       	push	r12
    54fa:	df 92       	push	r13
    54fc:	ef 92       	push	r14
    54fe:	ff 92       	push	r15
    5500:	0f 93       	push	r16
    5502:	1f 93       	push	r17
    5504:	cf 93       	push	r28
    5506:	df 93       	push	r29
    5508:	cd b7       	in	r28, 0x3d	; 61
    550a:	de b7       	in	r29, 0x3e	; 62
    550c:	ca 1b       	sub	r28, r26
    550e:	db 0b       	sbc	r29, r27
    5510:	0f b6       	in	r0, 0x3f	; 63
    5512:	f8 94       	cli
    5514:	de bf       	out	0x3e, r29	; 62
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	cd bf       	out	0x3d, r28	; 61
    551a:	09 94       	ijmp

0000551c <__epilogue_restores__>:
    551c:	2a 88       	ldd	r2, Y+18	; 0x12
    551e:	39 88       	ldd	r3, Y+17	; 0x11
    5520:	48 88       	ldd	r4, Y+16	; 0x10
    5522:	5f 84       	ldd	r5, Y+15	; 0x0f
    5524:	6e 84       	ldd	r6, Y+14	; 0x0e
    5526:	7d 84       	ldd	r7, Y+13	; 0x0d
    5528:	8c 84       	ldd	r8, Y+12	; 0x0c
    552a:	9b 84       	ldd	r9, Y+11	; 0x0b
    552c:	aa 84       	ldd	r10, Y+10	; 0x0a
    552e:	b9 84       	ldd	r11, Y+9	; 0x09
    5530:	c8 84       	ldd	r12, Y+8	; 0x08
    5532:	df 80       	ldd	r13, Y+7	; 0x07
    5534:	ee 80       	ldd	r14, Y+6	; 0x06
    5536:	fd 80       	ldd	r15, Y+5	; 0x05
    5538:	0c 81       	ldd	r16, Y+4	; 0x04
    553a:	1b 81       	ldd	r17, Y+3	; 0x03
    553c:	aa 81       	ldd	r26, Y+2	; 0x02
    553e:	b9 81       	ldd	r27, Y+1	; 0x01
    5540:	ce 0f       	add	r28, r30
    5542:	d1 1d       	adc	r29, r1
    5544:	0f b6       	in	r0, 0x3f	; 63
    5546:	f8 94       	cli
    5548:	de bf       	out	0x3e, r29	; 62
    554a:	0f be       	out	0x3f, r0	; 63
    554c:	cd bf       	out	0x3d, r28	; 61
    554e:	ed 01       	movw	r28, r26
    5550:	08 95       	ret

00005552 <do_rand>:
    5552:	a0 e0       	ldi	r26, 0x00	; 0
    5554:	b0 e0       	ldi	r27, 0x00	; 0
    5556:	ef ea       	ldi	r30, 0xAF	; 175
    5558:	fa e2       	ldi	r31, 0x2A	; 42
    555a:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__prologue_saves__+0x10>
    555e:	ec 01       	movw	r28, r24
    5560:	a8 80       	ld	r10, Y
    5562:	b9 80       	ldd	r11, Y+1	; 0x01
    5564:	ca 80       	ldd	r12, Y+2	; 0x02
    5566:	db 80       	ldd	r13, Y+3	; 0x03
    5568:	a1 14       	cp	r10, r1
    556a:	b1 04       	cpc	r11, r1
    556c:	c1 04       	cpc	r12, r1
    556e:	d1 04       	cpc	r13, r1
    5570:	41 f4       	brne	.+16     	; 0x5582 <do_rand+0x30>
    5572:	84 e2       	ldi	r24, 0x24	; 36
    5574:	a8 2e       	mov	r10, r24
    5576:	89 ed       	ldi	r24, 0xD9	; 217
    5578:	b8 2e       	mov	r11, r24
    557a:	8b e5       	ldi	r24, 0x5B	; 91
    557c:	c8 2e       	mov	r12, r24
    557e:	87 e0       	ldi	r24, 0x07	; 7
    5580:	d8 2e       	mov	r13, r24
    5582:	c6 01       	movw	r24, r12
    5584:	b5 01       	movw	r22, r10
    5586:	2d e1       	ldi	r18, 0x1D	; 29
    5588:	33 ef       	ldi	r19, 0xF3	; 243
    558a:	41 e0       	ldi	r20, 0x01	; 1
    558c:	50 e0       	ldi	r21, 0x00	; 0
    558e:	0e 94 15 2a 	call	0x542a	; 0x542a <__divmodsi4>
    5592:	27 ea       	ldi	r18, 0xA7	; 167
    5594:	31 e4       	ldi	r19, 0x41	; 65
    5596:	40 e0       	ldi	r20, 0x00	; 0
    5598:	50 e0       	ldi	r21, 0x00	; 0
    559a:	0e 94 0a 2b 	call	0x5614	; 0x5614 <__mulsi3>
    559e:	7b 01       	movw	r14, r22
    55a0:	8c 01       	movw	r16, r24
    55a2:	c6 01       	movw	r24, r12
    55a4:	b5 01       	movw	r22, r10
    55a6:	2d e1       	ldi	r18, 0x1D	; 29
    55a8:	33 ef       	ldi	r19, 0xF3	; 243
    55aa:	41 e0       	ldi	r20, 0x01	; 1
    55ac:	50 e0       	ldi	r21, 0x00	; 0
    55ae:	0e 94 15 2a 	call	0x542a	; 0x542a <__divmodsi4>
    55b2:	ca 01       	movw	r24, r20
    55b4:	b9 01       	movw	r22, r18
    55b6:	2c ee       	ldi	r18, 0xEC	; 236
    55b8:	34 ef       	ldi	r19, 0xF4	; 244
    55ba:	4f ef       	ldi	r20, 0xFF	; 255
    55bc:	5f ef       	ldi	r21, 0xFF	; 255
    55be:	0e 94 0a 2b 	call	0x5614	; 0x5614 <__mulsi3>
    55c2:	6e 0d       	add	r22, r14
    55c4:	7f 1d       	adc	r23, r15
    55c6:	80 1f       	adc	r24, r16
    55c8:	91 1f       	adc	r25, r17
    55ca:	97 ff       	sbrs	r25, 7
    55cc:	04 c0       	rjmp	.+8      	; 0x55d6 <do_rand+0x84>
    55ce:	61 50       	subi	r22, 0x01	; 1
    55d0:	70 40       	sbci	r23, 0x00	; 0
    55d2:	80 40       	sbci	r24, 0x00	; 0
    55d4:	90 48       	sbci	r25, 0x80	; 128
    55d6:	68 83       	st	Y, r22
    55d8:	79 83       	std	Y+1, r23	; 0x01
    55da:	8a 83       	std	Y+2, r24	; 0x02
    55dc:	9b 83       	std	Y+3, r25	; 0x03
    55de:	9b 01       	movw	r18, r22
    55e0:	3f 77       	andi	r19, 0x7F	; 127
    55e2:	c9 01       	movw	r24, r18
    55e4:	cd b7       	in	r28, 0x3d	; 61
    55e6:	de b7       	in	r29, 0x3e	; 62
    55e8:	ea e0       	ldi	r30, 0x0A	; 10
    55ea:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__epilogue_restores__+0x10>

000055ee <rand_r>:
    55ee:	0e 94 a9 2a 	call	0x5552	; 0x5552 <do_rand>
    55f2:	08 95       	ret

000055f4 <rand>:
    55f4:	83 e7       	ldi	r24, 0x73	; 115
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	0e 94 a9 2a 	call	0x5552	; 0x5552 <do_rand>
    55fc:	08 95       	ret

000055fe <srand>:
    55fe:	a0 e0       	ldi	r26, 0x00	; 0
    5600:	b0 e0       	ldi	r27, 0x00	; 0
    5602:	80 93 73 00 	sts	0x0073, r24
    5606:	90 93 74 00 	sts	0x0074, r25
    560a:	a0 93 75 00 	sts	0x0075, r26
    560e:	b0 93 76 00 	sts	0x0076, r27
    5612:	08 95       	ret

00005614 <__mulsi3>:
    5614:	62 9f       	mul	r22, r18
    5616:	d0 01       	movw	r26, r0
    5618:	73 9f       	mul	r23, r19
    561a:	f0 01       	movw	r30, r0
    561c:	82 9f       	mul	r24, r18
    561e:	e0 0d       	add	r30, r0
    5620:	f1 1d       	adc	r31, r1
    5622:	64 9f       	mul	r22, r20
    5624:	e0 0d       	add	r30, r0
    5626:	f1 1d       	adc	r31, r1
    5628:	92 9f       	mul	r25, r18
    562a:	f0 0d       	add	r31, r0
    562c:	83 9f       	mul	r24, r19
    562e:	f0 0d       	add	r31, r0
    5630:	74 9f       	mul	r23, r20
    5632:	f0 0d       	add	r31, r0
    5634:	65 9f       	mul	r22, r21
    5636:	f0 0d       	add	r31, r0
    5638:	99 27       	eor	r25, r25
    563a:	72 9f       	mul	r23, r18
    563c:	b0 0d       	add	r27, r0
    563e:	e1 1d       	adc	r30, r1
    5640:	f9 1f       	adc	r31, r25
    5642:	63 9f       	mul	r22, r19
    5644:	b0 0d       	add	r27, r0
    5646:	e1 1d       	adc	r30, r1
    5648:	f9 1f       	adc	r31, r25
    564a:	bd 01       	movw	r22, r26
    564c:	cf 01       	movw	r24, r30
    564e:	11 24       	eor	r1, r1
    5650:	08 95       	ret

00005652 <_exit>:
    5652:	f8 94       	cli

00005654 <__stop_program>:
    5654:	ff cf       	rjmp	.-2      	; 0x5654 <__stop_program>
