
SnakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b2  00800060  00005c8c  00005d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e6  00800212  00800212  00005ed2  2**0
                  ALLOC
  3 .stab         0000459c  00000000  00000000  00005ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001795  00000000  00000000  0000a470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000bc05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000bda5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000bf97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010900  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 24 	call	0x48ce	; 0x48ce <main>
      8a:	0c 94 44 2e 	jmp	0x5c88	; 0x5c88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 2d 	jmp	0x5b58	; 0x5b58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 2d 	jmp	0x5b70	; 0x5b70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 2d 	jmp	0x5b70	; 0x5b70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 2d 	jmp	0x5b58	; 0x5b58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 2d 	jmp	0x5b68	; 0x5b68 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b8 2d 	jmp	0x5b70	; 0x5b70 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b8 2d 	jmp	0x5b70	; 0x5b70 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b8 2d 	jmp	0x5b70	; 0x5b70 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bc 2d 	jmp	0x5b78	; 0x5b78 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d8 2d 	jmp	0x5bb0	; 0x5bb0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b4 2d 	jmp	0x5b68	; 0x5b68 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 58       	subi	r30, 0x85	; 133
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	6c ef       	ldi	r22, 0xFC	; 252
     e3a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	6f ef       	ldi	r22, 0xFF	; 255
     e42:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	6f ef       	ldi	r22, 0xFF	; 255
     e52:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	27 97       	sbiw	r28, 0x07	; 7
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02
     e74:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	85 30       	cpi	r24, 0x05	; 5
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <DIO_voidSetPinDir+0x22>
     e7c:	f4 c0       	rjmp	.+488    	; 0x1066 <DIO_voidSetPinDir+0x20a>
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	88 23       	and	r24, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_voidSetPinDir+0x2a>
     e84:	f0 c0       	rjmp	.+480    	; 0x1066 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	88 30       	cpi	r24, 0x08	; 8
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <DIO_voidSetPinDir+0x32>
     e8c:	ec c0       	rjmp	.+472    	; 0x1066 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <DIO_voidSetPinDir+0x3a>
     e94:	70 c0       	rjmp	.+224    	; 0xf76 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3f 83       	std	Y+7, r19	; 0x07
     e9e:	2e 83       	std	Y+6, r18	; 0x06
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
     ea2:	9f 81       	ldd	r25, Y+7	; 0x07
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	91 05       	cpc	r25, r1
     ea8:	51 f1       	breq	.+84     	; 0xefe <DIO_voidSetPinDir+0xa2>
     eaa:	2e 81       	ldd	r18, Y+6	; 0x06
     eac:	3f 81       	ldd	r19, Y+7	; 0x07
     eae:	23 30       	cpi	r18, 0x03	; 3
     eb0:	31 05       	cpc	r19, r1
     eb2:	34 f4       	brge	.+12     	; 0xec0 <DIO_voidSetPinDir+0x64>
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	61 f0       	breq	.+24     	; 0xed6 <DIO_voidSetPinDir+0x7a>
     ebe:	d3 c0       	rjmp	.+422    	; 0x1066 <DIO_voidSetPinDir+0x20a>
     ec0:	2e 81       	ldd	r18, Y+6	; 0x06
     ec2:	3f 81       	ldd	r19, Y+7	; 0x07
     ec4:	23 30       	cpi	r18, 0x03	; 3
     ec6:	31 05       	cpc	r19, r1
     ec8:	71 f1       	breq	.+92     	; 0xf26 <DIO_voidSetPinDir+0xca>
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	9f 81       	ldd	r25, Y+7	; 0x07
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	91 05       	cpc	r25, r1
     ed2:	e9 f1       	breq	.+122    	; 0xf4e <DIO_voidSetPinDir+0xf2>
     ed4:	c8 c0       	rjmp	.+400    	; 0x1066 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
     ed6:	aa e3       	ldi	r26, 0x3A	; 58
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ea e3       	ldi	r30, 0x3A	; 58
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_voidSetPinDir+0x98>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_voidSetPinDir+0x94>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	b4 c0       	rjmp	.+360    	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
     efe:	a7 e3       	ldi	r26, 0x37	; 55
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e3       	ldi	r30, 0x37	; 55
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_voidSetPinDir+0xc0>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_voidSetPinDir+0xbc>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	a0 c0       	rjmp	.+320    	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
     f26:	a4 e3       	ldi	r26, 0x34	; 52
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e4 e3       	ldi	r30, 0x34	; 52
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_voidSetPinDir+0xe8>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_voidSetPinDir+0xe4>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	8c c0       	rjmp	.+280    	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
     f4e:	a1 e3       	ldi	r26, 0x31	; 49
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e1 e3       	ldi	r30, 0x31	; 49
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_voidSetPinDir+0x110>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_voidSetPinDir+0x10c>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	78 c0       	rjmp	.+240    	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 23       	and	r24, r24
     f7a:	09 f0       	breq	.+2      	; 0xf7e <DIO_voidSetPinDir+0x122>
     f7c:	74 c0       	rjmp	.+232    	; 0x1066 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	3d 83       	std	Y+5, r19	; 0x05
     f86:	2c 83       	std	Y+4, r18	; 0x04
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	91 05       	cpc	r25, r1
     f90:	61 f1       	breq	.+88     	; 0xfea <DIO_voidSetPinDir+0x18e>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	23 30       	cpi	r18, 0x03	; 3
     f98:	31 05       	cpc	r19, r1
     f9a:	34 f4       	brge	.+12     	; 0xfa8 <DIO_voidSetPinDir+0x14c>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	69 f0       	breq	.+26     	; 0xfc0 <DIO_voidSetPinDir+0x164>
     fa6:	5f c0       	rjmp	.+190    	; 0x1066 <DIO_voidSetPinDir+0x20a>
     fa8:	2c 81       	ldd	r18, Y+4	; 0x04
     faa:	3d 81       	ldd	r19, Y+5	; 0x05
     fac:	23 30       	cpi	r18, 0x03	; 3
     fae:	31 05       	cpc	r19, r1
     fb0:	89 f1       	breq	.+98     	; 0x1014 <DIO_voidSetPinDir+0x1b8>
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	84 30       	cpi	r24, 0x04	; 4
     fb8:	91 05       	cpc	r25, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <DIO_voidSetPinDir+0x162>
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <DIO_voidSetPinDir+0x1e2>
     fbe:	53 c0       	rjmp	.+166    	; 0x1066 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
     fc0:	aa e3       	ldi	r26, 0x3A	; 58
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ea e3       	ldi	r30, 0x3A	; 58
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_voidSetPinDir+0x182>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_voidSetPinDir+0x17e>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	3e c0       	rjmp	.+124    	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
     fea:	a7 e3       	ldi	r26, 0x37	; 55
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e7 e3       	ldi	r30, 0x37	; 55
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_voidSetPinDir+0x1ac>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_voidSetPinDir+0x1a8>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	29 c0       	rjmp	.+82     	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    1014:	a4 e3       	ldi	r26, 0x34	; 52
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e4 e3       	ldi	r30, 0x34	; 52
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_voidSetPinDir+0x1d6>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_voidSetPinDir+0x1d2>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    103e:	a1 e3       	ldi	r26, 0x31	; 49
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e1 e3       	ldi	r30, 0x31	; 49
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_voidSetPinDir+0x200>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_voidSetPinDir+0x1fc>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1066:	27 96       	adiw	r28, 0x07	; 7
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	27 97       	sbiw	r28, 0x07	; 7
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
    1090:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	85 30       	cpi	r24, 0x05	; 5
    1096:	08 f0       	brcs	.+2      	; 0x109a <DIO_voidSetPinValue+0x22>
    1098:	f4 c0       	rjmp	.+488    	; 0x1282 <DIO_voidSetPinValue+0x20a>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	09 f4       	brne	.+2      	; 0x10a2 <DIO_voidSetPinValue+0x2a>
    10a0:	f0 c0       	rjmp	.+480    	; 0x1282 <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <DIO_voidSetPinValue+0x32>
    10a8:	ec c0       	rjmp	.+472    	; 0x1282 <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <DIO_voidSetPinValue+0x3a>
    10b0:	70 c0       	rjmp	.+224    	; 0x1192 <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	3f 83       	std	Y+7, r19	; 0x07
    10ba:	2e 83       	std	Y+6, r18	; 0x06
    10bc:	8e 81       	ldd	r24, Y+6	; 0x06
    10be:	9f 81       	ldd	r25, Y+7	; 0x07
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	91 05       	cpc	r25, r1
    10c4:	51 f1       	breq	.+84     	; 0x111a <DIO_voidSetPinValue+0xa2>
    10c6:	2e 81       	ldd	r18, Y+6	; 0x06
    10c8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ca:	23 30       	cpi	r18, 0x03	; 3
    10cc:	31 05       	cpc	r19, r1
    10ce:	34 f4       	brge	.+12     	; 0x10dc <DIO_voidSetPinValue+0x64>
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <DIO_voidSetPinValue+0x7a>
    10da:	d3 c0       	rjmp	.+422    	; 0x1282 <DIO_voidSetPinValue+0x20a>
    10dc:	2e 81       	ldd	r18, Y+6	; 0x06
    10de:	3f 81       	ldd	r19, Y+7	; 0x07
    10e0:	23 30       	cpi	r18, 0x03	; 3
    10e2:	31 05       	cpc	r19, r1
    10e4:	71 f1       	breq	.+92     	; 0x1142 <DIO_voidSetPinValue+0xca>
    10e6:	8e 81       	ldd	r24, Y+6	; 0x06
    10e8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	91 05       	cpc	r25, r1
    10ee:	e9 f1       	breq	.+122    	; 0x116a <DIO_voidSetPinValue+0xf2>
    10f0:	c8 c0       	rjmp	.+400    	; 0x1282 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    10f2:	ab e3       	ldi	r26, 0x3B	; 59
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	eb e3       	ldi	r30, 0x3B	; 59
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_voidSetPinValue+0x98>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_voidSetPinValue+0x94>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	b4 c0       	rjmp	.+360    	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    111a:	a8 e3       	ldi	r26, 0x38	; 56
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_voidSetPinValue+0xc0>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_voidSetPinValue+0xbc>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	a0 c0       	rjmp	.+320    	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    1142:	a5 e3       	ldi	r26, 0x35	; 53
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e3       	ldi	r30, 0x35	; 53
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_voidSetPinValue+0xe8>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_voidSetPinValue+0xe4>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	8c c0       	rjmp	.+280    	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    116a:	a2 e3       	ldi	r26, 0x32	; 50
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e2 e3       	ldi	r30, 0x32	; 50
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_voidSetPinValue+0x110>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_voidSetPinValue+0x10c>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	78 c0       	rjmp	.+240    	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	88 23       	and	r24, r24
    1196:	09 f0       	breq	.+2      	; 0x119a <DIO_voidSetPinValue+0x122>
    1198:	74 c0       	rjmp	.+232    	; 0x1282 <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3d 83       	std	Y+5, r19	; 0x05
    11a2:	2c 83       	std	Y+4, r18	; 0x04
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	91 05       	cpc	r25, r1
    11ac:	61 f1       	breq	.+88     	; 0x1206 <DIO_voidSetPinValue+0x18e>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	23 30       	cpi	r18, 0x03	; 3
    11b4:	31 05       	cpc	r19, r1
    11b6:	34 f4       	brge	.+12     	; 0x11c4 <DIO_voidSetPinValue+0x14c>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	69 f0       	breq	.+26     	; 0x11dc <DIO_voidSetPinValue+0x164>
    11c2:	5f c0       	rjmp	.+190    	; 0x1282 <DIO_voidSetPinValue+0x20a>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	23 30       	cpi	r18, 0x03	; 3
    11ca:	31 05       	cpc	r19, r1
    11cc:	89 f1       	breq	.+98     	; 0x1230 <DIO_voidSetPinValue+0x1b8>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	91 05       	cpc	r25, r1
    11d6:	09 f4       	brne	.+2      	; 0x11da <DIO_voidSetPinValue+0x162>
    11d8:	40 c0       	rjmp	.+128    	; 0x125a <DIO_voidSetPinValue+0x1e2>
    11da:	53 c0       	rjmp	.+166    	; 0x1282 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    11dc:	ab e3       	ldi	r26, 0x3B	; 59
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	eb e3       	ldi	r30, 0x3B	; 59
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_voidSetPinValue+0x182>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_voidSetPinValue+0x17e>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	3e c0       	rjmp	.+124    	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    1206:	a8 e3       	ldi	r26, 0x38	; 56
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_voidSetPinValue+0x1ac>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_voidSetPinValue+0x1a8>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	29 c0       	rjmp	.+82     	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_voidSetPinValue+0x1d6>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_voidSetPinValue+0x1d2>
    1252:	80 95       	com	r24
    1254:	84 23       	and	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_voidSetPinValue+0x200>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_voidSetPinValue+0x1fc>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1282:	27 96       	adiw	r28, 0x07	; 7
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <DIO_u8GetPinValue+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_u8GetPinValue+0x8>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	85 30       	cpi	r24, 0x05	; 5
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <DIO_u8GetPinValue+0x1a>
    12ac:	74 c0       	rjmp	.+232    	; 0x1396 <DIO_u8GetPinValue+0x102>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_u8GetPinValue+0x22>
    12b4:	70 c0       	rjmp	.+224    	; 0x1396 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	08 f0       	brcs	.+2      	; 0x12be <DIO_u8GetPinValue+0x2a>
    12bc:	6c c0       	rjmp	.+216    	; 0x1396 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	3d 83       	std	Y+5, r19	; 0x05
    12c6:	2c 83       	std	Y+4, r18	; 0x04
    12c8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ca:	5d 81       	ldd	r21, Y+5	; 0x05
    12cc:	42 30       	cpi	r20, 0x02	; 2
    12ce:	51 05       	cpc	r21, r1
    12d0:	49 f1       	breq	.+82     	; 0x1324 <DIO_u8GetPinValue+0x90>
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	34 f4       	brge	.+12     	; 0x12e8 <DIO_u8GetPinValue+0x54>
    12dc:	2c 81       	ldd	r18, Y+4	; 0x04
    12de:	3d 81       	ldd	r19, Y+5	; 0x05
    12e0:	21 30       	cpi	r18, 0x01	; 1
    12e2:	31 05       	cpc	r19, r1
    12e4:	61 f0       	breq	.+24     	; 0x12fe <DIO_u8GetPinValue+0x6a>
    12e6:	57 c0       	rjmp	.+174    	; 0x1396 <DIO_u8GetPinValue+0x102>
    12e8:	4c 81       	ldd	r20, Y+4	; 0x04
    12ea:	5d 81       	ldd	r21, Y+5	; 0x05
    12ec:	43 30       	cpi	r20, 0x03	; 3
    12ee:	51 05       	cpc	r21, r1
    12f0:	61 f1       	breq	.+88     	; 0x134a <DIO_u8GetPinValue+0xb6>
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	84 30       	cpi	r24, 0x04	; 4
    12f8:	91 05       	cpc	r25, r1
    12fa:	d1 f1       	breq	.+116    	; 0x1370 <DIO_u8GetPinValue+0xdc>
    12fc:	4c c0       	rjmp	.+152    	; 0x1396 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    12fe:	e9 e3       	ldi	r30, 0x39	; 57
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8GetPinValue+0x82>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_u8GetPinValue+0x7e>
    131a:	ca 01       	movw	r24, r20
    131c:	58 2f       	mov	r21, r24
    131e:	51 70       	andi	r21, 0x01	; 1
    1320:	5b 83       	std	Y+3, r21	; 0x03
    1322:	3b c0       	rjmp	.+118    	; 0x139a <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    1324:	e6 e3       	ldi	r30, 0x36	; 54
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_u8GetPinValue+0xa8>
    1338:	55 95       	asr	r21
    133a:	47 95       	ror	r20
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_u8GetPinValue+0xa4>
    1340:	ca 01       	movw	r24, r20
    1342:	58 2f       	mov	r21, r24
    1344:	51 70       	andi	r21, 0x01	; 1
    1346:	5b 83       	std	Y+3, r21	; 0x03
    1348:	28 c0       	rjmp	.+80     	; 0x139a <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    134a:	e3 e3       	ldi	r30, 0x33	; 51
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_u8GetPinValue+0xce>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_u8GetPinValue+0xca>
    1366:	ca 01       	movw	r24, r20
    1368:	58 2f       	mov	r21, r24
    136a:	51 70       	andi	r21, 0x01	; 1
    136c:	5b 83       	std	Y+3, r21	; 0x03
    136e:	15 c0       	rjmp	.+42     	; 0x139a <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    1370:	e0 e3       	ldi	r30, 0x30	; 48
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_u8GetPinValue+0xf4>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_u8GetPinValue+0xf0>
    138c:	ca 01       	movw	r24, r20
    138e:	58 2f       	mov	r21, r24
    1390:	51 70       	andi	r21, 0x01	; 1
    1392:	5b 83       	std	Y+3, r21	; 0x03
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	8b 83       	std	Y+3, r24	; 0x03
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DIO_voidTogglePin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DIO_voidTogglePin+0x8>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	85 30       	cpi	r24, 0x05	; 5
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <DIO_voidTogglePin+0x18>
    13c2:	77 c0       	rjmp	.+238    	; 0x14b2 <DIO_voidTogglePin+0x106>
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	88 23       	and	r24, r24
    13c8:	09 f4       	brne	.+2      	; 0x13cc <DIO_voidTogglePin+0x20>
    13ca:	73 c0       	rjmp	.+230    	; 0x14b2 <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	88 30       	cpi	r24, 0x08	; 8
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <DIO_voidTogglePin+0x28>
    13d2:	6f c0       	rjmp	.+222    	; 0x14b2 <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	2b 83       	std	Y+3, r18	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	51 f1       	breq	.+84     	; 0x143c <DIO_voidTogglePin+0x90>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	23 30       	cpi	r18, 0x03	; 3
    13ee:	31 05       	cpc	r19, r1
    13f0:	34 f4       	brge	.+12     	; 0x13fe <DIO_voidTogglePin+0x52>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	61 f0       	breq	.+24     	; 0x1414 <DIO_voidTogglePin+0x68>
    13fc:	5a c0       	rjmp	.+180    	; 0x14b2 <DIO_voidTogglePin+0x106>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	23 30       	cpi	r18, 0x03	; 3
    1404:	31 05       	cpc	r19, r1
    1406:	71 f1       	breq	.+92     	; 0x1464 <DIO_voidTogglePin+0xb8>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	91 05       	cpc	r25, r1
    1410:	e9 f1       	breq	.+122    	; 0x148c <DIO_voidTogglePin+0xe0>
    1412:	4f c0       	rjmp	.+158    	; 0x14b2 <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    1414:	ab e3       	ldi	r26, 0x3B	; 59
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	eb e3       	ldi	r30, 0x3B	; 59
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_voidTogglePin+0x86>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_voidTogglePin+0x82>
    1436:	84 27       	eor	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	3b c0       	rjmp	.+118    	; 0x14b2 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    143c:	a8 e3       	ldi	r26, 0x38	; 56
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e8 e3       	ldi	r30, 0x38	; 56
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_voidTogglePin+0xae>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_voidTogglePin+0xaa>
    145e:	84 27       	eor	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	27 c0       	rjmp	.+78     	; 0x14b2 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    1464:	a5 e3       	ldi	r26, 0x35	; 53
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_voidTogglePin+0xd6>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_voidTogglePin+0xd2>
    1486:	84 27       	eor	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	13 c0       	rjmp	.+38     	; 0x14b2 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    148c:	a2 e3       	ldi	r26, 0x32	; 50
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e2 e3       	ldi	r30, 0x32	; 50
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_voidTogglePin+0xfe>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_voidTogglePin+0xfa>
    14ae:	84 27       	eor	r24, r20
    14b0:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <DIO_voidSetPortDir+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <DIO_voidSetPortDir+0x8>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	b0 f5       	brcc	.+108    	; 0x1542 <DIO_voidSetPortDir+0x82>
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	88 23       	and	r24, r24
    14da:	99 f1       	breq	.+102    	; 0x1542 <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3c 83       	std	Y+4, r19	; 0x04
    14e4:	2b 83       	std	Y+3, r18	; 0x03
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	82 30       	cpi	r24, 0x02	; 2
    14ec:	91 05       	cpc	r25, r1
    14ee:	d9 f0       	breq	.+54     	; 0x1526 <DIO_voidSetPortDir+0x66>
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	23 30       	cpi	r18, 0x03	; 3
    14f6:	31 05       	cpc	r19, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <DIO_voidSetPortDir+0x46>
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	61 f0       	breq	.+24     	; 0x151c <DIO_voidSetPortDir+0x5c>
    1504:	1e c0       	rjmp	.+60     	; 0x1542 <DIO_voidSetPortDir+0x82>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	23 30       	cpi	r18, 0x03	; 3
    150c:	31 05       	cpc	r19, r1
    150e:	81 f0       	breq	.+32     	; 0x1530 <DIO_voidSetPortDir+0x70>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	84 30       	cpi	r24, 0x04	; 4
    1516:	91 05       	cpc	r25, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <DIO_voidSetPortDir+0x7a>
    151a:	13 c0       	rjmp	.+38     	; 0x1542 <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    151c:	ea e3       	ldi	r30, 0x3A	; 58
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	0e c0       	rjmp	.+28     	; 0x1542 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    1530:	e4 e3       	ldi	r30, 0x34	; 52
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	80 83       	st	Z, r24
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    153a:	e1 e3       	ldi	r30, 0x31	; 49
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
			break;
		}
	}
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_voidSetPortValue+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_voidSetPortValue+0x8>
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	b0 f5       	brcc	.+108    	; 0x15d2 <DIO_voidSetPortValue+0x82>
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	88 23       	and	r24, r24
    156a:	99 f1       	breq	.+102    	; 0x15d2 <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	2b 83       	std	Y+3, r18	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	82 30       	cpi	r24, 0x02	; 2
    157c:	91 05       	cpc	r25, r1
    157e:	d9 f0       	breq	.+54     	; 0x15b6 <DIO_voidSetPortValue+0x66>
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	23 30       	cpi	r18, 0x03	; 3
    1586:	31 05       	cpc	r19, r1
    1588:	34 f4       	brge	.+12     	; 0x1596 <DIO_voidSetPortValue+0x46>
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	61 f0       	breq	.+24     	; 0x15ac <DIO_voidSetPortValue+0x5c>
    1594:	1e c0       	rjmp	.+60     	; 0x15d2 <DIO_voidSetPortValue+0x82>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	23 30       	cpi	r18, 0x03	; 3
    159c:	31 05       	cpc	r19, r1
    159e:	81 f0       	breq	.+32     	; 0x15c0 <DIO_voidSetPortValue+0x70>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	91 05       	cpc	r25, r1
    15a8:	81 f0       	breq	.+32     	; 0x15ca <DIO_voidSetPortValue+0x7a>
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
    15b4:	0e c0       	rjmp	.+28     	; 0x15d2 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    15b6:	e8 e3       	ldi	r30, 0x38	; 56
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	80 83       	st	Z, r24
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	80 83       	st	Z, r24
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_u8GetPortValue+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_u8GetPortValue+0x8>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	85 30       	cpi	r24, 0x05	; 5
    15f2:	b8 f5       	brcc	.+110    	; 0x1662 <DIO_u8GetPortValue+0x82>
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	88 23       	and	r24, r24
    15f8:	a1 f1       	breq	.+104    	; 0x1662 <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3c 83       	std	Y+4, r19	; 0x04
    1602:	2b 83       	std	Y+3, r18	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	91 05       	cpc	r25, r1
    160c:	d9 f0       	breq	.+54     	; 0x1644 <DIO_u8GetPortValue+0x64>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	23 30       	cpi	r18, 0x03	; 3
    1614:	31 05       	cpc	r19, r1
    1616:	34 f4       	brge	.+12     	; 0x1624 <DIO_u8GetPortValue+0x44>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	61 f0       	breq	.+24     	; 0x163a <DIO_u8GetPortValue+0x5a>
    1622:	1f c0       	rjmp	.+62     	; 0x1662 <DIO_u8GetPortValue+0x82>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	23 30       	cpi	r18, 0x03	; 3
    162a:	31 05       	cpc	r19, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <DIO_u8GetPortValue+0x6e>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	91 05       	cpc	r25, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <DIO_u8GetPortValue+0x78>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    163a:	eb e3       	ldi	r30, 0x3B	; 59
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	90 81       	ld	r25, Z
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	20 81       	ld	r18, Z
    164a:	2a 83       	std	Y+2, r18	; 0x02
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	30 81       	ld	r19, Z
    1654:	3a 83       	std	Y+2, r19	; 0x02
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1658:	e2 e3       	ldi	r30, 0x32	; 50
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8a 83       	std	Y+2, r24	; 0x02
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_voidTogglePort+0x6>
    167c:	0f 92       	push	r0
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	85 30       	cpi	r24, 0x05	; 5
    1688:	08 f0       	brcs	.+2      	; 0x168c <DIO_voidTogglePort+0x16>
    168a:	43 c0       	rjmp	.+134    	; 0x1712 <DIO_voidTogglePort+0x9c>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 23       	and	r24, r24
    1690:	09 f4       	brne	.+2      	; 0x1694 <DIO_voidTogglePort+0x1e>
    1692:	3f c0       	rjmp	.+126    	; 0x1712 <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3b 83       	std	Y+3, r19	; 0x03
    169c:	2a 83       	std	Y+2, r18	; 0x02
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	9b 81       	ldd	r25, Y+3	; 0x03
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	91 05       	cpc	r25, r1
    16a6:	f1 f0       	breq	.+60     	; 0x16e4 <DIO_voidTogglePort+0x6e>
    16a8:	2a 81       	ldd	r18, Y+2	; 0x02
    16aa:	3b 81       	ldd	r19, Y+3	; 0x03
    16ac:	23 30       	cpi	r18, 0x03	; 3
    16ae:	31 05       	cpc	r19, r1
    16b0:	34 f4       	brge	.+12     	; 0x16be <DIO_voidTogglePort+0x48>
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <DIO_voidTogglePort+0x5e>
    16bc:	2a c0       	rjmp	.+84     	; 0x1712 <DIO_voidTogglePort+0x9c>
    16be:	2a 81       	ldd	r18, Y+2	; 0x02
    16c0:	3b 81       	ldd	r19, Y+3	; 0x03
    16c2:	23 30       	cpi	r18, 0x03	; 3
    16c4:	31 05       	cpc	r19, r1
    16c6:	b1 f0       	breq	.+44     	; 0x16f4 <DIO_voidTogglePort+0x7e>
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	9b 81       	ldd	r25, Y+3	; 0x03
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	91 05       	cpc	r25, r1
    16d0:	c9 f0       	breq	.+50     	; 0x1704 <DIO_voidTogglePort+0x8e>
    16d2:	1f c0       	rjmp	.+62     	; 0x1712 <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 95       	com	r24
    16e0:	8c 93       	st	X, r24
    16e2:	17 c0       	rjmp	.+46     	; 0x1712 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    16e4:	a8 e3       	ldi	r26, 0x38	; 56
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 95       	com	r24
    16f0:	8c 93       	st	X, r24
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    16f4:	a5 e3       	ldi	r26, 0x35	; 53
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e3       	ldi	r30, 0x35	; 53
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 95       	com	r24
    1700:	8c 93       	st	X, r24
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    1704:	a2 e3       	ldi	r26, 0x32	; 50
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 95       	com	r24
    1710:	8c 93       	st	X, r24
				break;
			}
		}
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(){
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    1726:	a7 e2       	ldi	r26, 0x27	; 39
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e7 e2       	ldi	r30, 0x27	; 39
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 64       	ori	r24, 0x40	; 64
    1732:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1734:	a7 e2       	ldi	r26, 0x27	; 39
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e2       	ldi	r30, 0x27	; 39
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 77       	andi	r24, 0x7F	; 127
    1740:	8c 93       	st	X, r24
	Vref = 5;
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a0 ea       	ldi	r26, 0xA0	; 160
    1748:	b0 e4       	ldi	r27, 0x40	; 64
    174a:	80 93 7f 01 	sts	0x017F, r24
    174e:	90 93 80 01 	sts	0x0180, r25
    1752:	a0 93 81 01 	sts	0x0181, r26
    1756:	b0 93 82 01 	sts	0x0182, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    175a:	a7 e2       	ldi	r26, 0x27	; 39
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e7 e2       	ldi	r30, 0x27	; 39
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8f 7d       	andi	r24, 0xDF	; 223
    1766:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1768:	a6 e2       	ldi	r26, 0x26	; 38
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e6 e2       	ldi	r30, 0x26	; 38
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	81 60       	ori	r24, 0x01	; 1
    1774:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    1776:	a6 e2       	ldi	r26, 0x26	; 38
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e6 e2       	ldi	r30, 0x26	; 38
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    1784:	a6 e2       	ldi	r26, 0x26	; 38
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e6 e2       	ldi	r30, 0x26	; 38
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	84 60       	ori	r24, 0x04	; 4
    1790:	8c 93       	st	X, r24
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
#endif
}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <ADC_voidEnable>:

void ADC_voidEnable(){
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    17a0:	a6 e2       	ldi	r26, 0x26	; 38
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e6 e2       	ldi	r30, 0x26	; 38
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 68       	ori	r24, 0x80	; 128
    17ac:	8c 93       	st	X, r24
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    17bc:	a6 e2       	ldi	r26, 0x26	; 38
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e6 e2       	ldi	r30, 0x26	; 38
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	88 60       	ori	r24, 0x08	; 8
    17c8:	8c 93       	st	X, r24
}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    17d8:	a6 e2       	ldi	r26, 0x26	; 38
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e6 e2       	ldi	r30, 0x26	; 38
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	87 7f       	andi	r24, 0xF7	; 247
    17e4:	8c 93       	st	X, r24
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <ADC_voidDisable>:

void ADC_voidDisable(){
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    17f4:	a6 e2       	ldi	r26, 0x26	; 38
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e6 e2       	ldi	r30, 0x26	; 38
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 77       	andi	r24, 0x7F	; 127
    1800:	8c 93       	st	X, r24
}
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <ADC_u16ReadADC+0x6>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1812:	1a 82       	std	Y+2, r1	; 0x02
    1814:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    1816:	e4 e2       	ldi	r30, 0x24	; 36
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	cc 01       	movw	r24, r24
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	20 91 7f 01 	lds	r18, 0x017F
    1834:	30 91 80 01 	lds	r19, 0x0180
    1838:	40 91 81 01 	lds	r20, 0x0181
    183c:	50 91 82 01 	lds	r21, 0x0182
    1840:	bc 01       	movw	r22, r24
    1842:	cd 01       	movw	r24, r26
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	54 e4       	ldi	r21, 0x44	; 68
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    188a:	a7 e2       	ldi	r26, 0x27	; 39
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e7 e2       	ldi	r30, 0x27	; 39
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 7e       	andi	r24, 0xE0	; 224
    1896:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    1898:	a7 e2       	ldi	r26, 0x27	; 39
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e7 e2       	ldi	r30, 0x27	; 39
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	90 81       	ld	r25, Z
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	89 2b       	or	r24, r25
    18a6:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    18a8:	a6 e2       	ldi	r26, 0x26	; 38
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e6 e2       	ldi	r30, 0x26	; 38
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 64       	ori	r24, 0x40	; 64
    18b4:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    18b6:	e6 e2       	ldi	r30, 0x26	; 38
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	82 95       	swap	r24
    18be:	8f 70       	andi	r24, 0x0F	; 15
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	81 70       	andi	r24, 0x01	; 1
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	a9 f3       	breq	.-22     	; 0x18b6 <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    18cc:	a6 e2       	ldi	r26, 0x26	; 38
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e6 e2       	ldi	r30, 0x26	; 38
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	80 61       	ori	r24, 0x10	; 16
    18d8:	8c 93       	st	X, r24
}
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	0f 92       	push	r0
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    18ee:	a7 e2       	ldi	r26, 0x27	; 39
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e7 e2       	ldi	r30, 0x27	; 39
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 7e       	andi	r24, 0xE0	; 224
    18fa:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    18fc:	a7 e2       	ldi	r26, 0x27	; 39
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e7 e2       	ldi	r30, 0x27	; 39
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	90 81       	ld	r25, Z
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	89 2b       	or	r24, r25
    190a:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    190c:	a6 e2       	ldi	r26, 0x26	; 38
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e6 e2       	ldi	r30, 0x26	; 38
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 64       	ori	r24, 0x40	; 64
    1918:	8c 93       	st	X, r24
}
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	0f 92       	push	r0
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    192e:	a7 e2       	ldi	r26, 0x27	; 39
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e7 e2       	ldi	r30, 0x27	; 39
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 7e       	andi	r24, 0xE0	; 224
    193a:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    193c:	a7 e2       	ldi	r26, 0x27	; 39
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e7 e2       	ldi	r30, 0x27	; 39
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	90 81       	ld	r25, Z
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	89 2b       	or	r24, r25
    194a:	8c 93       	st	X, r24
}
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <ADC_u16ReadADCInMV+0x6>
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    195e:	1a 82       	std	Y+2, r1	; 0x02
    1960:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    1962:	e4 e2       	ldi	r30, 0x24	; 36
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	cc 01       	movw	r24, r24
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	28 ee       	ldi	r18, 0xE8	; 232
    1972:	33 e0       	ldi	r19, 0x03	; 3
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsi3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	20 91 7f 01 	lds	r18, 0x017F
    1994:	30 91 80 01 	lds	r19, 0x0180
    1998:	40 91 81 01 	lds	r20, 0x0181
    199c:	50 91 82 01 	lds	r21, 0x0182
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	54 e4       	ldi	r21, 0x44	; 68
    19b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
	return result;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <ADC_voidSetCallback+0x6>
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	90 93 13 02 	sts	0x0213, r25
    19f4:	80 93 12 02 	sts	0x0212, r24
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <__vector_16>:

void __vector_16 (void){
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	2f 93       	push	r18
    1a0e:	3f 93       	push	r19
    1a10:	4f 93       	push	r20
    1a12:	5f 93       	push	r21
    1a14:	6f 93       	push	r22
    1a16:	7f 93       	push	r23
    1a18:	8f 93       	push	r24
    1a1a:	9f 93       	push	r25
    1a1c:	af 93       	push	r26
    1a1e:	bf 93       	push	r27
    1a20:	ef 93       	push	r30
    1a22:	ff 93       	push	r31
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    1a2c:	80 91 12 02 	lds	r24, 0x0212
    1a30:	90 91 13 02 	lds	r25, 0x0213
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	29 f0       	breq	.+10     	; 0x1a42 <__vector_16+0x40>
		Global_ADC_CallBack();
    1a38:	e0 91 12 02 	lds	r30, 0x0212
    1a3c:	f0 91 13 02 	lds	r31, 0x0213
    1a40:	09 95       	icall
	}
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	bf 91       	pop	r27
    1a4c:	af 91       	pop	r26
    1a4e:	9f 91       	pop	r25
    1a50:	8f 91       	pop	r24
    1a52:	7f 91       	pop	r23
    1a54:	6f 91       	pop	r22
    1a56:	5f 91       	pop	r21
    1a58:	4f 91       	pop	r20
    1a5a:	3f 91       	pop	r19
    1a5c:	2f 91       	pop	r18
    1a5e:	0f 90       	pop	r0
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	0f 90       	pop	r0
    1a64:	1f 90       	pop	r1
    1a66:	18 95       	reti

00001a68 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	6f e7       	ldi	r22, 0x7F	; 127
    1a74:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	6f e7       	ldi	r22, 0x7F	; 127
    1a8a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	6f e7       	ldi	r22, 0x7F	; 127
    1a92:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_voidSetPortDir>
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	60 97       	sbiw	r28, 0x10	; 16
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	9d 87       	std	Y+13, r25	; 0x0d
    1ab8:	8c 87       	std	Y+12, r24	; 0x0c
    1aba:	ef ec       	ldi	r30, 0xCF	; 207
    1abc:	f1 e0       	ldi	r31, 0x01	; 1
    1abe:	ff 87       	std	Y+15, r31	; 0x0f
    1ac0:	ee 87       	std	Y+14, r30	; 0x0e
    1ac2:	fa e0       	ldi	r31, 0x0A	; 10
    1ac4:	f8 8b       	std	Y+16, r31	; 0x10
    1ac6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ac8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1aca:	00 80       	ld	r0, Z
    1acc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ace:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	9f 87       	std	Y+15, r25	; 0x0f
    1ad4:	8e 87       	std	Y+14, r24	; 0x0e
    1ad6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ad8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ada:	00 82       	st	Z, r0
    1adc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ade:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	9d 87       	std	Y+13, r25	; 0x0d
    1ae4:	8c 87       	std	Y+12, r24	; 0x0c
    1ae6:	98 89       	ldd	r25, Y+16	; 0x10
    1ae8:	91 50       	subi	r25, 0x01	; 1
    1aea:	98 8b       	std	Y+16, r25	; 0x10
    1aec:	e8 89       	ldd	r30, Y+16	; 0x10
    1aee:	ee 23       	and	r30, r30
    1af0:	51 f7       	brne	.-44     	; 0x1ac6 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    1af2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1af4:	8a 30       	cpi	r24, 0x0A	; 10
    1af6:	70 f4       	brcc	.+28     	; 0x1b14 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    1af8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	ce 01       	movw	r24, r28
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	fc 01       	movw	r30, r24
    1b04:	e2 0f       	add	r30, r18
    1b06:	f3 1f       	adc	r31, r19
    1b08:	80 81       	ld	r24, Z
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	69 2f       	mov	r22, r25
    1b10:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
	}
}
    1b14:	60 96       	adiw	r28, 0x10	; 16
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	a1 97       	sbiw	r28, 0x21	; 33
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	43 96       	adiw	r24, 0x13	; 19
    1b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b40:	8d 8f       	std	Y+29, r24	; 0x1d
    1b42:	e9 ed       	ldi	r30, 0xD9	; 217
    1b44:	f1 e0       	ldi	r31, 0x01	; 1
    1b46:	f8 a3       	std	Y+32, r31	; 0x20
    1b48:	ef 8f       	std	Y+31, r30	; 0x1f
    1b4a:	fa e0       	ldi	r31, 0x0A	; 10
    1b4c:	f9 a3       	std	Y+33, r31	; 0x21
    1b4e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1b50:	f8 a1       	ldd	r31, Y+32	; 0x20
    1b52:	00 80       	ld	r0, Z
    1b54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b56:	98 a1       	ldd	r25, Y+32	; 0x20
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	98 a3       	std	Y+32, r25	; 0x20
    1b5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b5e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1b60:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1b62:	00 82       	st	Z, r0
    1b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b6e:	99 a1       	ldd	r25, Y+33	; 0x21
    1b70:	91 50       	subi	r25, 0x01	; 1
    1b72:	99 a3       	std	Y+33, r25	; 0x21
    1b74:	e9 a1       	ldd	r30, Y+33	; 0x21
    1b76:	ee 23       	and	r30, r30
    1b78:	51 f7       	brne	.-44     	; 0x1b4e <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    1b7a:	1f 86       	std	Y+15, r1	; 0x0f
    1b7c:	18 8a       	std	Y+16, r1	; 0x10
    1b7e:	19 8a       	std	Y+17, r1	; 0x11
    1b80:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1b82:	1f 86       	std	Y+15, r1	; 0x0f
    1b84:	18 8a       	std	Y+16, r1	; 0x10
    1b86:	19 8a       	std	Y+17, r1	; 0x11
    1b88:	1a 8a       	std	Y+18, r1	; 0x12
    1b8a:	8d c0       	rjmp	.+282    	; 0x1ca6 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    1b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8e:	98 89       	ldd	r25, Y+16	; 0x10
    1b90:	a9 89       	ldd	r26, Y+17	; 0x11
    1b92:	ba 89       	ldd	r27, Y+18	; 0x12
    1b94:	9e 01       	movw	r18, r28
    1b96:	2d 5e       	subi	r18, 0xED	; 237
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	e8 0f       	add	r30, r24
    1b9e:	f9 1f       	adc	r31, r25
    1ba0:	80 81       	ld	r24, Z
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	69 2f       	mov	r22, r25
    1ba8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e2       	ldi	r26, 0x20	; 32
    1bb2:	b1 e4       	ldi	r27, 0x41	; 65
    1bb4:	8b 87       	std	Y+11, r24	; 0x0b
    1bb6:	9c 87       	std	Y+12, r25	; 0x0c
    1bb8:	ad 87       	std	Y+13, r26	; 0x0d
    1bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a e7       	ldi	r20, 0x7A	; 122
    1bca:	55 e4       	ldi	r21, 0x45	; 69
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8f 83       	std	Y+7, r24	; 0x07
    1bd6:	98 87       	std	Y+8, r25	; 0x08
    1bd8:	a9 87       	std	Y+9, r26	; 0x09
    1bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    1bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1c00:	78 85       	ldd	r23, Y+8	; 0x08
    1c02:	89 85       	ldd	r24, Y+9	; 0x09
    1c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <SevSeg_voidSingleAutoCounter+0x138>
    1c40:	80 e9       	ldi	r24, 0x90	; 144
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <SevSeg_voidSingleAutoCounter+0x126>
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <SevSeg_voidSingleAutoCounter+0x11a>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <SevSeg_voidSingleAutoCounter+0x162>
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c92:	98 89       	ldd	r25, Y+16	; 0x10
    1c94:	a9 89       	ldd	r26, Y+17	; 0x11
    1c96:	ba 89       	ldd	r27, Y+18	; 0x12
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	b1 1d       	adc	r27, r1
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
    1ca0:	98 8b       	std	Y+16, r25	; 0x10
    1ca2:	a9 8b       	std	Y+17, r26	; 0x11
    1ca4:	ba 8b       	std	Y+18, r27	; 0x12
    1ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca8:	98 89       	ldd	r25, Y+16	; 0x10
    1caa:	a9 89       	ldd	r26, Y+17	; 0x11
    1cac:	ba 89       	ldd	r27, Y+18	; 0x12
    1cae:	8a 30       	cpi	r24, 0x0A	; 10
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	a1 05       	cpc	r26, r1
    1cb4:	b1 05       	cpc	r27, r1
    1cb6:	0c f4       	brge	.+2      	; 0x1cba <SevSeg_voidSingleAutoCounter+0x194>
    1cb8:	69 cf       	rjmp	.-302    	; 0x1b8c <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    1cba:	a1 96       	adiw	r28, 0x21	; 33
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	a5 97       	sbiw	r28, 0x25	; 37
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	47 96       	adiw	r24, 0x17	; 23
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
    1ce8:	e3 ee       	ldi	r30, 0xE3	; 227
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	fc a3       	std	Y+36, r31	; 0x24
    1cee:	eb a3       	std	Y+35, r30	; 0x23
    1cf0:	fa e0       	ldi	r31, 0x0A	; 10
    1cf2:	fd a3       	std	Y+37, r31	; 0x25
    1cf4:	eb a1       	ldd	r30, Y+35	; 0x23
    1cf6:	fc a1       	ldd	r31, Y+36	; 0x24
    1cf8:	00 80       	ld	r0, Z
    1cfa:	8b a1       	ldd	r24, Y+35	; 0x23
    1cfc:	9c a1       	ldd	r25, Y+36	; 0x24
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	9c a3       	std	Y+36, r25	; 0x24
    1d02:	8b a3       	std	Y+35, r24	; 0x23
    1d04:	e9 a1       	ldd	r30, Y+33	; 0x21
    1d06:	fa a1       	ldd	r31, Y+34	; 0x22
    1d08:	00 82       	st	Z, r0
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	9a a3       	std	Y+34, r25	; 0x22
    1d12:	89 a3       	std	Y+33, r24	; 0x21
    1d14:	9d a1       	ldd	r25, Y+37	; 0x25
    1d16:	91 50       	subi	r25, 0x01	; 1
    1d18:	9d a3       	std	Y+37, r25	; 0x25
    1d1a:	ed a1       	ldd	r30, Y+37	; 0x25
    1d1c:	ee 23       	and	r30, r30
    1d1e:	51 f7       	brne	.-44     	; 0x1cf4 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    1d20:	1b 8a       	std	Y+19, r1	; 0x13
    1d22:	1c 8a       	std	Y+20, r1	; 0x14
    1d24:	1d 8a       	std	Y+21, r1	; 0x15
    1d26:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    1d28:	1f 86       	std	Y+15, r1	; 0x0f
    1d2a:	18 8a       	std	Y+16, r1	; 0x10
    1d2c:	19 8a       	std	Y+17, r1	; 0x11
    1d2e:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    1d30:	1b 8a       	std	Y+19, r1	; 0x13
    1d32:	1c 8a       	std	Y+20, r1	; 0x14
    1d34:	1d 8a       	std	Y+21, r1	; 0x15
    1d36:	1e 8a       	std	Y+22, r1	; 0x16
    1d38:	b7 c0       	rjmp	.+366    	; 0x1ea8 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3e:	ad 89       	ldd	r26, Y+21	; 0x15
    1d40:	be 89       	ldd	r27, Y+22	; 0x16
    1d42:	9e 01       	movw	r18, r28
    1d44:	29 5e       	subi	r18, 0xE9	; 233
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	f9 01       	movw	r30, r18
    1d4a:	e8 0f       	add	r30, r24
    1d4c:	f9 1f       	adc	r31, r25
    1d4e:	80 81       	ld	r24, Z
    1d50:	98 2f       	mov	r25, r24
    1d52:	84 e0       	ldi	r24, 0x04	; 4
    1d54:	69 2f       	mov	r22, r25
    1d56:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1d5a:	1f 86       	std	Y+15, r1	; 0x0f
    1d5c:	18 8a       	std	Y+16, r1	; 0x10
    1d5e:	19 8a       	std	Y+17, r1	; 0x11
    1d60:	1a 8a       	std	Y+18, r1	; 0x12
    1d62:	8d c0       	rjmp	.+282    	; 0x1e7e <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d66:	98 89       	ldd	r25, Y+16	; 0x10
    1d68:	a9 89       	ldd	r26, Y+17	; 0x11
    1d6a:	ba 89       	ldd	r27, Y+18	; 0x12
    1d6c:	9e 01       	movw	r18, r28
    1d6e:	29 5e       	subi	r18, 0xE9	; 233
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	f9 01       	movw	r30, r18
    1d74:	e8 0f       	add	r30, r24
    1d76:	f9 1f       	adc	r31, r25
    1d78:	80 81       	ld	r24, Z
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	69 2f       	mov	r22, r25
    1d80:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e2       	ldi	r26, 0x20	; 32
    1d8a:	b1 e4       	ldi	r27, 0x41	; 65
    1d8c:	8b 87       	std	Y+11, r24	; 0x0b
    1d8e:	9c 87       	std	Y+12, r25	; 0x0c
    1d90:	ad 87       	std	Y+13, r26	; 0x0d
    1d92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a e7       	ldi	r20, 0x7A	; 122
    1da2:	55 e4       	ldi	r21, 0x45	; 69
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8f 83       	std	Y+7, r24	; 0x07
    1dae:	98 87       	std	Y+8, r25	; 0x08
    1db0:	a9 87       	std	Y+9, r26	; 0x09
    1db2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db4:	6f 81       	ldd	r22, Y+7	; 0x07
    1db6:	78 85       	ldd	r23, Y+8	; 0x08
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e8       	ldi	r20, 0x80	; 128
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc8:	88 23       	and	r24, r24
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    1dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd8:	78 85       	ldd	r23, Y+8	; 0x08
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	4c f5       	brge	.+82     	; 0x1e40 <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <SevSeg_voidDoubleAutoCounter+0x16a>
    1e18:	80 e9       	ldi	r24, 0x90	; 144
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <SevSeg_voidDoubleAutoCounter+0x158>
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <SevSeg_voidDoubleAutoCounter+0x14c>
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <SevSeg_voidDoubleAutoCounter+0x194>
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1e68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6a:	98 89       	ldd	r25, Y+16	; 0x10
    1e6c:	a9 89       	ldd	r26, Y+17	; 0x11
    1e6e:	ba 89       	ldd	r27, Y+18	; 0x12
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	b1 1d       	adc	r27, r1
    1e76:	8f 87       	std	Y+15, r24	; 0x0f
    1e78:	98 8b       	std	Y+16, r25	; 0x10
    1e7a:	a9 8b       	std	Y+17, r26	; 0x11
    1e7c:	ba 8b       	std	Y+18, r27	; 0x12
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	98 89       	ldd	r25, Y+16	; 0x10
    1e82:	a9 89       	ldd	r26, Y+17	; 0x11
    1e84:	ba 89       	ldd	r27, Y+18	; 0x12
    1e86:	8a 30       	cpi	r24, 0x0A	; 10
    1e88:	91 05       	cpc	r25, r1
    1e8a:	a1 05       	cpc	r26, r1
    1e8c:	b1 05       	cpc	r27, r1
    1e8e:	0c f4       	brge	.+2      	; 0x1e92 <SevSeg_voidDoubleAutoCounter+0x1c6>
    1e90:	69 cf       	rjmp	.-302    	; 0x1d64 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    1e92:	8b 89       	ldd	r24, Y+19	; 0x13
    1e94:	9c 89       	ldd	r25, Y+20	; 0x14
    1e96:	ad 89       	ldd	r26, Y+21	; 0x15
    1e98:	be 89       	ldd	r27, Y+22	; 0x16
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	b1 1d       	adc	r27, r1
    1ea0:	8b 8b       	std	Y+19, r24	; 0x13
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	ad 8b       	std	Y+21, r26	; 0x15
    1ea6:	be 8b       	std	Y+22, r27	; 0x16
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	ad 89       	ldd	r26, Y+21	; 0x15
    1eae:	be 89       	ldd	r27, Y+22	; 0x16
    1eb0:	8a 30       	cpi	r24, 0x0A	; 10
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	a1 05       	cpc	r26, r1
    1eb6:	b1 05       	cpc	r27, r1
    1eb8:	0c f4       	brge	.+2      	; 0x1ebc <SevSeg_voidDoubleAutoCounter+0x1f0>
    1eba:	3f cf       	rjmp	.-386    	; 0x1d3a <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    1ebc:	a5 96       	adiw	r28, 0x25	; 37
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	e1 97       	sbiw	r28, 0x31	; 49
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	8b a7       	std	Y+43, r24	; 0x2b
    1ee4:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	81 96       	adiw	r24, 0x21	; 33
    1eea:	9e a7       	std	Y+46, r25	; 0x2e
    1eec:	8d a7       	std	Y+45, r24	; 0x2d
    1eee:	ed ee       	ldi	r30, 0xED	; 237
    1ef0:	f1 e0       	ldi	r31, 0x01	; 1
    1ef2:	f8 ab       	std	Y+48, r31	; 0x30
    1ef4:	ef a7       	std	Y+47, r30	; 0x2f
    1ef6:	fa e0       	ldi	r31, 0x0A	; 10
    1ef8:	f9 ab       	std	Y+49, r31	; 0x31
    1efa:	ef a5       	ldd	r30, Y+47	; 0x2f
    1efc:	f8 a9       	ldd	r31, Y+48	; 0x30
    1efe:	00 80       	ld	r0, Z
    1f00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f02:	98 a9       	ldd	r25, Y+48	; 0x30
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	98 ab       	std	Y+48, r25	; 0x30
    1f08:	8f a7       	std	Y+47, r24	; 0x2f
    1f0a:	ed a5       	ldd	r30, Y+45	; 0x2d
    1f0c:	fe a5       	ldd	r31, Y+46	; 0x2e
    1f0e:	00 82       	st	Z, r0
    1f10:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f12:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	9e a7       	std	Y+46, r25	; 0x2e
    1f18:	8d a7       	std	Y+45, r24	; 0x2d
    1f1a:	99 a9       	ldd	r25, Y+49	; 0x31
    1f1c:	91 50       	subi	r25, 0x01	; 1
    1f1e:	99 ab       	std	Y+49, r25	; 0x31
    1f20:	e9 a9       	ldd	r30, Y+49	; 0x31
    1f22:	ee 23       	and	r30, r30
    1f24:	51 f7       	brne	.-44     	; 0x1efa <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    1f26:	1d 8e       	std	Y+29, r1	; 0x1d
    1f28:	1e 8e       	std	Y+30, r1	; 0x1e
    1f2a:	1f 8e       	std	Y+31, r1	; 0x1f
    1f2c:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    1f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f30:	88 23       	and	r24, r24
    1f32:	0c f4       	brge	.+2      	; 0x1f36 <SevSeg_voidSingleRangeCounter+0x68>
    1f34:	64 c1       	rjmp	.+712    	; 0x21fe <SevSeg_voidSingleRangeCounter+0x330>
    1f36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f38:	8a 30       	cpi	r24, 0x0A	; 10
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <SevSeg_voidSingleRangeCounter+0x70>
    1f3c:	60 c1       	rjmp	.+704    	; 0x21fe <SevSeg_voidSingleRangeCounter+0x330>
    1f3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f40:	8a 30       	cpi	r24, 0x0A	; 10
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <SevSeg_voidSingleRangeCounter+0x78>
    1f44:	5c c1       	rjmp	.+696    	; 0x21fe <SevSeg_voidSingleRangeCounter+0x330>
    1f46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f48:	88 23       	and	r24, r24
    1f4a:	0c f4       	brge	.+2      	; 0x1f4e <SevSeg_voidSingleRangeCounter+0x80>
    1f4c:	58 c1       	rjmp	.+688    	; 0x21fe <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    1f4e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f52:	98 17       	cp	r25, r24
    1f54:	0c f0       	brlt	.+2      	; 0x1f58 <SevSeg_voidSingleRangeCounter+0x8a>
    1f56:	aa c0       	rjmp	.+340    	; 0x20ac <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1f58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5a:	99 27       	eor	r25, r25
    1f5c:	87 fd       	sbrc	r24, 7
    1f5e:	90 95       	com	r25
    1f60:	a9 2f       	mov	r26, r25
    1f62:	b9 2f       	mov	r27, r25
    1f64:	8d 8f       	std	Y+29, r24	; 0x1d
    1f66:	9e 8f       	std	Y+30, r25	; 0x1e
    1f68:	af 8f       	std	Y+31, r26	; 0x1f
    1f6a:	b8 a3       	std	Y+32, r27	; 0x20
    1f6c:	8d c0       	rjmp	.+282    	; 0x2088 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1f6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f72:	af 8d       	ldd	r26, Y+31	; 0x1f
    1f74:	b8 a1       	ldd	r27, Y+32	; 0x20
    1f76:	9e 01       	movw	r18, r28
    1f78:	2f 5d       	subi	r18, 0xDF	; 223
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	e8 0f       	add	r30, r24
    1f80:	f9 1f       	adc	r31, r25
    1f82:	80 81       	ld	r24, Z
    1f84:	98 2f       	mov	r25, r24
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	69 2f       	mov	r22, r25
    1f8a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e2       	ldi	r26, 0x20	; 32
    1f94:	b1 e4       	ldi	r27, 0x41	; 65
    1f96:	89 8f       	std	Y+25, r24	; 0x19
    1f98:	9a 8f       	std	Y+26, r25	; 0x1a
    1f9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a e7       	ldi	r20, 0x7A	; 122
    1fac:	55 e4       	ldi	r21, 0x45	; 69
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8d 8b       	std	Y+21, r24	; 0x15
    1fb8:	9e 8b       	std	Y+22, r25	; 0x16
    1fba:	af 8b       	std	Y+23, r26	; 0x17
    1fbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 8b       	std	Y+20, r25	; 0x14
    1fdc:	8b 8b       	std	Y+19, r24	; 0x13
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    1fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	3f ef       	ldi	r19, 0xFF	; 255
    1fec:	4f e7       	ldi	r20, 0x7F	; 127
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <SevSeg_voidSingleRangeCounter+0x172>
    2022:	80 e9       	ldi	r24, 0x90	; 144
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	9a 8b       	std	Y+18, r25	; 0x12
    2028:	89 8b       	std	Y+17, r24	; 0x11
    202a:	89 89       	ldd	r24, Y+17	; 0x11
    202c:	9a 89       	ldd	r25, Y+18	; 0x12
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <SevSeg_voidSingleRangeCounter+0x160>
    2032:	9a 8b       	std	Y+18, r25	; 0x12
    2034:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	69 f7       	brne	.-38     	; 0x2022 <SevSeg_voidSingleRangeCounter+0x154>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6d 89       	ldd	r22, Y+21	; 0x15
    204c:	7e 89       	ldd	r23, Y+22	; 0x16
    204e:	8f 89       	ldd	r24, Y+23	; 0x17
    2050:	98 8d       	ldd	r25, Y+24	; 0x18
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	98 8b       	std	Y+16, r25	; 0x10
    2064:	8f 87       	std	Y+15, r24	; 0x0f
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	98 89       	ldd	r25, Y+16	; 0x10
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <SevSeg_voidSingleRangeCounter+0x19c>
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    2072:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2074:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2076:	af 8d       	ldd	r26, Y+31	; 0x1f
    2078:	b8 a1       	ldd	r27, Y+32	; 0x20
    207a:	01 96       	adiw	r24, 0x01	; 1
    207c:	a1 1d       	adc	r26, r1
    207e:	b1 1d       	adc	r27, r1
    2080:	8d 8f       	std	Y+29, r24	; 0x1d
    2082:	9e 8f       	std	Y+30, r25	; 0x1e
    2084:	af 8f       	std	Y+31, r26	; 0x1f
    2086:	b8 a3       	std	Y+32, r27	; 0x20
    2088:	8c a5       	ldd	r24, Y+44	; 0x2c
    208a:	28 2f       	mov	r18, r24
    208c:	33 27       	eor	r19, r19
    208e:	27 fd       	sbrc	r18, 7
    2090:	30 95       	com	r19
    2092:	43 2f       	mov	r20, r19
    2094:	53 2f       	mov	r21, r19
    2096:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2098:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209a:	af 8d       	ldd	r26, Y+31	; 0x1f
    209c:	b8 a1       	ldd	r27, Y+32	; 0x20
    209e:	82 17       	cp	r24, r18
    20a0:	93 07       	cpc	r25, r19
    20a2:	a4 07       	cpc	r26, r20
    20a4:	b5 07       	cpc	r27, r21
    20a6:	0c f4       	brge	.+2      	; 0x20aa <SevSeg_voidSingleRangeCounter+0x1dc>
    20a8:	62 cf       	rjmp	.-316    	; 0x1f6e <SevSeg_voidSingleRangeCounter+0xa0>
    20aa:	a9 c0       	rjmp	.+338    	; 0x21fe <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    20ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    20ae:	99 27       	eor	r25, r25
    20b0:	87 fd       	sbrc	r24, 7
    20b2:	90 95       	com	r25
    20b4:	a9 2f       	mov	r26, r25
    20b6:	b9 2f       	mov	r27, r25
    20b8:	8d 8f       	std	Y+29, r24	; 0x1d
    20ba:	9e 8f       	std	Y+30, r25	; 0x1e
    20bc:	af 8f       	std	Y+31, r26	; 0x1f
    20be:	b8 a3       	std	Y+32, r27	; 0x20
    20c0:	8d c0       	rjmp	.+282    	; 0x21dc <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    20c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c6:	af 8d       	ldd	r26, Y+31	; 0x1f
    20c8:	b8 a1       	ldd	r27, Y+32	; 0x20
    20ca:	9e 01       	movw	r18, r28
    20cc:	2f 5d       	subi	r18, 0xDF	; 223
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	f9 01       	movw	r30, r18
    20d2:	e8 0f       	add	r30, r24
    20d4:	f9 1f       	adc	r31, r25
    20d6:	80 81       	ld	r24, Z
    20d8:	98 2f       	mov	r25, r24
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	69 2f       	mov	r22, r25
    20de:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e2       	ldi	r26, 0x20	; 32
    20e8:	b1 e4       	ldi	r27, 0x41	; 65
    20ea:	8b 87       	std	Y+11, r24	; 0x0b
    20ec:	9c 87       	std	Y+12, r25	; 0x0c
    20ee:	ad 87       	std	Y+13, r26	; 0x0d
    20f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8f 83       	std	Y+7, r24	; 0x07
    210c:	98 87       	std	Y+8, r25	; 0x08
    210e:	a9 87       	std	Y+9, r26	; 0x09
    2110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <SevSeg_voidSingleRangeCounter+0x2c6>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <SevSeg_voidSingleRangeCounter+0x2b4>
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <SevSeg_voidSingleRangeCounter+0x2a8>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <SevSeg_voidSingleRangeCounter+0x2f0>
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    21c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ca:	af 8d       	ldd	r26, Y+31	; 0x1f
    21cc:	b8 a1       	ldd	r27, Y+32	; 0x20
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	a1 09       	sbc	r26, r1
    21d2:	b1 09       	sbc	r27, r1
    21d4:	8d 8f       	std	Y+29, r24	; 0x1d
    21d6:	9e 8f       	std	Y+30, r25	; 0x1e
    21d8:	af 8f       	std	Y+31, r26	; 0x1f
    21da:	b8 a3       	std	Y+32, r27	; 0x20
    21dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    21de:	28 2f       	mov	r18, r24
    21e0:	33 27       	eor	r19, r19
    21e2:	27 fd       	sbrc	r18, 7
    21e4:	30 95       	com	r19
    21e6:	43 2f       	mov	r20, r19
    21e8:	53 2f       	mov	r21, r19
    21ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ee:	af 8d       	ldd	r26, Y+31	; 0x1f
    21f0:	b8 a1       	ldd	r27, Y+32	; 0x20
    21f2:	82 17       	cp	r24, r18
    21f4:	93 07       	cpc	r25, r19
    21f6:	a4 07       	cpc	r26, r20
    21f8:	b5 07       	cpc	r27, r21
    21fa:	0c f0       	brlt	.+2      	; 0x21fe <SevSeg_voidSingleRangeCounter+0x330>
    21fc:	62 cf       	rjmp	.-316    	; 0x20c2 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    21fe:	e1 96       	adiw	r28, 0x31	; 49
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	e9 97       	sbiw	r28, 0x39	; 57
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	8b ab       	std	Y+51, r24	; 0x33
    2226:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    2228:	ce 01       	movw	r24, r28
    222a:	89 96       	adiw	r24, 0x29	; 41
    222c:	9e ab       	std	Y+54, r25	; 0x36
    222e:	8d ab       	std	Y+53, r24	; 0x35
    2230:	e7 ef       	ldi	r30, 0xF7	; 247
    2232:	f1 e0       	ldi	r31, 0x01	; 1
    2234:	f8 af       	std	Y+56, r31	; 0x38
    2236:	ef ab       	std	Y+55, r30	; 0x37
    2238:	fa e0       	ldi	r31, 0x0A	; 10
    223a:	f9 af       	std	Y+57, r31	; 0x39
    223c:	ef a9       	ldd	r30, Y+55	; 0x37
    223e:	f8 ad       	ldd	r31, Y+56	; 0x38
    2240:	00 80       	ld	r0, Z
    2242:	8f a9       	ldd	r24, Y+55	; 0x37
    2244:	98 ad       	ldd	r25, Y+56	; 0x38
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	98 af       	std	Y+56, r25	; 0x38
    224a:	8f ab       	std	Y+55, r24	; 0x37
    224c:	ed a9       	ldd	r30, Y+53	; 0x35
    224e:	fe a9       	ldd	r31, Y+54	; 0x36
    2250:	00 82       	st	Z, r0
    2252:	8d a9       	ldd	r24, Y+53	; 0x35
    2254:	9e a9       	ldd	r25, Y+54	; 0x36
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	9e ab       	std	Y+54, r25	; 0x36
    225a:	8d ab       	std	Y+53, r24	; 0x35
    225c:	99 ad       	ldd	r25, Y+57	; 0x39
    225e:	91 50       	subi	r25, 0x01	; 1
    2260:	99 af       	std	Y+57, r25	; 0x39
    2262:	e9 ad       	ldd	r30, Y+57	; 0x39
    2264:	ee 23       	and	r30, r30
    2266:	51 f7       	brne	.-44     	; 0x223c <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    2268:	8b a9       	ldd	r24, Y+51	; 0x33
    226a:	9a e0       	ldi	r25, 0x0A	; 10
    226c:	69 2f       	mov	r22, r25
    226e:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2272:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    2274:	8b a9       	ldd	r24, Y+51	; 0x33
    2276:	9a e0       	ldi	r25, 0x0A	; 10
    2278:	69 2f       	mov	r22, r25
    227a:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    227e:	89 2f       	mov	r24, r25
    2280:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    2282:	8c a9       	ldd	r24, Y+52	; 0x34
    2284:	9a e0       	ldi	r25, 0x0A	; 10
    2286:	69 2f       	mov	r22, r25
    2288:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    228c:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    228e:	8c a9       	ldd	r24, Y+52	; 0x34
    2290:	9a e0       	ldi	r25, 0x0A	; 10
    2292:	69 2f       	mov	r22, r25
    2294:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2298:	89 2f       	mov	r24, r25
    229a:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    229c:	19 a2       	std	Y+33, r1	; 0x21
    229e:	1a a2       	std	Y+34, r1	; 0x22
    22a0:	1b a2       	std	Y+35, r1	; 0x23
    22a2:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    22a4:	1d 8e       	std	Y+29, r1	; 0x1d
    22a6:	1e 8e       	std	Y+30, r1	; 0x1e
    22a8:	1f 8e       	std	Y+31, r1	; 0x1f
    22aa:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    22ac:	88 a5       	ldd	r24, Y+40	; 0x28
    22ae:	88 23       	and	r24, r24
    22b0:	0c f4       	brge	.+2      	; 0x22b4 <SevSeg_voidDoubleRangeCounter+0xa4>
    22b2:	05 c2       	rjmp	.+1034   	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>
    22b4:	88 a5       	ldd	r24, Y+40	; 0x28
    22b6:	8a 30       	cpi	r24, 0x0A	; 10
    22b8:	0c f0       	brlt	.+2      	; 0x22bc <SevSeg_voidDoubleRangeCounter+0xac>
    22ba:	01 c2       	rjmp	.+1026   	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>
    22bc:	8e a1       	ldd	r24, Y+38	; 0x26
    22be:	8a 30       	cpi	r24, 0x0A	; 10
    22c0:	0c f0       	brlt	.+2      	; 0x22c4 <SevSeg_voidDoubleRangeCounter+0xb4>
    22c2:	fd c1       	rjmp	.+1018   	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>
    22c4:	8e a1       	ldd	r24, Y+38	; 0x26
    22c6:	88 23       	and	r24, r24
    22c8:	0c f4       	brge	.+2      	; 0x22cc <SevSeg_voidDoubleRangeCounter+0xbc>
    22ca:	f9 c1       	rjmp	.+1010   	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    22cc:	9b a9       	ldd	r25, Y+51	; 0x33
    22ce:	8c a9       	ldd	r24, Y+52	; 0x34
    22d0:	98 17       	cp	r25, r24
    22d2:	0c f0       	brlt	.+2      	; 0x22d6 <SevSeg_voidDoubleRangeCounter+0xc6>
    22d4:	fc c0       	rjmp	.+504    	; 0x24ce <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    22d6:	88 a5       	ldd	r24, Y+40	; 0x28
    22d8:	99 27       	eor	r25, r25
    22da:	87 fd       	sbrc	r24, 7
    22dc:	90 95       	com	r25
    22de:	a9 2f       	mov	r26, r25
    22e0:	b9 2f       	mov	r27, r25
    22e2:	89 a3       	std	Y+33, r24	; 0x21
    22e4:	9a a3       	std	Y+34, r25	; 0x22
    22e6:	ab a3       	std	Y+35, r26	; 0x23
    22e8:	bc a3       	std	Y+36, r27	; 0x24
    22ea:	df c0       	rjmp	.+446    	; 0x24aa <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	ab a1       	ldd	r26, Y+35	; 0x23
    22f2:	bc a1       	ldd	r27, Y+36	; 0x24
    22f4:	9e 01       	movw	r18, r28
    22f6:	27 5d       	subi	r18, 0xD7	; 215
    22f8:	3f 4f       	sbci	r19, 0xFF	; 255
    22fa:	f9 01       	movw	r30, r18
    22fc:	e8 0f       	add	r30, r24
    22fe:	f9 1f       	adc	r31, r25
    2300:	80 81       	ld	r24, Z
    2302:	98 2f       	mov	r25, r24
    2304:	84 e0       	ldi	r24, 0x04	; 4
    2306:	69 2f       	mov	r22, r25
    2308:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    230c:	8f a1       	ldd	r24, Y+39	; 0x27
    230e:	99 27       	eor	r25, r25
    2310:	87 fd       	sbrc	r24, 7
    2312:	90 95       	com	r25
    2314:	a9 2f       	mov	r26, r25
    2316:	b9 2f       	mov	r27, r25
    2318:	8d 8f       	std	Y+29, r24	; 0x1d
    231a:	9e 8f       	std	Y+30, r25	; 0x1e
    231c:	af 8f       	std	Y+31, r26	; 0x1f
    231e:	b8 a3       	std	Y+32, r27	; 0x20
    2320:	ae c0       	rjmp	.+348    	; 0x247e <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2322:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2324:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2326:	af 8d       	ldd	r26, Y+31	; 0x1f
    2328:	b8 a1       	ldd	r27, Y+32	; 0x20
    232a:	9e 01       	movw	r18, r28
    232c:	27 5d       	subi	r18, 0xD7	; 215
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	f9 01       	movw	r30, r18
    2332:	e8 0f       	add	r30, r24
    2334:	f9 1f       	adc	r31, r25
    2336:	80 81       	ld	r24, Z
    2338:	98 2f       	mov	r25, r24
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	69 2f       	mov	r22, r25
    233e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e2       	ldi	r26, 0x20	; 32
    2348:	b1 e4       	ldi	r27, 0x41	; 65
    234a:	89 8f       	std	Y+25, r24	; 0x19
    234c:	9a 8f       	std	Y+26, r25	; 0x1a
    234e:	ab 8f       	std	Y+27, r26	; 0x1b
    2350:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a e7       	ldi	r20, 0x7A	; 122
    2360:	55 e4       	ldi	r21, 0x45	; 69
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8d 8b       	std	Y+21, r24	; 0x15
    236c:	9e 8b       	std	Y+22, r25	; 0x16
    236e:	af 8b       	std	Y+23, r26	; 0x17
    2370:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2372:	6d 89       	ldd	r22, Y+21	; 0x15
    2374:	7e 89       	ldd	r23, Y+22	; 0x16
    2376:	8f 89       	ldd	r24, Y+23	; 0x17
    2378:	98 8d       	ldd	r25, Y+24	; 0x18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	69 8d       	ldd	r22, Y+25	; 0x19
    23ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <SevSeg_voidDoubleRangeCounter+0x1e4>
    23d6:	80 e9       	ldi	r24, 0x90	; 144
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	9a 8b       	std	Y+18, r25	; 0x12
    23dc:	89 8b       	std	Y+17, r24	; 0x11
    23de:	89 89       	ldd	r24, Y+17	; 0x11
    23e0:	9a 89       	ldd	r25, Y+18	; 0x12
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <SevSeg_voidDoubleRangeCounter+0x1d2>
    23e6:	9a 8b       	std	Y+18, r25	; 0x12
    23e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <SevSeg_voidDoubleRangeCounter+0x1c6>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	98 8b       	std	Y+16, r25	; 0x10
    2418:	8f 87       	std	Y+15, r24	; 0x0f
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	98 89       	ldd	r25, Y+16	; 0x10
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <SevSeg_voidDoubleRangeCounter+0x20e>
    2422:	98 8b       	std	Y+16, r25	; 0x10
    2424:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	28 2f       	mov	r18, r24
    242a:	33 27       	eor	r19, r19
    242c:	27 fd       	sbrc	r18, 7
    242e:	30 95       	com	r19
    2430:	43 2f       	mov	r20, r19
    2432:	53 2f       	mov	r21, r19
    2434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2436:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2438:	af 8d       	ldd	r26, Y+31	; 0x1f
    243a:	b8 a1       	ldd	r27, Y+32	; 0x20
    243c:	28 17       	cp	r18, r24
    243e:	39 07       	cpc	r19, r25
    2440:	4a 07       	cpc	r20, r26
    2442:	5b 07       	cpc	r21, r27
    2444:	89 f4       	brne	.+34     	; 0x2468 <SevSeg_voidDoubleRangeCounter+0x258>
    2446:	8e a1       	ldd	r24, Y+38	; 0x26
    2448:	28 2f       	mov	r18, r24
    244a:	33 27       	eor	r19, r19
    244c:	27 fd       	sbrc	r18, 7
    244e:	30 95       	com	r19
    2450:	43 2f       	mov	r20, r19
    2452:	53 2f       	mov	r21, r19
    2454:	89 a1       	ldd	r24, Y+33	; 0x21
    2456:	9a a1       	ldd	r25, Y+34	; 0x22
    2458:	ab a1       	ldd	r26, Y+35	; 0x23
    245a:	bc a1       	ldd	r27, Y+36	; 0x24
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	4a 07       	cpc	r20, r26
    2462:	5b 07       	cpc	r21, r27
    2464:	09 f4       	brne	.+2      	; 0x2468 <SevSeg_voidDoubleRangeCounter+0x258>
    2466:	2b c1       	rjmp	.+598    	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2468:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    246c:	af 8d       	ldd	r26, Y+31	; 0x1f
    246e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	a1 1d       	adc	r26, r1
    2474:	b1 1d       	adc	r27, r1
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
    2478:	9e 8f       	std	Y+30, r25	; 0x1e
    247a:	af 8f       	std	Y+31, r26	; 0x1f
    247c:	b8 a3       	std	Y+32, r27	; 0x20
    247e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2480:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2482:	af 8d       	ldd	r26, Y+31	; 0x1f
    2484:	b8 a1       	ldd	r27, Y+32	; 0x20
    2486:	8a 30       	cpi	r24, 0x0A	; 10
    2488:	91 05       	cpc	r25, r1
    248a:	a1 05       	cpc	r26, r1
    248c:	b1 05       	cpc	r27, r1
    248e:	0c f4       	brge	.+2      	; 0x2492 <SevSeg_voidDoubleRangeCounter+0x282>
    2490:	48 cf       	rjmp	.-368    	; 0x2322 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2492:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2494:	89 a1       	ldd	r24, Y+33	; 0x21
    2496:	9a a1       	ldd	r25, Y+34	; 0x22
    2498:	ab a1       	ldd	r26, Y+35	; 0x23
    249a:	bc a1       	ldd	r27, Y+36	; 0x24
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	a1 1d       	adc	r26, r1
    24a0:	b1 1d       	adc	r27, r1
    24a2:	89 a3       	std	Y+33, r24	; 0x21
    24a4:	9a a3       	std	Y+34, r25	; 0x22
    24a6:	ab a3       	std	Y+35, r26	; 0x23
    24a8:	bc a3       	std	Y+36, r27	; 0x24
    24aa:	8e a1       	ldd	r24, Y+38	; 0x26
    24ac:	28 2f       	mov	r18, r24
    24ae:	33 27       	eor	r19, r19
    24b0:	27 fd       	sbrc	r18, 7
    24b2:	30 95       	com	r19
    24b4:	43 2f       	mov	r20, r19
    24b6:	53 2f       	mov	r21, r19
    24b8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ba:	9a a1       	ldd	r25, Y+34	; 0x22
    24bc:	ab a1       	ldd	r26, Y+35	; 0x23
    24be:	bc a1       	ldd	r27, Y+36	; 0x24
    24c0:	28 17       	cp	r18, r24
    24c2:	39 07       	cpc	r19, r25
    24c4:	4a 07       	cpc	r20, r26
    24c6:	5b 07       	cpc	r21, r27
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <SevSeg_voidDoubleRangeCounter+0x2bc>
    24ca:	10 cf       	rjmp	.-480    	; 0x22ec <SevSeg_voidDoubleRangeCounter+0xdc>
    24cc:	f8 c0       	rjmp	.+496    	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    24ce:	88 a5       	ldd	r24, Y+40	; 0x28
    24d0:	99 27       	eor	r25, r25
    24d2:	87 fd       	sbrc	r24, 7
    24d4:	90 95       	com	r25
    24d6:	a9 2f       	mov	r26, r25
    24d8:	b9 2f       	mov	r27, r25
    24da:	89 a3       	std	Y+33, r24	; 0x21
    24dc:	9a a3       	std	Y+34, r25	; 0x22
    24de:	ab a3       	std	Y+35, r26	; 0x23
    24e0:	bc a3       	std	Y+36, r27	; 0x24
    24e2:	dc c0       	rjmp	.+440    	; 0x269c <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	ab a1       	ldd	r26, Y+35	; 0x23
    24ea:	bc a1       	ldd	r27, Y+36	; 0x24
    24ec:	9e 01       	movw	r18, r28
    24ee:	27 5d       	subi	r18, 0xD7	; 215
    24f0:	3f 4f       	sbci	r19, 0xFF	; 255
    24f2:	f9 01       	movw	r30, r18
    24f4:	e8 0f       	add	r30, r24
    24f6:	f9 1f       	adc	r31, r25
    24f8:	80 81       	ld	r24, Z
    24fa:	98 2f       	mov	r25, r24
    24fc:	84 e0       	ldi	r24, 0x04	; 4
    24fe:	69 2f       	mov	r22, r25
    2500:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2504:	8f a1       	ldd	r24, Y+39	; 0x27
    2506:	99 27       	eor	r25, r25
    2508:	87 fd       	sbrc	r24, 7
    250a:	90 95       	com	r25
    250c:	a9 2f       	mov	r26, r25
    250e:	b9 2f       	mov	r27, r25
    2510:	8d 8f       	std	Y+29, r24	; 0x1d
    2512:	9e 8f       	std	Y+30, r25	; 0x1e
    2514:	af 8f       	std	Y+31, r26	; 0x1f
    2516:	b8 a3       	std	Y+32, r27	; 0x20
    2518:	ad c0       	rjmp	.+346    	; 0x2674 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    251a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    251e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2520:	b8 a1       	ldd	r27, Y+32	; 0x20
    2522:	9e 01       	movw	r18, r28
    2524:	27 5d       	subi	r18, 0xD7	; 215
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	f9 01       	movw	r30, r18
    252a:	e8 0f       	add	r30, r24
    252c:	f9 1f       	adc	r31, r25
    252e:	80 81       	ld	r24, Z
    2530:	98 2f       	mov	r25, r24
    2532:	82 e0       	ldi	r24, 0x02	; 2
    2534:	69 2f       	mov	r22, r25
    2536:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e2       	ldi	r26, 0x20	; 32
    2540:	b1 e4       	ldi	r27, 0x41	; 65
    2542:	8b 87       	std	Y+11, r24	; 0x0b
    2544:	9c 87       	std	Y+12, r25	; 0x0c
    2546:	ad 87       	std	Y+13, r26	; 0x0d
    2548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6b 85       	ldd	r22, Y+11	; 0x0b
    254c:	7c 85       	ldd	r23, Y+12	; 0x0c
    254e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2550:	9e 85       	ldd	r25, Y+14	; 0x0e
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a e7       	ldi	r20, 0x7A	; 122
    2558:	55 e4       	ldi	r21, 0x45	; 69
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8f 83       	std	Y+7, r24	; 0x07
    2564:	98 87       	std	Y+8, r25	; 0x08
    2566:	a9 87       	std	Y+9, r26	; 0x09
    2568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9e 83       	std	Y+6, r25	; 0x06
    2588:	8d 83       	std	Y+5, r24	; 0x05
    258a:	3f c0       	rjmp	.+126    	; 0x260a <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <SevSeg_voidDoubleRangeCounter+0x3dc>
    25ce:	80 e9       	ldi	r24, 0x90	; 144
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	9c 83       	std	Y+4, r25	; 0x04
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <SevSeg_voidDoubleRangeCounter+0x3ca>
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <SevSeg_voidDoubleRangeCounter+0x3be>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	6f 81       	ldd	r22, Y+7	; 0x07
    25f8:	78 85       	ldd	r23, Y+8	; 0x08
    25fa:	89 85       	ldd	r24, Y+9	; 0x09
    25fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <SevSeg_voidDoubleRangeCounter+0x406>
    261a:	9a 83       	std	Y+2, r25	; 0x02
    261c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    261e:	8d a1       	ldd	r24, Y+37	; 0x25
    2620:	28 2f       	mov	r18, r24
    2622:	33 27       	eor	r19, r19
    2624:	27 fd       	sbrc	r18, 7
    2626:	30 95       	com	r19
    2628:	43 2f       	mov	r20, r19
    262a:	53 2f       	mov	r21, r19
    262c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    262e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2630:	af 8d       	ldd	r26, Y+31	; 0x1f
    2632:	b8 a1       	ldd	r27, Y+32	; 0x20
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	4a 07       	cpc	r20, r26
    263a:	5b 07       	cpc	r21, r27
    263c:	81 f4       	brne	.+32     	; 0x265e <SevSeg_voidDoubleRangeCounter+0x44e>
    263e:	8e a1       	ldd	r24, Y+38	; 0x26
    2640:	28 2f       	mov	r18, r24
    2642:	33 27       	eor	r19, r19
    2644:	27 fd       	sbrc	r18, 7
    2646:	30 95       	com	r19
    2648:	43 2f       	mov	r20, r19
    264a:	53 2f       	mov	r21, r19
    264c:	89 a1       	ldd	r24, Y+33	; 0x21
    264e:	9a a1       	ldd	r25, Y+34	; 0x22
    2650:	ab a1       	ldd	r26, Y+35	; 0x23
    2652:	bc a1       	ldd	r27, Y+36	; 0x24
    2654:	28 17       	cp	r18, r24
    2656:	39 07       	cpc	r19, r25
    2658:	4a 07       	cpc	r20, r26
    265a:	5b 07       	cpc	r21, r27
    265c:	81 f1       	breq	.+96     	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    265e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2660:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2662:	af 8d       	ldd	r26, Y+31	; 0x1f
    2664:	b8 a1       	ldd	r27, Y+32	; 0x20
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	a1 09       	sbc	r26, r1
    266a:	b1 09       	sbc	r27, r1
    266c:	8d 8f       	std	Y+29, r24	; 0x1d
    266e:	9e 8f       	std	Y+30, r25	; 0x1e
    2670:	af 8f       	std	Y+31, r26	; 0x1f
    2672:	b8 a3       	std	Y+32, r27	; 0x20
    2674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2678:	af 8d       	ldd	r26, Y+31	; 0x1f
    267a:	b8 a1       	ldd	r27, Y+32	; 0x20
    267c:	bb 23       	and	r27, r27
    267e:	0c f0       	brlt	.+2      	; 0x2682 <SevSeg_voidDoubleRangeCounter+0x472>
    2680:	4c cf       	rjmp	.-360    	; 0x251a <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    2682:	89 e0       	ldi	r24, 0x09	; 9
    2684:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2686:	89 a1       	ldd	r24, Y+33	; 0x21
    2688:	9a a1       	ldd	r25, Y+34	; 0x22
    268a:	ab a1       	ldd	r26, Y+35	; 0x23
    268c:	bc a1       	ldd	r27, Y+36	; 0x24
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	a1 09       	sbc	r26, r1
    2692:	b1 09       	sbc	r27, r1
    2694:	89 a3       	std	Y+33, r24	; 0x21
    2696:	9a a3       	std	Y+34, r25	; 0x22
    2698:	ab a3       	std	Y+35, r26	; 0x23
    269a:	bc a3       	std	Y+36, r27	; 0x24
    269c:	8e a1       	ldd	r24, Y+38	; 0x26
    269e:	28 2f       	mov	r18, r24
    26a0:	33 27       	eor	r19, r19
    26a2:	27 fd       	sbrc	r18, 7
    26a4:	30 95       	com	r19
    26a6:	43 2f       	mov	r20, r19
    26a8:	53 2f       	mov	r21, r19
    26aa:	89 a1       	ldd	r24, Y+33	; 0x21
    26ac:	9a a1       	ldd	r25, Y+34	; 0x22
    26ae:	ab a1       	ldd	r26, Y+35	; 0x23
    26b0:	bc a1       	ldd	r27, Y+36	; 0x24
    26b2:	82 17       	cp	r24, r18
    26b4:	93 07       	cpc	r25, r19
    26b6:	a4 07       	cpc	r26, r20
    26b8:	b5 07       	cpc	r27, r21
    26ba:	0c f0       	brlt	.+2      	; 0x26be <SevSeg_voidDoubleRangeCounter+0x4ae>
    26bc:	13 cf       	rjmp	.-474    	; 0x24e4 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    26be:	e9 96       	adiw	r28, 0x39	; 57
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <SevSeg_voidBCDDisplay+0x6>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	6a 81       	ldd	r22, Y+2	; 0x02
    26e2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	ab 97       	sbiw	r28, 0x2b	; 43
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	8a a7       	std	Y+42, r24	; 0x2a
    2706:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    2708:	8a a5       	ldd	r24, Y+42	; 0x2a
    270a:	9a e0       	ldi	r25, 0x0A	; 10
    270c:	69 2f       	mov	r22, r25
    270e:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2712:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    2714:	8a a5       	ldd	r24, Y+42	; 0x2a
    2716:	9a e0       	ldi	r25, 0x0A	; 10
    2718:	69 2f       	mov	r22, r25
    271a:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    271e:	89 2f       	mov	r24, r25
    2720:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    2722:	8b a5       	ldd	r24, Y+43	; 0x2b
    2724:	9a e0       	ldi	r25, 0x0A	; 10
    2726:	69 2f       	mov	r22, r25
    2728:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    272c:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    272e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2730:	9a e0       	ldi	r25, 0x0A	; 10
    2732:	69 2f       	mov	r22, r25
    2734:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2738:	89 2f       	mov	r24, r25
    273a:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    273c:	1a a2       	std	Y+34, r1	; 0x22
    273e:	1b a2       	std	Y+35, r1	; 0x23
    2740:	1c a2       	std	Y+36, r1	; 0x24
    2742:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    2744:	1e 8e       	std	Y+30, r1	; 0x1e
    2746:	1f 8e       	std	Y+31, r1	; 0x1f
    2748:	18 a2       	std	Y+32, r1	; 0x20
    274a:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    274c:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    274e:	89 a5       	ldd	r24, Y+41	; 0x29
    2750:	88 23       	and	r24, r24
    2752:	0c f4       	brge	.+2      	; 0x2756 <SevSeg_voidBCDDoubleDisplay+0x66>
    2754:	11 c2       	rjmp	.+1058   	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>
    2756:	89 a5       	ldd	r24, Y+41	; 0x29
    2758:	8a 30       	cpi	r24, 0x0A	; 10
    275a:	0c f0       	brlt	.+2      	; 0x275e <SevSeg_voidBCDDoubleDisplay+0x6e>
    275c:	0d c2       	rjmp	.+1050   	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>
    275e:	8f a1       	ldd	r24, Y+39	; 0x27
    2760:	8a 30       	cpi	r24, 0x0A	; 10
    2762:	0c f0       	brlt	.+2      	; 0x2766 <SevSeg_voidBCDDoubleDisplay+0x76>
    2764:	09 c2       	rjmp	.+1042   	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>
    2766:	8f a1       	ldd	r24, Y+39	; 0x27
    2768:	88 23       	and	r24, r24
    276a:	0c f4       	brge	.+2      	; 0x276e <SevSeg_voidBCDDoubleDisplay+0x7e>
    276c:	05 c2       	rjmp	.+1034   	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    276e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2770:	8b a5       	ldd	r24, Y+43	; 0x2b
    2772:	98 17       	cp	r25, r24
    2774:	0c f0       	brlt	.+2      	; 0x2778 <SevSeg_voidBCDDoubleDisplay+0x88>
    2776:	02 c1       	rjmp	.+516    	; 0x297c <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2778:	89 a5       	ldd	r24, Y+41	; 0x29
    277a:	99 27       	eor	r25, r25
    277c:	87 fd       	sbrc	r24, 7
    277e:	90 95       	com	r25
    2780:	a9 2f       	mov	r26, r25
    2782:	b9 2f       	mov	r27, r25
    2784:	8a a3       	std	Y+34, r24	; 0x22
    2786:	9b a3       	std	Y+35, r25	; 0x23
    2788:	ac a3       	std	Y+36, r26	; 0x24
    278a:	bd a3       	std	Y+37, r27	; 0x25
    278c:	e5 c0       	rjmp	.+458    	; 0x2958 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    278e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2790:	8f 70       	andi	r24, 0x0F	; 15
    2792:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2794:	8a a1       	ldd	r24, Y+34	; 0x22
    2796:	9b a1       	ldd	r25, Y+35	; 0x23
    2798:	ac a1       	ldd	r26, Y+36	; 0x24
    279a:	bd a1       	ldd	r27, Y+37	; 0x25
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	aa 1f       	adc	r26, r26
    27a2:	bb 1f       	adc	r27, r27
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	aa 1f       	adc	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	aa 1f       	adc	r26, r26
    27b2:	bb 1f       	adc	r27, r27
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	aa 1f       	adc	r26, r26
    27ba:	bb 1f       	adc	r27, r27
    27bc:	98 2f       	mov	r25, r24
    27be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c0:	89 2b       	or	r24, r25
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    27c4:	88 a5       	ldd	r24, Y+40	; 0x28
    27c6:	99 27       	eor	r25, r25
    27c8:	87 fd       	sbrc	r24, 7
    27ca:	90 95       	com	r25
    27cc:	a9 2f       	mov	r26, r25
    27ce:	b9 2f       	mov	r27, r25
    27d0:	8e 8f       	std	Y+30, r24	; 0x1e
    27d2:	9f 8f       	std	Y+31, r25	; 0x1f
    27d4:	a8 a3       	std	Y+32, r26	; 0x20
    27d6:	b9 a3       	std	Y+33, r27	; 0x21
    27d8:	a9 c0       	rjmp	.+338    	; 0x292c <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    27da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27dc:	80 7f       	andi	r24, 0xF0	; 240
    27de:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    27e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e4:	89 2b       	or	r24, r25
    27e6:	8d 8f       	std	Y+29, r24	; 0x1d
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a0 e2       	ldi	r26, 0x20	; 32
    27ee:	b1 e4       	ldi	r27, 0x41	; 65
    27f0:	89 8f       	std	Y+25, r24	; 0x19
    27f2:	9a 8f       	std	Y+26, r25	; 0x1a
    27f4:	ab 8f       	std	Y+27, r26	; 0x1b
    27f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	69 8d       	ldd	r22, Y+25	; 0x19
    27fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a e7       	ldi	r20, 0x7A	; 122
    2806:	55 e4       	ldi	r21, 0x45	; 69
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8d 8b       	std	Y+21, r24	; 0x15
    2812:	9e 8b       	std	Y+22, r25	; 0x16
    2814:	af 8b       	std	Y+23, r26	; 0x17
    2816:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    283a:	6d 89       	ldd	r22, Y+21	; 0x15
    283c:	7e 89       	ldd	r23, Y+22	; 0x16
    283e:	8f 89       	ldd	r24, Y+23	; 0x17
    2840:	98 8d       	ldd	r25, Y+24	; 0x18
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	69 8d       	ldd	r22, Y+25	; 0x19
    2854:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2858:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9c 8b       	std	Y+20, r25	; 0x14
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	0f c0       	rjmp	.+30     	; 0x289a <SevSeg_voidBCDDoubleDisplay+0x1aa>
    287c:	80 e9       	ldi	r24, 0x90	; 144
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	9a 8b       	std	Y+18, r25	; 0x12
    2882:	89 8b       	std	Y+17, r24	; 0x11
    2884:	89 89       	ldd	r24, Y+17	; 0x11
    2886:	9a 89       	ldd	r25, Y+18	; 0x12
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <SevSeg_voidBCDDoubleDisplay+0x198>
    288c:	9a 8b       	std	Y+18, r25	; 0x12
    288e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	8b 89       	ldd	r24, Y+19	; 0x13
    2892:	9c 89       	ldd	r25, Y+20	; 0x14
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9c 8b       	std	Y+20, r25	; 0x14
    2898:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <SevSeg_voidBCDDoubleDisplay+0x18c>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	98 8b       	std	Y+16, r25	; 0x10
    28be:	8f 87       	std	Y+15, r24	; 0x0f
    28c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c2:	98 89       	ldd	r25, Y+16	; 0x10
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    28c8:	98 8b       	std	Y+16, r25	; 0x10
    28ca:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28d0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    28d4:	8e a1       	ldd	r24, Y+38	; 0x26
    28d6:	28 2f       	mov	r18, r24
    28d8:	33 27       	eor	r19, r19
    28da:	27 fd       	sbrc	r18, 7
    28dc:	30 95       	com	r19
    28de:	43 2f       	mov	r20, r19
    28e0:	53 2f       	mov	r21, r19
    28e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28e6:	a8 a1       	ldd	r26, Y+32	; 0x20
    28e8:	b9 a1       	ldd	r27, Y+33	; 0x21
    28ea:	28 17       	cp	r18, r24
    28ec:	39 07       	cpc	r19, r25
    28ee:	4a 07       	cpc	r20, r26
    28f0:	5b 07       	cpc	r21, r27
    28f2:	89 f4       	brne	.+34     	; 0x2916 <SevSeg_voidBCDDoubleDisplay+0x226>
    28f4:	8f a1       	ldd	r24, Y+39	; 0x27
    28f6:	28 2f       	mov	r18, r24
    28f8:	33 27       	eor	r19, r19
    28fa:	27 fd       	sbrc	r18, 7
    28fc:	30 95       	com	r19
    28fe:	43 2f       	mov	r20, r19
    2900:	53 2f       	mov	r21, r19
    2902:	8a a1       	ldd	r24, Y+34	; 0x22
    2904:	9b a1       	ldd	r25, Y+35	; 0x23
    2906:	ac a1       	ldd	r26, Y+36	; 0x24
    2908:	bd a1       	ldd	r27, Y+37	; 0x25
    290a:	28 17       	cp	r18, r24
    290c:	39 07       	cpc	r19, r25
    290e:	4a 07       	cpc	r20, r26
    2910:	5b 07       	cpc	r21, r27
    2912:	09 f4       	brne	.+2      	; 0x2916 <SevSeg_voidBCDDoubleDisplay+0x226>
    2914:	31 c1       	rjmp	.+610    	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2916:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2918:	9f 8d       	ldd	r25, Y+31	; 0x1f
    291a:	a8 a1       	ldd	r26, Y+32	; 0x20
    291c:	b9 a1       	ldd	r27, Y+33	; 0x21
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	a1 1d       	adc	r26, r1
    2922:	b1 1d       	adc	r27, r1
    2924:	8e 8f       	std	Y+30, r24	; 0x1e
    2926:	9f 8f       	std	Y+31, r25	; 0x1f
    2928:	a8 a3       	std	Y+32, r26	; 0x20
    292a:	b9 a3       	std	Y+33, r27	; 0x21
    292c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    292e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2930:	a8 a1       	ldd	r26, Y+32	; 0x20
    2932:	b9 a1       	ldd	r27, Y+33	; 0x21
    2934:	8a 30       	cpi	r24, 0x0A	; 10
    2936:	91 05       	cpc	r25, r1
    2938:	a1 05       	cpc	r26, r1
    293a:	b1 05       	cpc	r27, r1
    293c:	0c f4       	brge	.+2      	; 0x2940 <SevSeg_voidBCDDoubleDisplay+0x250>
    293e:	4d cf       	rjmp	.-358    	; 0x27da <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2940:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2942:	8a a1       	ldd	r24, Y+34	; 0x22
    2944:	9b a1       	ldd	r25, Y+35	; 0x23
    2946:	ac a1       	ldd	r26, Y+36	; 0x24
    2948:	bd a1       	ldd	r27, Y+37	; 0x25
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	a1 1d       	adc	r26, r1
    294e:	b1 1d       	adc	r27, r1
    2950:	8a a3       	std	Y+34, r24	; 0x22
    2952:	9b a3       	std	Y+35, r25	; 0x23
    2954:	ac a3       	std	Y+36, r26	; 0x24
    2956:	bd a3       	std	Y+37, r27	; 0x25
    2958:	8f a1       	ldd	r24, Y+39	; 0x27
    295a:	28 2f       	mov	r18, r24
    295c:	33 27       	eor	r19, r19
    295e:	27 fd       	sbrc	r18, 7
    2960:	30 95       	com	r19
    2962:	43 2f       	mov	r20, r19
    2964:	53 2f       	mov	r21, r19
    2966:	8a a1       	ldd	r24, Y+34	; 0x22
    2968:	9b a1       	ldd	r25, Y+35	; 0x23
    296a:	ac a1       	ldd	r26, Y+36	; 0x24
    296c:	bd a1       	ldd	r27, Y+37	; 0x25
    296e:	28 17       	cp	r18, r24
    2970:	39 07       	cpc	r19, r25
    2972:	4a 07       	cpc	r20, r26
    2974:	5b 07       	cpc	r21, r27
    2976:	0c f0       	brlt	.+2      	; 0x297a <SevSeg_voidBCDDoubleDisplay+0x28a>
    2978:	0a cf       	rjmp	.-492    	; 0x278e <SevSeg_voidBCDDoubleDisplay+0x9e>
    297a:	fe c0       	rjmp	.+508    	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    297c:	89 a5       	ldd	r24, Y+41	; 0x29
    297e:	99 27       	eor	r25, r25
    2980:	87 fd       	sbrc	r24, 7
    2982:	90 95       	com	r25
    2984:	a9 2f       	mov	r26, r25
    2986:	b9 2f       	mov	r27, r25
    2988:	8a a3       	std	Y+34, r24	; 0x22
    298a:	9b a3       	std	Y+35, r25	; 0x23
    298c:	ac a3       	std	Y+36, r26	; 0x24
    298e:	bd a3       	std	Y+37, r27	; 0x25
    2990:	e2 c0       	rjmp	.+452    	; 0x2b56 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2994:	8f 70       	andi	r24, 0x0F	; 15
    2996:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2998:	8a a1       	ldd	r24, Y+34	; 0x22
    299a:	9b a1       	ldd	r25, Y+35	; 0x23
    299c:	ac a1       	ldd	r26, Y+36	; 0x24
    299e:	bd a1       	ldd	r27, Y+37	; 0x25
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	aa 1f       	adc	r26, r26
    29a6:	bb 1f       	adc	r27, r27
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	aa 1f       	adc	r26, r26
    29ae:	bb 1f       	adc	r27, r27
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	aa 1f       	adc	r26, r26
    29b6:	bb 1f       	adc	r27, r27
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	aa 1f       	adc	r26, r26
    29be:	bb 1f       	adc	r27, r27
    29c0:	98 2f       	mov	r25, r24
    29c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c4:	89 2b       	or	r24, r25
    29c6:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    29c8:	88 a5       	ldd	r24, Y+40	; 0x28
    29ca:	99 27       	eor	r25, r25
    29cc:	87 fd       	sbrc	r24, 7
    29ce:	90 95       	com	r25
    29d0:	a9 2f       	mov	r26, r25
    29d2:	b9 2f       	mov	r27, r25
    29d4:	8e 8f       	std	Y+30, r24	; 0x1e
    29d6:	9f 8f       	std	Y+31, r25	; 0x1f
    29d8:	a8 a3       	std	Y+32, r26	; 0x20
    29da:	b9 a3       	std	Y+33, r27	; 0x21
    29dc:	a8 c0       	rjmp	.+336    	; 0x2b2e <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    29de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e0:	80 7f       	andi	r24, 0xF0	; 240
    29e2:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    29e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e8:	89 2b       	or	r24, r25
    29ea:	8d 8f       	std	Y+29, r24	; 0x1d
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a0 e2       	ldi	r26, 0x20	; 32
    29f2:	b1 e4       	ldi	r27, 0x41	; 65
    29f4:	8b 87       	std	Y+11, r24	; 0x0b
    29f6:	9c 87       	std	Y+12, r25	; 0x0c
    29f8:	ad 87       	std	Y+13, r26	; 0x0d
    29fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4a e7       	ldi	r20, 0x7A	; 122
    2a0a:	55 e4       	ldi	r21, 0x45	; 69
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8f 83       	std	Y+7, r24	; 0x07
    2a16:	98 87       	std	Y+8, r25	; 0x08
    2a18:	a9 87       	std	Y+9, r26	; 0x09
    2a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e8       	ldi	r20, 0x80	; 128
    2a2a:	5f e3       	ldi	r21, 0x3F	; 63
    2a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	2c f4       	brge	.+10     	; 0x2a3e <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	3f c0       	rjmp	.+126    	; 0x2abc <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	4c f5       	brge	.+82     	; 0x2aa8 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e2       	ldi	r20, 0x20	; 32
    2a64:	51 e4       	ldi	r21, 0x41	; 65
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <SevSeg_voidBCDDoubleDisplay+0x3ae>
    2a80:	80 e9       	ldi	r24, 0x90	; 144
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <SevSeg_voidBCDDoubleDisplay+0x39c>
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	69 f7       	brne	.-38     	; 0x2a80 <SevSeg_voidBCDDoubleDisplay+0x390>
    2aa6:	14 c0       	rjmp	.+40     	; 0x2ad0 <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    2acc:	9a 83       	std	Y+2, r25	; 0x02
    2ace:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ad4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2ad8:	8e a1       	ldd	r24, Y+38	; 0x26
    2ada:	28 2f       	mov	r18, r24
    2adc:	33 27       	eor	r19, r19
    2ade:	27 fd       	sbrc	r18, 7
    2ae0:	30 95       	com	r19
    2ae2:	43 2f       	mov	r20, r19
    2ae4:	53 2f       	mov	r21, r19
    2ae6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ae8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aea:	a8 a1       	ldd	r26, Y+32	; 0x20
    2aec:	b9 a1       	ldd	r27, Y+33	; 0x21
    2aee:	28 17       	cp	r18, r24
    2af0:	39 07       	cpc	r19, r25
    2af2:	4a 07       	cpc	r20, r26
    2af4:	5b 07       	cpc	r21, r27
    2af6:	81 f4       	brne	.+32     	; 0x2b18 <SevSeg_voidBCDDoubleDisplay+0x428>
    2af8:	8f a1       	ldd	r24, Y+39	; 0x27
    2afa:	28 2f       	mov	r18, r24
    2afc:	33 27       	eor	r19, r19
    2afe:	27 fd       	sbrc	r18, 7
    2b00:	30 95       	com	r19
    2b02:	43 2f       	mov	r20, r19
    2b04:	53 2f       	mov	r21, r19
    2b06:	8a a1       	ldd	r24, Y+34	; 0x22
    2b08:	9b a1       	ldd	r25, Y+35	; 0x23
    2b0a:	ac a1       	ldd	r26, Y+36	; 0x24
    2b0c:	bd a1       	ldd	r27, Y+37	; 0x25
    2b0e:	28 17       	cp	r18, r24
    2b10:	39 07       	cpc	r19, r25
    2b12:	4a 07       	cpc	r20, r26
    2b14:	5b 07       	cpc	r21, r27
    2b16:	81 f1       	breq	.+96     	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2b18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b1c:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b1e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	a1 09       	sbc	r26, r1
    2b24:	b1 09       	sbc	r27, r1
    2b26:	8e 8f       	std	Y+30, r24	; 0x1e
    2b28:	9f 8f       	std	Y+31, r25	; 0x1f
    2b2a:	a8 a3       	std	Y+32, r26	; 0x20
    2b2c:	b9 a3       	std	Y+33, r27	; 0x21
    2b2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b32:	a8 a1       	ldd	r26, Y+32	; 0x20
    2b34:	b9 a1       	ldd	r27, Y+33	; 0x21
    2b36:	bb 23       	and	r27, r27
    2b38:	0c f0       	brlt	.+2      	; 0x2b3c <SevSeg_voidBCDDoubleDisplay+0x44c>
    2b3a:	51 cf       	rjmp	.-350    	; 0x29de <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    2b3c:	89 e0       	ldi	r24, 0x09	; 9
    2b3e:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2b40:	8a a1       	ldd	r24, Y+34	; 0x22
    2b42:	9b a1       	ldd	r25, Y+35	; 0x23
    2b44:	ac a1       	ldd	r26, Y+36	; 0x24
    2b46:	bd a1       	ldd	r27, Y+37	; 0x25
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	a1 09       	sbc	r26, r1
    2b4c:	b1 09       	sbc	r27, r1
    2b4e:	8a a3       	std	Y+34, r24	; 0x22
    2b50:	9b a3       	std	Y+35, r25	; 0x23
    2b52:	ac a3       	std	Y+36, r26	; 0x24
    2b54:	bd a3       	std	Y+37, r27	; 0x25
    2b56:	8f a1       	ldd	r24, Y+39	; 0x27
    2b58:	28 2f       	mov	r18, r24
    2b5a:	33 27       	eor	r19, r19
    2b5c:	27 fd       	sbrc	r18, 7
    2b5e:	30 95       	com	r19
    2b60:	43 2f       	mov	r20, r19
    2b62:	53 2f       	mov	r21, r19
    2b64:	8a a1       	ldd	r24, Y+34	; 0x22
    2b66:	9b a1       	ldd	r25, Y+35	; 0x23
    2b68:	ac a1       	ldd	r26, Y+36	; 0x24
    2b6a:	bd a1       	ldd	r27, Y+37	; 0x25
    2b6c:	82 17       	cp	r24, r18
    2b6e:	93 07       	cpc	r25, r19
    2b70:	a4 07       	cpc	r26, r20
    2b72:	b5 07       	cpc	r27, r21
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <SevSeg_voidBCDDoubleDisplay+0x488>
    2b76:	0d cf       	rjmp	.-486    	; 0x2992 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2b78:	ab 96       	adiw	r28, 0x2b	; 43
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	c1 54       	subi	r28, 0x41	; 65
    2b94:	d0 40       	sbci	r29, 0x00	; 0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e0 5c       	subi	r30, 0xC0	; 192
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 83       	st	Z, r24
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 5b       	subi	r30, 0xBF	; 191
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e0 5c       	subi	r30, 0xC0	; 192
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	80 81       	ld	r24, Z
    2bb8:	9a e0       	ldi	r25, 0x0A	; 10
    2bba:	69 2f       	mov	r22, r25
    2bbc:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2bc0:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e0 5c       	subi	r30, 0xC0	; 192
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	9a e0       	ldi	r25, 0x0A	; 10
    2bcc:	69 2f       	mov	r22, r25
    2bce:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ef 5b       	subi	r30, 0xBF	; 191
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	9a e0       	ldi	r25, 0x0A	; 10
    2be0:	69 2f       	mov	r22, r25
    2be2:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2be6:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    2be8:	fe 01       	movw	r30, r28
    2bea:	ef 5b       	subi	r30, 0xBF	; 191
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	9a e0       	ldi	r25, 0x0A	; 10
    2bf2:	69 2f       	mov	r22, r25
    2bf4:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <__divmodqi4>
    2bf8:	89 2f       	mov	r24, r25
    2bfa:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    2bfc:	18 ae       	std	Y+56, r1	; 0x38
    2bfe:	19 ae       	std	Y+57, r1	; 0x39
    2c00:	1a ae       	std	Y+58, r1	; 0x3a
    2c02:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    2c04:	1c aa       	std	Y+52, r1	; 0x34
    2c06:	1d aa       	std	Y+53, r1	; 0x35
    2c08:	1e aa       	std	Y+54, r1	; 0x36
    2c0a:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    2c0c:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    2c0e:	1f a6       	std	Y+47, r1	; 0x2f
    2c10:	18 aa       	std	Y+48, r1	; 0x30
    2c12:	19 aa       	std	Y+49, r1	; 0x31
    2c14:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    2c16:	82 e3       	ldi	r24, 0x32	; 50
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e0       	ldi	r26, 0x00	; 0
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	8b a7       	std	Y+43, r24	; 0x2b
    2c20:	9c a7       	std	Y+44, r25	; 0x2c
    2c22:	ad a7       	std	Y+45, r26	; 0x2d
    2c24:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    2c26:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c28:	88 23       	and	r24, r24
    2c2a:	0c f4       	brge	.+2      	; 0x2c2e <SevSeg_voidMulBCD+0xa4>
    2c2c:	ad c2       	rjmp	.+1370   	; 0x3188 <SevSeg_voidMulBCD+0x5fe>
    2c2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c30:	8a 30       	cpi	r24, 0x0A	; 10
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <SevSeg_voidMulBCD+0xac>
    2c34:	a9 c2       	rjmp	.+1362   	; 0x3188 <SevSeg_voidMulBCD+0x5fe>
    2c36:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c38:	8a 30       	cpi	r24, 0x0A	; 10
    2c3a:	0c f0       	brlt	.+2      	; 0x2c3e <SevSeg_voidMulBCD+0xb4>
    2c3c:	a5 c2       	rjmp	.+1354   	; 0x3188 <SevSeg_voidMulBCD+0x5fe>
    2c3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c40:	88 23       	and	r24, r24
    2c42:	0c f4       	brge	.+2      	; 0x2c46 <SevSeg_voidMulBCD+0xbc>
    2c44:	a1 c2       	rjmp	.+1346   	; 0x3188 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    2c46:	de 01       	movw	r26, r28
    2c48:	af 5b       	subi	r26, 0xBF	; 191
    2c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e0 5c       	subi	r30, 0xC0	; 192
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	90 81       	ld	r25, Z
    2c54:	8c 91       	ld	r24, X
    2c56:	98 17       	cp	r25, r24
    2c58:	0c f0       	brlt	.+2      	; 0x2c5c <SevSeg_voidMulBCD+0xd2>
    2c5a:	98 c1       	rjmp	.+816    	; 0x2f8c <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2c5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c5e:	99 27       	eor	r25, r25
    2c60:	87 fd       	sbrc	r24, 7
    2c62:	90 95       	com	r25
    2c64:	a9 2f       	mov	r26, r25
    2c66:	b9 2f       	mov	r27, r25
    2c68:	88 af       	std	Y+56, r24	; 0x38
    2c6a:	99 af       	std	Y+57, r25	; 0x39
    2c6c:	aa af       	std	Y+58, r26	; 0x3a
    2c6e:	bb af       	std	Y+59, r27	; 0x3b
    2c70:	7b c1       	rjmp	.+758    	; 0x2f68 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2c72:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c74:	99 27       	eor	r25, r25
    2c76:	87 fd       	sbrc	r24, 7
    2c78:	90 95       	com	r25
    2c7a:	a9 2f       	mov	r26, r25
    2c7c:	b9 2f       	mov	r27, r25
    2c7e:	8c ab       	std	Y+52, r24	; 0x34
    2c80:	9d ab       	std	Y+53, r25	; 0x35
    2c82:	ae ab       	std	Y+54, r26	; 0x36
    2c84:	bf ab       	std	Y+55, r27	; 0x37
    2c86:	5a c1       	rjmp	.+692    	; 0x2f3c <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    2c88:	1f a6       	std	Y+47, r1	; 0x2f
    2c8a:	18 aa       	std	Y+48, r1	; 0x30
    2c8c:	19 aa       	std	Y+49, r1	; 0x31
    2c8e:	1a aa       	std	Y+50, r1	; 0x32
    2c90:	1b c1       	rjmp	.+566    	; 0x2ec8 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    2c92:	88 ad       	ldd	r24, Y+56	; 0x38
    2c94:	99 ad       	ldd	r25, Y+57	; 0x39
    2c96:	aa ad       	ldd	r26, Y+58	; 0x3a
    2c98:	bb ad       	ldd	r27, Y+59	; 0x3b
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	ed 57       	subi	r30, 0x7D	; 125
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	90 81       	ld	r25, Z
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	69 2f       	mov	r22, r25
    2ca6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	66 e0       	ldi	r22, 0x06	; 6
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    2cb4:	82 e0       	ldi	r24, 0x02	; 2
    2cb6:	65 e0       	ldi	r22, 0x05	; 5
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a0 e2       	ldi	r26, 0x20	; 32
    2cc4:	b1 e4       	ldi	r27, 0x41	; 65
    2cc6:	8f a3       	std	Y+39, r24	; 0x27
    2cc8:	98 a7       	std	Y+40, r25	; 0x28
    2cca:	a9 a7       	std	Y+41, r26	; 0x29
    2ccc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cce:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	4a e7       	ldi	r20, 0x7A	; 122
    2cdc:	55 e4       	ldi	r21, 0x45	; 69
    2cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	8b a3       	std	Y+35, r24	; 0x23
    2ce8:	9c a3       	std	Y+36, r25	; 0x24
    2cea:	ad a3       	std	Y+37, r26	; 0x25
    2cec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cee:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e8       	ldi	r20, 0x80	; 128
    2cfc:	5f e3       	ldi	r21, 0x3F	; 63
    2cfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d02:	88 23       	and	r24, r24
    2d04:	2c f4       	brge	.+10     	; 0x2d10 <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	9a a3       	std	Y+34, r25	; 0x22
    2d0c:	89 a3       	std	Y+33, r24	; 0x21
    2d0e:	3f c0       	rjmp	.+126    	; 0x2d8e <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    2d10:	6b a1       	ldd	r22, Y+35	; 0x23
    2d12:	7c a1       	ldd	r23, Y+36	; 0x24
    2d14:	8d a1       	ldd	r24, Y+37	; 0x25
    2d16:	9e a1       	ldd	r25, Y+38	; 0x26
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	4f e7       	ldi	r20, 0x7F	; 127
    2d1e:	57 e4       	ldi	r21, 0x47	; 71
    2d20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d24:	18 16       	cp	r1, r24
    2d26:	4c f5       	brge	.+82     	; 0x2d7a <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d28:	6f a1       	ldd	r22, Y+39	; 0x27
    2d2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e2       	ldi	r20, 0x20	; 32
    2d36:	51 e4       	ldi	r21, 0x41	; 65
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9a a3       	std	Y+34, r25	; 0x22
    2d4e:	89 a3       	std	Y+33, r24	; 0x21
    2d50:	0f c0       	rjmp	.+30     	; 0x2d70 <SevSeg_voidMulBCD+0x1e6>
    2d52:	80 e9       	ldi	r24, 0x90	; 144
    2d54:	91 e0       	ldi	r25, 0x01	; 1
    2d56:	98 a3       	std	Y+32, r25	; 0x20
    2d58:	8f 8f       	std	Y+31, r24	; 0x1f
    2d5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d5c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <SevSeg_voidMulBCD+0x1d4>
    2d62:	98 a3       	std	Y+32, r25	; 0x20
    2d64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d66:	89 a1       	ldd	r24, Y+33	; 0x21
    2d68:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	9a a3       	std	Y+34, r25	; 0x22
    2d6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d70:	89 a1       	ldd	r24, Y+33	; 0x21
    2d72:	9a a1       	ldd	r25, Y+34	; 0x22
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	69 f7       	brne	.-38     	; 0x2d52 <SevSeg_voidMulBCD+0x1c8>
    2d78:	14 c0       	rjmp	.+40     	; 0x2da2 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d80:	9e a1       	ldd	r25, Y+38	; 0x26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9a a3       	std	Y+34, r25	; 0x22
    2d8c:	89 a3       	std	Y+33, r24	; 0x21
    2d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d90:	9a a1       	ldd	r25, Y+34	; 0x22
    2d92:	9e 8f       	std	Y+30, r25	; 0x1e
    2d94:	8d 8f       	std	Y+29, r24	; 0x1d
    2d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <SevSeg_voidMulBCD+0x210>
    2d9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2da0:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    2da2:	8c a9       	ldd	r24, Y+52	; 0x34
    2da4:	9d a9       	ldd	r25, Y+53	; 0x35
    2da6:	ae a9       	ldd	r26, Y+54	; 0x36
    2da8:	bf a9       	ldd	r27, Y+55	; 0x37
    2daa:	fc 01       	movw	r30, r24
    2dac:	ed 57       	subi	r30, 0x7D	; 125
    2dae:	fe 4f       	sbci	r31, 0xFE	; 254
    2db0:	90 81       	ld	r25, Z
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	69 2f       	mov	r22, r25
    2db6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	66 e0       	ldi	r22, 0x06	; 6
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	65 e0       	ldi	r22, 0x05	; 5
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 e2       	ldi	r26, 0x20	; 32
    2dd4:	b1 e4       	ldi	r27, 0x41	; 65
    2dd6:	89 8f       	std	Y+25, r24	; 0x19
    2dd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dda:	ab 8f       	std	Y+27, r26	; 0x1b
    2ddc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	69 8d       	ldd	r22, Y+25	; 0x19
    2de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4a e7       	ldi	r20, 0x7A	; 122
    2dec:	55 e4       	ldi	r21, 0x45	; 69
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	8d 8b       	std	Y+21, r24	; 0x15
    2df8:	9e 8b       	std	Y+22, r25	; 0x16
    2dfa:	af 8b       	std	Y+23, r26	; 0x17
    2dfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2e00:	7e 89       	ldd	r23, Y+22	; 0x16
    2e02:	8f 89       	ldd	r24, Y+23	; 0x17
    2e04:	98 8d       	ldd	r25, Y+24	; 0x18
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9c 8b       	std	Y+20, r25	; 0x14
    2e1c:	8b 8b       	std	Y+19, r24	; 0x13
    2e1e:	3f c0       	rjmp	.+126    	; 0x2e9e <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    2e20:	6d 89       	ldd	r22, Y+21	; 0x15
    2e22:	7e 89       	ldd	r23, Y+22	; 0x16
    2e24:	8f 89       	ldd	r24, Y+23	; 0x17
    2e26:	98 8d       	ldd	r25, Y+24	; 0x18
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	4f e7       	ldi	r20, 0x7F	; 127
    2e2e:	57 e4       	ldi	r21, 0x47	; 71
    2e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e34:	18 16       	cp	r1, r24
    2e36:	4c f5       	brge	.+82     	; 0x2e8a <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e38:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e2       	ldi	r20, 0x20	; 32
    2e46:	51 e4       	ldi	r21, 0x41	; 65
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9c 8b       	std	Y+20, r25	; 0x14
    2e5e:	8b 8b       	std	Y+19, r24	; 0x13
    2e60:	0f c0       	rjmp	.+30     	; 0x2e80 <SevSeg_voidMulBCD+0x2f6>
    2e62:	80 e9       	ldi	r24, 0x90	; 144
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	9a 8b       	std	Y+18, r25	; 0x12
    2e68:	89 8b       	std	Y+17, r24	; 0x11
    2e6a:	89 89       	ldd	r24, Y+17	; 0x11
    2e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <SevSeg_voidMulBCD+0x2e4>
    2e72:	9a 8b       	std	Y+18, r25	; 0x12
    2e74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e76:	8b 89       	ldd	r24, Y+19	; 0x13
    2e78:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e80:	8b 89       	ldd	r24, Y+19	; 0x13
    2e82:	9c 89       	ldd	r25, Y+20	; 0x14
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	69 f7       	brne	.-38     	; 0x2e62 <SevSeg_voidMulBCD+0x2d8>
    2e88:	14 c0       	rjmp	.+40     	; 0x2eb2 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea2:	98 8b       	std	Y+16, r25	; 0x10
    2ea4:	8f 87       	std	Y+15, r24	; 0x0f
    2ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea8:	98 89       	ldd	r25, Y+16	; 0x10
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <SevSeg_voidMulBCD+0x320>
    2eae:	98 8b       	std	Y+16, r25	; 0x10
    2eb0:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    2eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb6:	a9 a9       	ldd	r26, Y+49	; 0x31
    2eb8:	ba a9       	ldd	r27, Y+50	; 0x32
    2eba:	01 96       	adiw	r24, 0x01	; 1
    2ebc:	a1 1d       	adc	r26, r1
    2ebe:	b1 1d       	adc	r27, r1
    2ec0:	8f a7       	std	Y+47, r24	; 0x2f
    2ec2:	98 ab       	std	Y+48, r25	; 0x30
    2ec4:	a9 ab       	std	Y+49, r26	; 0x31
    2ec6:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    2ec8:	2f a5       	ldd	r18, Y+47	; 0x2f
    2eca:	38 a9       	ldd	r19, Y+48	; 0x30
    2ecc:	49 a9       	ldd	r20, Y+49	; 0x31
    2ece:	5a a9       	ldd	r21, Y+50	; 0x32
    2ed0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ed4:	ad a5       	ldd	r26, Y+45	; 0x2d
    2ed6:	be a5       	ldd	r27, Y+46	; 0x2e
    2ed8:	28 17       	cp	r18, r24
    2eda:	39 07       	cpc	r19, r25
    2edc:	4a 07       	cpc	r20, r26
    2ede:	5b 07       	cpc	r21, r27
    2ee0:	08 f4       	brcc	.+2      	; 0x2ee4 <SevSeg_voidMulBCD+0x35a>
    2ee2:	d7 ce       	rjmp	.-594    	; 0x2c92 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2ee4:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	33 27       	eor	r19, r19
    2eea:	27 fd       	sbrc	r18, 7
    2eec:	30 95       	com	r19
    2eee:	43 2f       	mov	r20, r19
    2ef0:	53 2f       	mov	r21, r19
    2ef2:	8c a9       	ldd	r24, Y+52	; 0x34
    2ef4:	9d a9       	ldd	r25, Y+53	; 0x35
    2ef6:	ae a9       	ldd	r26, Y+54	; 0x36
    2ef8:	bf a9       	ldd	r27, Y+55	; 0x37
    2efa:	28 17       	cp	r18, r24
    2efc:	39 07       	cpc	r19, r25
    2efe:	4a 07       	cpc	r20, r26
    2f00:	5b 07       	cpc	r21, r27
    2f02:	89 f4       	brne	.+34     	; 0x2f26 <SevSeg_voidMulBCD+0x39c>
    2f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f06:	28 2f       	mov	r18, r24
    2f08:	33 27       	eor	r19, r19
    2f0a:	27 fd       	sbrc	r18, 7
    2f0c:	30 95       	com	r19
    2f0e:	43 2f       	mov	r20, r19
    2f10:	53 2f       	mov	r21, r19
    2f12:	88 ad       	ldd	r24, Y+56	; 0x38
    2f14:	99 ad       	ldd	r25, Y+57	; 0x39
    2f16:	aa ad       	ldd	r26, Y+58	; 0x3a
    2f18:	bb ad       	ldd	r27, Y+59	; 0x3b
    2f1a:	28 17       	cp	r18, r24
    2f1c:	39 07       	cpc	r19, r25
    2f1e:	4a 07       	cpc	r20, r26
    2f20:	5b 07       	cpc	r21, r27
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <SevSeg_voidMulBCD+0x39c>
    2f24:	31 c1       	rjmp	.+610    	; 0x3188 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2f26:	8c a9       	ldd	r24, Y+52	; 0x34
    2f28:	9d a9       	ldd	r25, Y+53	; 0x35
    2f2a:	ae a9       	ldd	r26, Y+54	; 0x36
    2f2c:	bf a9       	ldd	r27, Y+55	; 0x37
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	a1 1d       	adc	r26, r1
    2f32:	b1 1d       	adc	r27, r1
    2f34:	8c ab       	std	Y+52, r24	; 0x34
    2f36:	9d ab       	std	Y+53, r25	; 0x35
    2f38:	ae ab       	std	Y+54, r26	; 0x36
    2f3a:	bf ab       	std	Y+55, r27	; 0x37
    2f3c:	8c a9       	ldd	r24, Y+52	; 0x34
    2f3e:	9d a9       	ldd	r25, Y+53	; 0x35
    2f40:	ae a9       	ldd	r26, Y+54	; 0x36
    2f42:	bf a9       	ldd	r27, Y+55	; 0x37
    2f44:	8a 30       	cpi	r24, 0x0A	; 10
    2f46:	91 05       	cpc	r25, r1
    2f48:	a1 05       	cpc	r26, r1
    2f4a:	b1 05       	cpc	r27, r1
    2f4c:	0c f4       	brge	.+2      	; 0x2f50 <SevSeg_voidMulBCD+0x3c6>
    2f4e:	9c ce       	rjmp	.-712    	; 0x2c88 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2f50:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2f52:	88 ad       	ldd	r24, Y+56	; 0x38
    2f54:	99 ad       	ldd	r25, Y+57	; 0x39
    2f56:	aa ad       	ldd	r26, Y+58	; 0x3a
    2f58:	bb ad       	ldd	r27, Y+59	; 0x3b
    2f5a:	01 96       	adiw	r24, 0x01	; 1
    2f5c:	a1 1d       	adc	r26, r1
    2f5e:	b1 1d       	adc	r27, r1
    2f60:	88 af       	std	Y+56, r24	; 0x38
    2f62:	99 af       	std	Y+57, r25	; 0x39
    2f64:	aa af       	std	Y+58, r26	; 0x3a
    2f66:	bb af       	std	Y+59, r27	; 0x3b
    2f68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	33 27       	eor	r19, r19
    2f6e:	27 fd       	sbrc	r18, 7
    2f70:	30 95       	com	r19
    2f72:	43 2f       	mov	r20, r19
    2f74:	53 2f       	mov	r21, r19
    2f76:	88 ad       	ldd	r24, Y+56	; 0x38
    2f78:	99 ad       	ldd	r25, Y+57	; 0x39
    2f7a:	aa ad       	ldd	r26, Y+58	; 0x3a
    2f7c:	bb ad       	ldd	r27, Y+59	; 0x3b
    2f7e:	28 17       	cp	r18, r24
    2f80:	39 07       	cpc	r19, r25
    2f82:	4a 07       	cpc	r20, r26
    2f84:	5b 07       	cpc	r21, r27
    2f86:	0c f0       	brlt	.+2      	; 0x2f8a <SevSeg_voidMulBCD+0x400>
    2f88:	74 ce       	rjmp	.-792    	; 0x2c72 <SevSeg_voidMulBCD+0xe8>
    2f8a:	fe c0       	rjmp	.+508    	; 0x3188 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2f8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f8e:	99 27       	eor	r25, r25
    2f90:	87 fd       	sbrc	r24, 7
    2f92:	90 95       	com	r25
    2f94:	a9 2f       	mov	r26, r25
    2f96:	b9 2f       	mov	r27, r25
    2f98:	88 af       	std	Y+56, r24	; 0x38
    2f9a:	99 af       	std	Y+57, r25	; 0x39
    2f9c:	aa af       	std	Y+58, r26	; 0x3a
    2f9e:	bb af       	std	Y+59, r27	; 0x3b
    2fa0:	e2 c0       	rjmp	.+452    	; 0x3166 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    2fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa4:	8f 70       	andi	r24, 0x0F	; 15
    2fa6:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    2fa8:	88 ad       	ldd	r24, Y+56	; 0x38
    2faa:	99 ad       	ldd	r25, Y+57	; 0x39
    2fac:	aa ad       	ldd	r26, Y+58	; 0x3a
    2fae:	bb ad       	ldd	r27, Y+59	; 0x3b
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	aa 1f       	adc	r26, r26
    2fb6:	bb 1f       	adc	r27, r27
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	aa 1f       	adc	r26, r26
    2fbe:	bb 1f       	adc	r27, r27
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	aa 1f       	adc	r26, r26
    2fc6:	bb 1f       	adc	r27, r27
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	aa 1f       	adc	r26, r26
    2fce:	bb 1f       	adc	r27, r27
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fd4:	89 2b       	or	r24, r25
    2fd6:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2fd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fda:	99 27       	eor	r25, r25
    2fdc:	87 fd       	sbrc	r24, 7
    2fde:	90 95       	com	r25
    2fe0:	a9 2f       	mov	r26, r25
    2fe2:	b9 2f       	mov	r27, r25
    2fe4:	8c ab       	std	Y+52, r24	; 0x34
    2fe6:	9d ab       	std	Y+53, r25	; 0x35
    2fe8:	ae ab       	std	Y+54, r26	; 0x36
    2fea:	bf ab       	std	Y+55, r27	; 0x37
    2fec:	a8 c0       	rjmp	.+336    	; 0x313e <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    2fee:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff0:	80 7f       	andi	r24, 0xF0	; 240
    2ff2:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    2ff4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff8:	89 2b       	or	r24, r25
    2ffa:	8b ab       	std	Y+51, r24	; 0x33
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 e2       	ldi	r26, 0x20	; 32
    3002:	b1 e4       	ldi	r27, 0x41	; 65
    3004:	8b 87       	std	Y+11, r24	; 0x0b
    3006:	9c 87       	std	Y+12, r25	; 0x0c
    3008:	ad 87       	std	Y+13, r26	; 0x0d
    300a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	6b 85       	ldd	r22, Y+11	; 0x0b
    300e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a e7       	ldi	r20, 0x7A	; 122
    301a:	55 e4       	ldi	r21, 0x45	; 69
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8f 83       	std	Y+7, r24	; 0x07
    3026:	98 87       	std	Y+8, r25	; 0x08
    3028:	a9 87       	std	Y+9, r26	; 0x09
    302a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    302c:	6f 81       	ldd	r22, Y+7	; 0x07
    302e:	78 85       	ldd	r23, Y+8	; 0x08
    3030:	89 85       	ldd	r24, Y+9	; 0x09
    3032:	9a 85       	ldd	r25, Y+10	; 0x0a
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
    304c:	3f c0       	rjmp	.+126    	; 0x30cc <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    304e:	6f 81       	ldd	r22, Y+7	; 0x07
    3050:	78 85       	ldd	r23, Y+8	; 0x08
    3052:	89 85       	ldd	r24, Y+9	; 0x09
    3054:	9a 85       	ldd	r25, Y+10	; 0x0a
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	57 e4       	ldi	r21, 0x47	; 71
    305e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	4c f5       	brge	.+82     	; 0x30b8 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	6b 85       	ldd	r22, Y+11	; 0x0b
    3068:	7c 85       	ldd	r23, Y+12	; 0x0c
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <SevSeg_voidMulBCD+0x524>
    3090:	80 e9       	ldi	r24, 0x90	; 144
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	9c 83       	std	Y+4, r25	; 0x04
    3096:	8b 83       	std	Y+3, r24	; 0x03
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	9c 81       	ldd	r25, Y+4	; 0x04
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <SevSeg_voidMulBCD+0x512>
    30a0:	9c 83       	std	Y+4, r25	; 0x04
    30a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
    30a6:	9e 81       	ldd	r25, Y+6	; 0x06
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	9e 83       	std	Y+6, r25	; 0x06
    30ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f7       	brne	.-38     	; 0x3090 <SevSeg_voidMulBCD+0x506>
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	8d 83       	std	Y+5, r24	; 0x05
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <SevSeg_voidMulBCD+0x54e>
    30dc:	9a 83       	std	Y+2, r25	; 0x02
    30de:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    30e0:	82 e0       	ldi	r24, 0x02	; 2
    30e2:	6b a9       	ldd	r22, Y+51	; 0x33
    30e4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    30e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    30ea:	28 2f       	mov	r18, r24
    30ec:	33 27       	eor	r19, r19
    30ee:	27 fd       	sbrc	r18, 7
    30f0:	30 95       	com	r19
    30f2:	43 2f       	mov	r20, r19
    30f4:	53 2f       	mov	r21, r19
    30f6:	8c a9       	ldd	r24, Y+52	; 0x34
    30f8:	9d a9       	ldd	r25, Y+53	; 0x35
    30fa:	ae a9       	ldd	r26, Y+54	; 0x36
    30fc:	bf a9       	ldd	r27, Y+55	; 0x37
    30fe:	28 17       	cp	r18, r24
    3100:	39 07       	cpc	r19, r25
    3102:	4a 07       	cpc	r20, r26
    3104:	5b 07       	cpc	r21, r27
    3106:	81 f4       	brne	.+32     	; 0x3128 <SevSeg_voidMulBCD+0x59e>
    3108:	8d ad       	ldd	r24, Y+61	; 0x3d
    310a:	28 2f       	mov	r18, r24
    310c:	33 27       	eor	r19, r19
    310e:	27 fd       	sbrc	r18, 7
    3110:	30 95       	com	r19
    3112:	43 2f       	mov	r20, r19
    3114:	53 2f       	mov	r21, r19
    3116:	88 ad       	ldd	r24, Y+56	; 0x38
    3118:	99 ad       	ldd	r25, Y+57	; 0x39
    311a:	aa ad       	ldd	r26, Y+58	; 0x3a
    311c:	bb ad       	ldd	r27, Y+59	; 0x3b
    311e:	28 17       	cp	r18, r24
    3120:	39 07       	cpc	r19, r25
    3122:	4a 07       	cpc	r20, r26
    3124:	5b 07       	cpc	r21, r27
    3126:	81 f1       	breq	.+96     	; 0x3188 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3128:	8c a9       	ldd	r24, Y+52	; 0x34
    312a:	9d a9       	ldd	r25, Y+53	; 0x35
    312c:	ae a9       	ldd	r26, Y+54	; 0x36
    312e:	bf a9       	ldd	r27, Y+55	; 0x37
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	a1 09       	sbc	r26, r1
    3134:	b1 09       	sbc	r27, r1
    3136:	8c ab       	std	Y+52, r24	; 0x34
    3138:	9d ab       	std	Y+53, r25	; 0x35
    313a:	ae ab       	std	Y+54, r26	; 0x36
    313c:	bf ab       	std	Y+55, r27	; 0x37
    313e:	8c a9       	ldd	r24, Y+52	; 0x34
    3140:	9d a9       	ldd	r25, Y+53	; 0x35
    3142:	ae a9       	ldd	r26, Y+54	; 0x36
    3144:	bf a9       	ldd	r27, Y+55	; 0x37
    3146:	bb 23       	and	r27, r27
    3148:	0c f0       	brlt	.+2      	; 0x314c <SevSeg_voidMulBCD+0x5c2>
    314a:	51 cf       	rjmp	.-350    	; 0x2fee <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    314c:	89 e0       	ldi	r24, 0x09	; 9
    314e:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3150:	88 ad       	ldd	r24, Y+56	; 0x38
    3152:	99 ad       	ldd	r25, Y+57	; 0x39
    3154:	aa ad       	ldd	r26, Y+58	; 0x3a
    3156:	bb ad       	ldd	r27, Y+59	; 0x3b
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	a1 09       	sbc	r26, r1
    315c:	b1 09       	sbc	r27, r1
    315e:	88 af       	std	Y+56, r24	; 0x38
    3160:	99 af       	std	Y+57, r25	; 0x39
    3162:	aa af       	std	Y+58, r26	; 0x3a
    3164:	bb af       	std	Y+59, r27	; 0x3b
    3166:	8d ad       	ldd	r24, Y+61	; 0x3d
    3168:	28 2f       	mov	r18, r24
    316a:	33 27       	eor	r19, r19
    316c:	27 fd       	sbrc	r18, 7
    316e:	30 95       	com	r19
    3170:	43 2f       	mov	r20, r19
    3172:	53 2f       	mov	r21, r19
    3174:	88 ad       	ldd	r24, Y+56	; 0x38
    3176:	99 ad       	ldd	r25, Y+57	; 0x39
    3178:	aa ad       	ldd	r26, Y+58	; 0x3a
    317a:	bb ad       	ldd	r27, Y+59	; 0x3b
    317c:	82 17       	cp	r24, r18
    317e:	93 07       	cpc	r25, r19
    3180:	a4 07       	cpc	r26, r20
    3182:	b5 07       	cpc	r27, r21
    3184:	0c f0       	brlt	.+2      	; 0x3188 <SevSeg_voidMulBCD+0x5fe>
    3186:	0d cf       	rjmp	.-486    	; 0x2fa2 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    3188:	cf 5b       	subi	r28, 0xBF	; 191
    318a:	df 4f       	sbci	r29, 0xFF	; 255
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	cc 58       	subi	r28, 0x8C	; 140
    31aa:	d0 40       	sbci	r29, 0x00	; 0
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	fe 01       	movw	r30, r28
    31b8:	e7 57       	subi	r30, 0x77	; 119
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	ac e0       	ldi	r26, 0x0C	; 12
    31c2:	b2 e4       	ldi	r27, 0x42	; 66
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	8e 01       	movw	r16, r28
    31ce:	0b 57       	subi	r16, 0x7B	; 123
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	e7 57       	subi	r30, 0x77	; 119
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a e7       	ldi	r20, 0x7A	; 122
    31e6:	55 e4       	ldi	r21, 0x45	; 69
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fa:	fe 01       	movw	r30, r28
    31fc:	eb 57       	subi	r30, 0x7B	; 123
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	44 f4       	brge	.+16     	; 0x3228 <LCD_voidInit+0x8c>
		__ticks = 1;
    3218:	fe 01       	movw	r30, r28
    321a:	ed 57       	subi	r30, 0x7D	; 125
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	64 c0       	rjmp	.+200    	; 0x32f0 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    3228:	fe 01       	movw	r30, r28
    322a:	eb 57       	subi	r30, 0x7B	; 123
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <LCD_voidInit+0xac>
    3246:	43 c0       	rjmp	.+134    	; 0x32ce <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3248:	fe 01       	movw	r30, r28
    324a:	e7 57       	subi	r30, 0x77	; 119
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8e 01       	movw	r16, r28
    3268:	0d 57       	subi	r16, 0x7D	; 125
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	f8 01       	movw	r30, r16
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
    327e:	1f c0       	rjmp	.+62     	; 0x32be <LCD_voidInit+0x122>
    3280:	fe 01       	movw	r30, r28
    3282:	ef 57       	subi	r30, 0x7F	; 127
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 e9       	ldi	r24, 0x90	; 144
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    328e:	fe 01       	movw	r30, r28
    3290:	ef 57       	subi	r30, 0x7F	; 127
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <LCD_voidInit+0xfc>
    329c:	fe 01       	movw	r30, r28
    329e:	ef 57       	subi	r30, 0x7F	; 127
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	de 01       	movw	r26, r28
    32a8:	ad 57       	subi	r26, 0x7D	; 125
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	ed 57       	subi	r30, 0x7D	; 125
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	11 96       	adiw	r26, 0x01	; 1
    32ba:	9c 93       	st	X, r25
    32bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	fe 01       	movw	r30, r28
    32c0:	ed 57       	subi	r30, 0x7D	; 125
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	d1 f6       	brne	.-76     	; 0x3280 <LCD_voidInit+0xe4>
    32cc:	27 c0       	rjmp	.+78     	; 0x331c <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	8e 01       	movw	r16, r28
    32d0:	0d 57       	subi	r16, 0x7D	; 125
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	eb 57       	subi	r30, 0x7B	; 123
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	60 81       	ld	r22, Z
    32dc:	71 81       	ldd	r23, Z+1	; 0x01
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	f8 01       	movw	r30, r16
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
    32f0:	de 01       	movw	r26, r28
    32f2:	a1 58       	subi	r26, 0x81	; 129
    32f4:	bf 4f       	sbci	r27, 0xFF	; 255
    32f6:	fe 01       	movw	r30, r28
    32f8:	ed 57       	subi	r30, 0x7D	; 125
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	8d 93       	st	X+, r24
    3302:	9c 93       	st	X, r25
    3304:	fe 01       	movw	r30, r28
    3306:	e1 58       	subi	r30, 0x81	; 129
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <LCD_voidInit+0x172>
    3312:	fe 01       	movw	r30, r28
    3314:	e1 58       	subi	r30, 0x81	; 129
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    331c:	80 e3       	ldi	r24, 0x30	; 48
    331e:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <LCD_voidSendInitCommand>
    3322:	fe 01       	movw	r30, r28
    3324:	e5 58       	subi	r30, 0x85	; 133
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	a0 ea       	ldi	r26, 0xA0	; 160
    332e:	b0 e4       	ldi	r27, 0x40	; 64
    3330:	80 83       	st	Z, r24
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	a2 83       	std	Z+2, r26	; 0x02
    3336:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3338:	8e 01       	movw	r16, r28
    333a:	09 58       	subi	r16, 0x89	; 137
    333c:	1f 4f       	sbci	r17, 0xFF	; 255
    333e:	fe 01       	movw	r30, r28
    3340:	e5 58       	subi	r30, 0x85	; 133
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	60 81       	ld	r22, Z
    3346:	71 81       	ldd	r23, Z+1	; 0x01
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	4a e7       	ldi	r20, 0x7A	; 122
    3352:	55 e4       	ldi	r21, 0x45	; 69
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	f8 01       	movw	r30, r16
    335e:	80 83       	st	Z, r24
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	a2 83       	std	Z+2, r26	; 0x02
    3364:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3366:	fe 01       	movw	r30, r28
    3368:	e9 58       	subi	r30, 0x89	; 137
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	44 f4       	brge	.+16     	; 0x3394 <LCD_voidInit+0x1f8>
		__ticks = 1;
    3384:	fe 01       	movw	r30, r28
    3386:	eb 58       	subi	r30, 0x8B	; 139
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	64 c0       	rjmp	.+200    	; 0x345c <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    3394:	fe 01       	movw	r30, r28
    3396:	e9 58       	subi	r30, 0x89	; 137
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	60 81       	ld	r22, Z
    339c:	71 81       	ldd	r23, Z+1	; 0x01
    339e:	82 81       	ldd	r24, Z+2	; 0x02
    33a0:	93 81       	ldd	r25, Z+3	; 0x03
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	3f ef       	ldi	r19, 0xFF	; 255
    33a6:	4f e7       	ldi	r20, 0x7F	; 127
    33a8:	57 e4       	ldi	r21, 0x47	; 71
    33aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ae:	18 16       	cp	r1, r24
    33b0:	0c f0       	brlt	.+2      	; 0x33b4 <LCD_voidInit+0x218>
    33b2:	43 c0       	rjmp	.+134    	; 0x343a <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b4:	fe 01       	movw	r30, r28
    33b6:	e5 58       	subi	r30, 0x85	; 133
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	60 81       	ld	r22, Z
    33bc:	71 81       	ldd	r23, Z+1	; 0x01
    33be:	82 81       	ldd	r24, Z+2	; 0x02
    33c0:	93 81       	ldd	r25, Z+3	; 0x03
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e2       	ldi	r20, 0x20	; 32
    33c8:	51 e4       	ldi	r21, 0x41	; 65
    33ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	8e 01       	movw	r16, r28
    33d4:	0b 58       	subi	r16, 0x8B	; 139
    33d6:	1f 4f       	sbci	r17, 0xFF	; 255
    33d8:	bc 01       	movw	r22, r24
    33da:	cd 01       	movw	r24, r26
    33dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	f8 01       	movw	r30, r16
    33e6:	91 83       	std	Z+1, r25	; 0x01
    33e8:	80 83       	st	Z, r24
    33ea:	1f c0       	rjmp	.+62     	; 0x342a <LCD_voidInit+0x28e>
    33ec:	fe 01       	movw	r30, r28
    33ee:	ed 58       	subi	r30, 0x8D	; 141
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	80 e9       	ldi	r24, 0x90	; 144
    33f4:	91 e0       	ldi	r25, 0x01	; 1
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
    33fa:	fe 01       	movw	r30, r28
    33fc:	ed 58       	subi	r30, 0x8D	; 141
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <LCD_voidInit+0x268>
    3408:	fe 01       	movw	r30, r28
    340a:	ed 58       	subi	r30, 0x8D	; 141
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	de 01       	movw	r26, r28
    3414:	ab 58       	subi	r26, 0x8B	; 139
    3416:	bf 4f       	sbci	r27, 0xFF	; 255
    3418:	fe 01       	movw	r30, r28
    341a:	eb 58       	subi	r30, 0x8B	; 139
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	11 96       	adiw	r26, 0x01	; 1
    3426:	9c 93       	st	X, r25
    3428:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342a:	fe 01       	movw	r30, r28
    342c:	eb 58       	subi	r30, 0x8B	; 139
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	d1 f6       	brne	.-76     	; 0x33ec <LCD_voidInit+0x250>
    3438:	27 c0       	rjmp	.+78     	; 0x3488 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343a:	8e 01       	movw	r16, r28
    343c:	0b 58       	subi	r16, 0x8B	; 139
    343e:	1f 4f       	sbci	r17, 0xFF	; 255
    3440:	fe 01       	movw	r30, r28
    3442:	e9 58       	subi	r30, 0x89	; 137
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	82 81       	ldd	r24, Z+2	; 0x02
    344c:	93 81       	ldd	r25, Z+3	; 0x03
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	f8 01       	movw	r30, r16
    3458:	91 83       	std	Z+1, r25	; 0x01
    345a:	80 83       	st	Z, r24
    345c:	de 01       	movw	r26, r28
    345e:	af 58       	subi	r26, 0x8F	; 143
    3460:	bf 4f       	sbci	r27, 0xFF	; 255
    3462:	fe 01       	movw	r30, r28
    3464:	eb 58       	subi	r30, 0x8B	; 139
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	80 81       	ld	r24, Z
    346a:	91 81       	ldd	r25, Z+1	; 0x01
    346c:	8d 93       	st	X+, r24
    346e:	9c 93       	st	X, r25
    3470:	fe 01       	movw	r30, r28
    3472:	ef 58       	subi	r30, 0x8F	; 143
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	80 81       	ld	r24, Z
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <LCD_voidInit+0x2de>
    347e:	fe 01       	movw	r30, r28
    3480:	ef 58       	subi	r30, 0x8F	; 143
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	91 83       	std	Z+1, r25	; 0x01
    3486:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3488:	80 e3       	ldi	r24, 0x30	; 48
    348a:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <LCD_voidSendInitCommand>
    348e:	fe 01       	movw	r30, r28
    3490:	e3 59       	subi	r30, 0x93	; 147
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	a0 e8       	ldi	r26, 0x80	; 128
    349a:	bf e3       	ldi	r27, 0x3F	; 63
    349c:	80 83       	st	Z, r24
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	a2 83       	std	Z+2, r26	; 0x02
    34a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a4:	8e 01       	movw	r16, r28
    34a6:	07 59       	subi	r16, 0x97	; 151
    34a8:	1f 4f       	sbci	r17, 0xFF	; 255
    34aa:	fe 01       	movw	r30, r28
    34ac:	e3 59       	subi	r30, 0x93	; 147
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	4a e7       	ldi	r20, 0x7A	; 122
    34be:	55 e4       	ldi	r21, 0x45	; 69
    34c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	f8 01       	movw	r30, r16
    34ca:	80 83       	st	Z, r24
    34cc:	91 83       	std	Z+1, r25	; 0x01
    34ce:	a2 83       	std	Z+2, r26	; 0x02
    34d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34d2:	fe 01       	movw	r30, r28
    34d4:	e7 59       	subi	r30, 0x97	; 151
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	60 81       	ld	r22, Z
    34da:	71 81       	ldd	r23, Z+1	; 0x01
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	93 81       	ldd	r25, Z+3	; 0x03
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e8       	ldi	r20, 0x80	; 128
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ec:	88 23       	and	r24, r24
    34ee:	44 f4       	brge	.+16     	; 0x3500 <LCD_voidInit+0x364>
		__ticks = 1;
    34f0:	fe 01       	movw	r30, r28
    34f2:	e9 59       	subi	r30, 0x99	; 153
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	91 83       	std	Z+1, r25	; 0x01
    34fc:	80 83       	st	Z, r24
    34fe:	64 c0       	rjmp	.+200    	; 0x35c8 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    3500:	fe 01       	movw	r30, r28
    3502:	e7 59       	subi	r30, 0x97	; 151
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	3f ef       	ldi	r19, 0xFF	; 255
    3512:	4f e7       	ldi	r20, 0x7F	; 127
    3514:	57 e4       	ldi	r21, 0x47	; 71
    3516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    351a:	18 16       	cp	r1, r24
    351c:	0c f0       	brlt	.+2      	; 0x3520 <LCD_voidInit+0x384>
    351e:	43 c0       	rjmp	.+134    	; 0x35a6 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3520:	fe 01       	movw	r30, r28
    3522:	e3 59       	subi	r30, 0x93	; 147
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8e 01       	movw	r16, r28
    3540:	09 59       	subi	r16, 0x99	; 153
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	f8 01       	movw	r30, r16
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	80 83       	st	Z, r24
    3556:	1f c0       	rjmp	.+62     	; 0x3596 <LCD_voidInit+0x3fa>
    3558:	fe 01       	movw	r30, r28
    355a:	eb 59       	subi	r30, 0x9B	; 155
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	80 e9       	ldi	r24, 0x90	; 144
    3560:	91 e0       	ldi	r25, 0x01	; 1
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	fe 01       	movw	r30, r28
    3568:	eb 59       	subi	r30, 0x9B	; 155
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <LCD_voidInit+0x3d4>
    3574:	fe 01       	movw	r30, r28
    3576:	eb 59       	subi	r30, 0x9B	; 155
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	91 83       	std	Z+1, r25	; 0x01
    357c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357e:	de 01       	movw	r26, r28
    3580:	a9 59       	subi	r26, 0x99	; 153
    3582:	bf 4f       	sbci	r27, 0xFF	; 255
    3584:	fe 01       	movw	r30, r28
    3586:	e9 59       	subi	r30, 0x99	; 153
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	80 81       	ld	r24, Z
    358c:	91 81       	ldd	r25, Z+1	; 0x01
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	11 96       	adiw	r26, 0x01	; 1
    3592:	9c 93       	st	X, r25
    3594:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3596:	fe 01       	movw	r30, r28
    3598:	e9 59       	subi	r30, 0x99	; 153
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	80 81       	ld	r24, Z
    359e:	91 81       	ldd	r25, Z+1	; 0x01
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	d1 f6       	brne	.-76     	; 0x3558 <LCD_voidInit+0x3bc>
    35a4:	27 c0       	rjmp	.+78     	; 0x35f4 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a6:	8e 01       	movw	r16, r28
    35a8:	09 59       	subi	r16, 0x99	; 153
    35aa:	1f 4f       	sbci	r17, 0xFF	; 255
    35ac:	fe 01       	movw	r30, r28
    35ae:	e7 59       	subi	r30, 0x97	; 151
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	f8 01       	movw	r30, r16
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
    35c8:	de 01       	movw	r26, r28
    35ca:	ad 59       	subi	r26, 0x9D	; 157
    35cc:	bf 4f       	sbci	r27, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	e9 59       	subi	r30, 0x99	; 153
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	8d 93       	st	X+, r24
    35da:	9c 93       	st	X, r25
    35dc:	fe 01       	movw	r30, r28
    35de:	ed 59       	subi	r30, 0x9D	; 157
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 81       	ld	r24, Z
    35e4:	91 81       	ldd	r25, Z+1	; 0x01
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <LCD_voidInit+0x44a>
    35ea:	fe 01       	movw	r30, r28
    35ec:	ed 59       	subi	r30, 0x9D	; 157
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    35f4:	80 e3       	ldi	r24, 0x30	; 48
    35f6:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <LCD_voidSendInitCommand>
    35fa:	fe 01       	movw	r30, r28
    35fc:	e1 5a       	subi	r30, 0xA1	; 161
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	a0 e8       	ldi	r26, 0x80	; 128
    3606:	bf e3       	ldi	r27, 0x3F	; 63
    3608:	80 83       	st	Z, r24
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	a2 83       	std	Z+2, r26	; 0x02
    360e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3610:	8e 01       	movw	r16, r28
    3612:	05 5a       	subi	r16, 0xA5	; 165
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	fe 01       	movw	r30, r28
    3618:	e1 5a       	subi	r30, 0xA1	; 161
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	4a e7       	ldi	r20, 0x7A	; 122
    362a:	55 e4       	ldi	r21, 0x45	; 69
    362c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	f8 01       	movw	r30, r16
    3636:	80 83       	st	Z, r24
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	a2 83       	std	Z+2, r26	; 0x02
    363c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    363e:	fe 01       	movw	r30, r28
    3640:	e5 5a       	subi	r30, 0xA5	; 165
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e8       	ldi	r20, 0x80	; 128
    3652:	5f e3       	ldi	r21, 0x3F	; 63
    3654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3658:	88 23       	and	r24, r24
    365a:	44 f4       	brge	.+16     	; 0x366c <LCD_voidInit+0x4d0>
		__ticks = 1;
    365c:	fe 01       	movw	r30, r28
    365e:	e7 5a       	subi	r30, 0xA7	; 167
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	80 83       	st	Z, r24
    366a:	64 c0       	rjmp	.+200    	; 0x3734 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    366c:	fe 01       	movw	r30, r28
    366e:	e5 5a       	subi	r30, 0xA5	; 165
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	60 81       	ld	r22, Z
    3674:	71 81       	ldd	r23, Z+1	; 0x01
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	3f ef       	ldi	r19, 0xFF	; 255
    367e:	4f e7       	ldi	r20, 0x7F	; 127
    3680:	57 e4       	ldi	r21, 0x47	; 71
    3682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3686:	18 16       	cp	r1, r24
    3688:	0c f0       	brlt	.+2      	; 0x368c <LCD_voidInit+0x4f0>
    368a:	43 c0       	rjmp	.+134    	; 0x3712 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368c:	fe 01       	movw	r30, r28
    368e:	e1 5a       	subi	r30, 0xA1	; 161
    3690:	ff 4f       	sbci	r31, 0xFF	; 255
    3692:	60 81       	ld	r22, Z
    3694:	71 81       	ldd	r23, Z+1	; 0x01
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	93 81       	ldd	r25, Z+3	; 0x03
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e2       	ldi	r20, 0x20	; 32
    36a0:	51 e4       	ldi	r21, 0x41	; 65
    36a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	8e 01       	movw	r16, r28
    36ac:	07 5a       	subi	r16, 0xA7	; 167
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	f8 01       	movw	r30, r16
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
    36c2:	1f c0       	rjmp	.+62     	; 0x3702 <LCD_voidInit+0x566>
    36c4:	fe 01       	movw	r30, r28
    36c6:	e9 5a       	subi	r30, 0xA9	; 169
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 e9       	ldi	r24, 0x90	; 144
    36cc:	91 e0       	ldi	r25, 0x01	; 1
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
    36d2:	fe 01       	movw	r30, r28
    36d4:	e9 5a       	subi	r30, 0xA9	; 169
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	91 81       	ldd	r25, Z+1	; 0x01
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	f1 f7       	brne	.-4      	; 0x36dc <LCD_voidInit+0x540>
    36e0:	fe 01       	movw	r30, r28
    36e2:	e9 5a       	subi	r30, 0xA9	; 169
    36e4:	ff 4f       	sbci	r31, 0xFF	; 255
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ea:	de 01       	movw	r26, r28
    36ec:	a7 5a       	subi	r26, 0xA7	; 167
    36ee:	bf 4f       	sbci	r27, 0xFF	; 255
    36f0:	fe 01       	movw	r30, r28
    36f2:	e7 5a       	subi	r30, 0xA7	; 167
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	80 81       	ld	r24, Z
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	11 96       	adiw	r26, 0x01	; 1
    36fe:	9c 93       	st	X, r25
    3700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3702:	fe 01       	movw	r30, r28
    3704:	e7 5a       	subi	r30, 0xA7	; 167
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	00 97       	sbiw	r24, 0x00	; 0
    370e:	d1 f6       	brne	.-76     	; 0x36c4 <LCD_voidInit+0x528>
    3710:	27 c0       	rjmp	.+78     	; 0x3760 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3712:	8e 01       	movw	r16, r28
    3714:	07 5a       	subi	r16, 0xA7	; 167
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	fe 01       	movw	r30, r28
    371a:	e5 5a       	subi	r30, 0xA5	; 165
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	f8 01       	movw	r30, r16
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	80 83       	st	Z, r24
    3734:	de 01       	movw	r26, r28
    3736:	ab 5a       	subi	r26, 0xAB	; 171
    3738:	bf 4f       	sbci	r27, 0xFF	; 255
    373a:	fe 01       	movw	r30, r28
    373c:	e7 5a       	subi	r30, 0xA7	; 167
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	8d 93       	st	X+, r24
    3746:	9c 93       	st	X, r25
    3748:	fe 01       	movw	r30, r28
    374a:	eb 5a       	subi	r30, 0xAB	; 171
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	f1 f7       	brne	.-4      	; 0x3752 <LCD_voidInit+0x5b6>
    3756:	fe 01       	movw	r30, r28
    3758:	eb 5a       	subi	r30, 0xAB	; 171
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	91 83       	std	Z+1, r25	; 0x01
    375e:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    3760:	80 e2       	ldi	r24, 0x20	; 32
    3762:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <LCD_voidSendInitCommand>
    3766:	fe 01       	movw	r30, r28
    3768:	ef 5a       	subi	r30, 0xAF	; 175
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	a0 e8       	ldi	r26, 0x80	; 128
    3772:	bf e3       	ldi	r27, 0x3F	; 63
    3774:	80 83       	st	Z, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	a2 83       	std	Z+2, r26	; 0x02
    377a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377c:	8e 01       	movw	r16, r28
    377e:	03 5b       	subi	r16, 0xB3	; 179
    3780:	1f 4f       	sbci	r17, 0xFF	; 255
    3782:	fe 01       	movw	r30, r28
    3784:	ef 5a       	subi	r30, 0xAF	; 175
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	60 81       	ld	r22, Z
    378a:	71 81       	ldd	r23, Z+1	; 0x01
    378c:	82 81       	ldd	r24, Z+2	; 0x02
    378e:	93 81       	ldd	r25, Z+3	; 0x03
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4a e7       	ldi	r20, 0x7A	; 122
    3796:	55 e4       	ldi	r21, 0x45	; 69
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	a2 83       	std	Z+2, r26	; 0x02
    37a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37aa:	fe 01       	movw	r30, r28
    37ac:	e3 5b       	subi	r30, 0xB3	; 179
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e8       	ldi	r20, 0x80	; 128
    37be:	5f e3       	ldi	r21, 0x3F	; 63
    37c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	44 f4       	brge	.+16     	; 0x37d8 <LCD_voidInit+0x63c>
		__ticks = 1;
    37c8:	fe 01       	movw	r30, r28
    37ca:	e5 5b       	subi	r30, 0xB5	; 181
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	91 83       	std	Z+1, r25	; 0x01
    37d4:	80 83       	st	Z, r24
    37d6:	64 c0       	rjmp	.+200    	; 0x38a0 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    37d8:	fe 01       	movw	r30, r28
    37da:	e3 5b       	subi	r30, 0xB3	; 179
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	3f ef       	ldi	r19, 0xFF	; 255
    37ea:	4f e7       	ldi	r20, 0x7F	; 127
    37ec:	57 e4       	ldi	r21, 0x47	; 71
    37ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f2:	18 16       	cp	r1, r24
    37f4:	0c f0       	brlt	.+2      	; 0x37f8 <LCD_voidInit+0x65c>
    37f6:	43 c0       	rjmp	.+134    	; 0x387e <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f8:	fe 01       	movw	r30, r28
    37fa:	ef 5a       	subi	r30, 0xAF	; 175
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	60 81       	ld	r22, Z
    3800:	71 81       	ldd	r23, Z+1	; 0x01
    3802:	82 81       	ldd	r24, Z+2	; 0x02
    3804:	93 81       	ldd	r25, Z+3	; 0x03
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	8e 01       	movw	r16, r28
    3818:	05 5b       	subi	r16, 0xB5	; 181
    381a:	1f 4f       	sbci	r17, 0xFF	; 255
    381c:	bc 01       	movw	r22, r24
    381e:	cd 01       	movw	r24, r26
    3820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	f8 01       	movw	r30, r16
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
    382e:	1f c0       	rjmp	.+62     	; 0x386e <LCD_voidInit+0x6d2>
    3830:	fe 01       	movw	r30, r28
    3832:	e7 5b       	subi	r30, 0xB7	; 183
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 e9       	ldi	r24, 0x90	; 144
    3838:	91 e0       	ldi	r25, 0x01	; 1
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
    383e:	fe 01       	movw	r30, r28
    3840:	e7 5b       	subi	r30, 0xB7	; 183
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	91 81       	ldd	r25, Z+1	; 0x01
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <LCD_voidInit+0x6ac>
    384c:	fe 01       	movw	r30, r28
    384e:	e7 5b       	subi	r30, 0xB7	; 183
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	de 01       	movw	r26, r28
    3858:	a5 5b       	subi	r26, 0xB5	; 181
    385a:	bf 4f       	sbci	r27, 0xFF	; 255
    385c:	fe 01       	movw	r30, r28
    385e:	e5 5b       	subi	r30, 0xB5	; 181
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	11 96       	adiw	r26, 0x01	; 1
    386a:	9c 93       	st	X, r25
    386c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386e:	fe 01       	movw	r30, r28
    3870:	e5 5b       	subi	r30, 0xB5	; 181
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	d1 f6       	brne	.-76     	; 0x3830 <LCD_voidInit+0x694>
    387c:	27 c0       	rjmp	.+78     	; 0x38cc <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387e:	8e 01       	movw	r16, r28
    3880:	05 5b       	subi	r16, 0xB5	; 181
    3882:	1f 4f       	sbci	r17, 0xFF	; 255
    3884:	fe 01       	movw	r30, r28
    3886:	e3 5b       	subi	r30, 0xB3	; 179
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	82 81       	ldd	r24, Z+2	; 0x02
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	f8 01       	movw	r30, r16
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	80 83       	st	Z, r24
    38a0:	de 01       	movw	r26, r28
    38a2:	a9 5b       	subi	r26, 0xB9	; 185
    38a4:	bf 4f       	sbci	r27, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	e5 5b       	subi	r30, 0xB5	; 181
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	8d 93       	st	X+, r24
    38b2:	9c 93       	st	X, r25
    38b4:	fe 01       	movw	r30, r28
    38b6:	e9 5b       	subi	r30, 0xB9	; 185
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	80 81       	ld	r24, Z
    38bc:	91 81       	ldd	r25, Z+1	; 0x01
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <LCD_voidInit+0x722>
    38c2:	fe 01       	movw	r30, r28
    38c4:	e9 5b       	subi	r30, 0xB9	; 185
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	91 83       	std	Z+1, r25	; 0x01
    38ca:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    38cc:	88 e2       	ldi	r24, 0x28	; 40
    38ce:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
    38d2:	fe 01       	movw	r30, r28
    38d4:	ed 5b       	subi	r30, 0xBD	; 189
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	a0 e8       	ldi	r26, 0x80	; 128
    38de:	bf e3       	ldi	r27, 0x3F	; 63
    38e0:	80 83       	st	Z, r24
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	a2 83       	std	Z+2, r26	; 0x02
    38e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e8:	8e 01       	movw	r16, r28
    38ea:	01 5c       	subi	r16, 0xC1	; 193
    38ec:	1f 4f       	sbci	r17, 0xFF	; 255
    38ee:	fe 01       	movw	r30, r28
    38f0:	ed 5b       	subi	r30, 0xBD	; 189
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	82 81       	ldd	r24, Z+2	; 0x02
    38fa:	93 81       	ldd	r25, Z+3	; 0x03
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	4a e7       	ldi	r20, 0x7A	; 122
    3902:	55 e4       	ldi	r21, 0x45	; 69
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	f8 01       	movw	r30, r16
    390e:	80 83       	st	Z, r24
    3910:	91 83       	std	Z+1, r25	; 0x01
    3912:	a2 83       	std	Z+2, r26	; 0x02
    3914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3916:	fe 01       	movw	r30, r28
    3918:	ff 96       	adiw	r30, 0x3f	; 63
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	82 81       	ldd	r24, Z+2	; 0x02
    3920:	93 81       	ldd	r25, Z+3	; 0x03
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e8       	ldi	r20, 0x80	; 128
    3928:	5f e3       	ldi	r21, 0x3F	; 63
    392a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    392e:	88 23       	and	r24, r24
    3930:	2c f4       	brge	.+10     	; 0x393c <LCD_voidInit+0x7a0>
		__ticks = 1;
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	9e af       	std	Y+62, r25	; 0x3e
    3938:	8d af       	std	Y+61, r24	; 0x3d
    393a:	46 c0       	rjmp	.+140    	; 0x39c8 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    393c:	fe 01       	movw	r30, r28
    393e:	ff 96       	adiw	r30, 0x3f	; 63
    3940:	60 81       	ld	r22, Z
    3942:	71 81       	ldd	r23, Z+1	; 0x01
    3944:	82 81       	ldd	r24, Z+2	; 0x02
    3946:	93 81       	ldd	r25, Z+3	; 0x03
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	3f ef       	ldi	r19, 0xFF	; 255
    394c:	4f e7       	ldi	r20, 0x7F	; 127
    394e:	57 e4       	ldi	r21, 0x47	; 71
    3950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3954:	18 16       	cp	r1, r24
    3956:	64 f5       	brge	.+88     	; 0x39b0 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3958:	fe 01       	movw	r30, r28
    395a:	ed 5b       	subi	r30, 0xBD	; 189
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	60 81       	ld	r22, Z
    3960:	71 81       	ldd	r23, Z+1	; 0x01
    3962:	82 81       	ldd	r24, Z+2	; 0x02
    3964:	93 81       	ldd	r25, Z+3	; 0x03
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	40 e2       	ldi	r20, 0x20	; 32
    396c:	51 e4       	ldi	r21, 0x41	; 65
    396e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	bc 01       	movw	r22, r24
    3978:	cd 01       	movw	r24, r26
    397a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	9e af       	std	Y+62, r25	; 0x3e
    3984:	8d af       	std	Y+61, r24	; 0x3d
    3986:	0f c0       	rjmp	.+30     	; 0x39a6 <LCD_voidInit+0x80a>
    3988:	80 e9       	ldi	r24, 0x90	; 144
    398a:	91 e0       	ldi	r25, 0x01	; 1
    398c:	9c af       	std	Y+60, r25	; 0x3c
    398e:	8b af       	std	Y+59, r24	; 0x3b
    3990:	8b ad       	ldd	r24, Y+59	; 0x3b
    3992:	9c ad       	ldd	r25, Y+60	; 0x3c
    3994:	01 97       	sbiw	r24, 0x01	; 1
    3996:	f1 f7       	brne	.-4      	; 0x3994 <LCD_voidInit+0x7f8>
    3998:	9c af       	std	Y+60, r25	; 0x3c
    399a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    399c:	8d ad       	ldd	r24, Y+61	; 0x3d
    399e:	9e ad       	ldd	r25, Y+62	; 0x3e
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	9e af       	std	Y+62, r25	; 0x3e
    39a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    39a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	69 f7       	brne	.-38     	; 0x3988 <LCD_voidInit+0x7ec>
    39ae:	16 c0       	rjmp	.+44     	; 0x39dc <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b0:	fe 01       	movw	r30, r28
    39b2:	ff 96       	adiw	r30, 0x3f	; 63
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9e af       	std	Y+62, r25	; 0x3e
    39c6:	8d af       	std	Y+61, r24	; 0x3d
    39c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    39ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    39cc:	9a af       	std	Y+58, r25	; 0x3a
    39ce:	89 af       	std	Y+57, r24	; 0x39
    39d0:	89 ad       	ldd	r24, Y+57	; 0x39
    39d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_voidInit+0x838>
    39d8:	9a af       	std	Y+58, r25	; 0x3a
    39da:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    39dc:	88 e0       	ldi	r24, 0x08	; 8
    39de:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	a0 e8       	ldi	r26, 0x80	; 128
    39e8:	bf e3       	ldi	r27, 0x3F	; 63
    39ea:	8d ab       	std	Y+53, r24	; 0x35
    39ec:	9e ab       	std	Y+54, r25	; 0x36
    39ee:	af ab       	std	Y+55, r26	; 0x37
    39f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f2:	6d a9       	ldd	r22, Y+53	; 0x35
    39f4:	7e a9       	ldd	r23, Y+54	; 0x36
    39f6:	8f a9       	ldd	r24, Y+55	; 0x37
    39f8:	98 ad       	ldd	r25, Y+56	; 0x38
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	4a e7       	ldi	r20, 0x7A	; 122
    3a00:	55 e4       	ldi	r21, 0x45	; 69
    3a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	89 ab       	std	Y+49, r24	; 0x31
    3a0c:	9a ab       	std	Y+50, r25	; 0x32
    3a0e:	ab ab       	std	Y+51, r26	; 0x33
    3a10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a12:	69 a9       	ldd	r22, Y+49	; 0x31
    3a14:	7a a9       	ldd	r23, Y+50	; 0x32
    3a16:	8b a9       	ldd	r24, Y+51	; 0x33
    3a18:	9c a9       	ldd	r25, Y+52	; 0x34
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e8       	ldi	r20, 0x80	; 128
    3a20:	5f e3       	ldi	r21, 0x3F	; 63
    3a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a26:	88 23       	and	r24, r24
    3a28:	2c f4       	brge	.+10     	; 0x3a34 <LCD_voidInit+0x898>
		__ticks = 1;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	98 ab       	std	Y+48, r25	; 0x30
    3a30:	8f a7       	std	Y+47, r24	; 0x2f
    3a32:	3f c0       	rjmp	.+126    	; 0x3ab2 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    3a34:	69 a9       	ldd	r22, Y+49	; 0x31
    3a36:	7a a9       	ldd	r23, Y+50	; 0x32
    3a38:	8b a9       	ldd	r24, Y+51	; 0x33
    3a3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	3f ef       	ldi	r19, 0xFF	; 255
    3a40:	4f e7       	ldi	r20, 0x7F	; 127
    3a42:	57 e4       	ldi	r21, 0x47	; 71
    3a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a48:	18 16       	cp	r1, r24
    3a4a:	4c f5       	brge	.+82     	; 0x3a9e <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4c:	6d a9       	ldd	r22, Y+53	; 0x35
    3a4e:	7e a9       	ldd	r23, Y+54	; 0x36
    3a50:	8f a9       	ldd	r24, Y+55	; 0x37
    3a52:	98 ad       	ldd	r25, Y+56	; 0x38
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e2       	ldi	r20, 0x20	; 32
    3a5a:	51 e4       	ldi	r21, 0x41	; 65
    3a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	98 ab       	std	Y+48, r25	; 0x30
    3a72:	8f a7       	std	Y+47, r24	; 0x2f
    3a74:	0f c0       	rjmp	.+30     	; 0x3a94 <LCD_voidInit+0x8f8>
    3a76:	80 e9       	ldi	r24, 0x90	; 144
    3a78:	91 e0       	ldi	r25, 0x01	; 1
    3a7a:	9e a7       	std	Y+46, r25	; 0x2e
    3a7c:	8d a7       	std	Y+45, r24	; 0x2d
    3a7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a80:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	f1 f7       	brne	.-4      	; 0x3a82 <LCD_voidInit+0x8e6>
    3a86:	9e a7       	std	Y+46, r25	; 0x2e
    3a88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	98 ab       	std	Y+48, r25	; 0x30
    3a92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a96:	98 a9       	ldd	r25, Y+48	; 0x30
    3a98:	00 97       	sbiw	r24, 0x00	; 0
    3a9a:	69 f7       	brne	.-38     	; 0x3a76 <LCD_voidInit+0x8da>
    3a9c:	14 c0       	rjmp	.+40     	; 0x3ac6 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    3aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    3aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	98 ab       	std	Y+48, r25	; 0x30
    3ab0:	8f a7       	std	Y+47, r24	; 0x2f
    3ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab6:	9c a7       	std	Y+44, r25	; 0x2c
    3ab8:	8b a7       	std	Y+43, r24	; 0x2b
    3aba:	8b a5       	ldd	r24, Y+43	; 0x2b
    3abc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <LCD_voidInit+0x922>
    3ac2:	9c a7       	std	Y+44, r25	; 0x2c
    3ac4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
    3acc:	80 e0       	ldi	r24, 0x00	; 0
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	a0 ea       	ldi	r26, 0xA0	; 160
    3ad2:	b0 e4       	ldi	r27, 0x40	; 64
    3ad4:	8f a3       	std	Y+39, r24	; 0x27
    3ad6:	98 a7       	std	Y+40, r25	; 0x28
    3ad8:	a9 a7       	std	Y+41, r26	; 0x29
    3ada:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3adc:	6f a1       	ldd	r22, Y+39	; 0x27
    3ade:	78 a5       	ldd	r23, Y+40	; 0x28
    3ae0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ae2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	4a e7       	ldi	r20, 0x7A	; 122
    3aea:	55 e4       	ldi	r21, 0x45	; 69
    3aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	8b a3       	std	Y+35, r24	; 0x23
    3af6:	9c a3       	std	Y+36, r25	; 0x24
    3af8:	ad a3       	std	Y+37, r26	; 0x25
    3afa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3afc:	6b a1       	ldd	r22, Y+35	; 0x23
    3afe:	7c a1       	ldd	r23, Y+36	; 0x24
    3b00:	8d a1       	ldd	r24, Y+37	; 0x25
    3b02:	9e a1       	ldd	r25, Y+38	; 0x26
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e8       	ldi	r20, 0x80	; 128
    3b0a:	5f e3       	ldi	r21, 0x3F	; 63
    3b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b10:	88 23       	and	r24, r24
    3b12:	2c f4       	brge	.+10     	; 0x3b1e <LCD_voidInit+0x982>
		__ticks = 1;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	9a a3       	std	Y+34, r25	; 0x22
    3b1a:	89 a3       	std	Y+33, r24	; 0x21
    3b1c:	3f c0       	rjmp	.+126    	; 0x3b9c <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    3b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b20:	7c a1       	ldd	r23, Y+36	; 0x24
    3b22:	8d a1       	ldd	r24, Y+37	; 0x25
    3b24:	9e a1       	ldd	r25, Y+38	; 0x26
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	4f e7       	ldi	r20, 0x7F	; 127
    3b2c:	57 e4       	ldi	r21, 0x47	; 71
    3b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b32:	18 16       	cp	r1, r24
    3b34:	4c f5       	brge	.+82     	; 0x3b88 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b36:	6f a1       	ldd	r22, Y+39	; 0x27
    3b38:	78 a5       	ldd	r23, Y+40	; 0x28
    3b3a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e2       	ldi	r20, 0x20	; 32
    3b44:	51 e4       	ldi	r21, 0x41	; 65
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	bc 01       	movw	r22, r24
    3b50:	cd 01       	movw	r24, r26
    3b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	9a a3       	std	Y+34, r25	; 0x22
    3b5c:	89 a3       	std	Y+33, r24	; 0x21
    3b5e:	0f c0       	rjmp	.+30     	; 0x3b7e <LCD_voidInit+0x9e2>
    3b60:	80 e9       	ldi	r24, 0x90	; 144
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	98 a3       	std	Y+32, r25	; 0x20
    3b66:	8f 8f       	std	Y+31, r24	; 0x1f
    3b68:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b6a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	f1 f7       	brne	.-4      	; 0x3b6c <LCD_voidInit+0x9d0>
    3b70:	98 a3       	std	Y+32, r25	; 0x20
    3b72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b74:	89 a1       	ldd	r24, Y+33	; 0x21
    3b76:	9a a1       	ldd	r25, Y+34	; 0x22
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	9a a3       	std	Y+34, r25	; 0x22
    3b7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b80:	9a a1       	ldd	r25, Y+34	; 0x22
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	69 f7       	brne	.-38     	; 0x3b60 <LCD_voidInit+0x9c4>
    3b86:	14 c0       	rjmp	.+40     	; 0x3bb0 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b88:	6b a1       	ldd	r22, Y+35	; 0x23
    3b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	9a a3       	std	Y+34, r25	; 0x22
    3b9a:	89 a3       	std	Y+33, r24	; 0x21
    3b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3ba0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ba2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ba6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <LCD_voidInit+0xa0c>
    3bac:	9e 8f       	std	Y+30, r25	; 0x1e
    3bae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    3bb0:	8c e0       	ldi	r24, 0x0C	; 12
    3bb2:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	a0 e8       	ldi	r26, 0x80	; 128
    3bbc:	bf e3       	ldi	r27, 0x3F	; 63
    3bbe:	89 8f       	std	Y+25, r24	; 0x19
    3bc0:	9a 8f       	std	Y+26, r25	; 0x1a
    3bc2:	ab 8f       	std	Y+27, r26	; 0x1b
    3bc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    3bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	4a e7       	ldi	r20, 0x7A	; 122
    3bd4:	55 e4       	ldi	r21, 0x45	; 69
    3bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	8d 8b       	std	Y+21, r24	; 0x15
    3be0:	9e 8b       	std	Y+22, r25	; 0x16
    3be2:	af 8b       	std	Y+23, r26	; 0x17
    3be4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3be6:	6d 89       	ldd	r22, Y+21	; 0x15
    3be8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bea:	8f 89       	ldd	r24, Y+23	; 0x17
    3bec:	98 8d       	ldd	r25, Y+24	; 0x18
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e8       	ldi	r20, 0x80	; 128
    3bf4:	5f e3       	ldi	r21, 0x3F	; 63
    3bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bfa:	88 23       	and	r24, r24
    3bfc:	2c f4       	brge	.+10     	; 0x3c08 <LCD_voidInit+0xa6c>
		__ticks = 1;
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	9c 8b       	std	Y+20, r25	; 0x14
    3c04:	8b 8b       	std	Y+19, r24	; 0x13
    3c06:	3f c0       	rjmp	.+126    	; 0x3c86 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    3c08:	6d 89       	ldd	r22, Y+21	; 0x15
    3c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	3f ef       	ldi	r19, 0xFF	; 255
    3c14:	4f e7       	ldi	r20, 0x7F	; 127
    3c16:	57 e4       	ldi	r21, 0x47	; 71
    3c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c1c:	18 16       	cp	r1, r24
    3c1e:	4c f5       	brge	.+82     	; 0x3c72 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c20:	69 8d       	ldd	r22, Y+25	; 0x19
    3c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e2       	ldi	r20, 0x20	; 32
    3c2e:	51 e4       	ldi	r21, 0x41	; 65
    3c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	bc 01       	movw	r22, r24
    3c3a:	cd 01       	movw	r24, r26
    3c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	9c 8b       	std	Y+20, r25	; 0x14
    3c46:	8b 8b       	std	Y+19, r24	; 0x13
    3c48:	0f c0       	rjmp	.+30     	; 0x3c68 <LCD_voidInit+0xacc>
    3c4a:	80 e9       	ldi	r24, 0x90	; 144
    3c4c:	91 e0       	ldi	r25, 0x01	; 1
    3c4e:	9a 8b       	std	Y+18, r25	; 0x12
    3c50:	89 8b       	std	Y+17, r24	; 0x11
    3c52:	89 89       	ldd	r24, Y+17	; 0x11
    3c54:	9a 89       	ldd	r25, Y+18	; 0x12
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	f1 f7       	brne	.-4      	; 0x3c56 <LCD_voidInit+0xaba>
    3c5a:	9a 8b       	std	Y+18, r25	; 0x12
    3c5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c60:	9c 89       	ldd	r25, Y+20	; 0x14
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	9c 8b       	std	Y+20, r25	; 0x14
    3c66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c68:	8b 89       	ldd	r24, Y+19	; 0x13
    3c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	69 f7       	brne	.-38     	; 0x3c4a <LCD_voidInit+0xaae>
    3c70:	14 c0       	rjmp	.+40     	; 0x3c9a <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c72:	6d 89       	ldd	r22, Y+21	; 0x15
    3c74:	7e 89       	ldd	r23, Y+22	; 0x16
    3c76:	8f 89       	ldd	r24, Y+23	; 0x17
    3c78:	98 8d       	ldd	r25, Y+24	; 0x18
    3c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	9c 8b       	std	Y+20, r25	; 0x14
    3c84:	8b 8b       	std	Y+19, r24	; 0x13
    3c86:	8b 89       	ldd	r24, Y+19	; 0x13
    3c88:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8a:	98 8b       	std	Y+16, r25	; 0x10
    3c8c:	8f 87       	std	Y+15, r24	; 0x0f
    3c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c90:	98 89       	ldd	r25, Y+16	; 0x10
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <LCD_voidInit+0xaf6>
    3c96:	98 8b       	std	Y+16, r25	; 0x10
    3c98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    3c9a:	86 e0       	ldi	r24, 0x06	; 6
    3c9c:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	a0 e8       	ldi	r26, 0x80	; 128
    3ca6:	bf e3       	ldi	r27, 0x3F	; 63
    3ca8:	8b 87       	std	Y+11, r24	; 0x0b
    3caa:	9c 87       	std	Y+12, r25	; 0x0c
    3cac:	ad 87       	std	Y+13, r26	; 0x0d
    3cae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	4a e7       	ldi	r20, 0x7A	; 122
    3cbe:	55 e4       	ldi	r21, 0x45	; 69
    3cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	8f 83       	std	Y+7, r24	; 0x07
    3cca:	98 87       	std	Y+8, r25	; 0x08
    3ccc:	a9 87       	std	Y+9, r26	; 0x09
    3cce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd2:	78 85       	ldd	r23, Y+8	; 0x08
    3cd4:	89 85       	ldd	r24, Y+9	; 0x09
    3cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e8       	ldi	r20, 0x80	; 128
    3cde:	5f e3       	ldi	r21, 0x3F	; 63
    3ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce4:	88 23       	and	r24, r24
    3ce6:	2c f4       	brge	.+10     	; 0x3cf2 <LCD_voidInit+0xb56>
		__ticks = 1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	9e 83       	std	Y+6, r25	; 0x06
    3cee:	8d 83       	std	Y+5, r24	; 0x05
    3cf0:	3f c0       	rjmp	.+126    	; 0x3d70 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    3cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cf4:	78 85       	ldd	r23, Y+8	; 0x08
    3cf6:	89 85       	ldd	r24, Y+9	; 0x09
    3cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	3f ef       	ldi	r19, 0xFF	; 255
    3cfe:	4f e7       	ldi	r20, 0x7F	; 127
    3d00:	57 e4       	ldi	r21, 0x47	; 71
    3d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d06:	18 16       	cp	r1, r24
    3d08:	4c f5       	brge	.+82     	; 0x3d5c <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 e2       	ldi	r20, 0x20	; 32
    3d18:	51 e4       	ldi	r21, 0x41	; 65
    3d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	9e 83       	std	Y+6, r25	; 0x06
    3d30:	8d 83       	std	Y+5, r24	; 0x05
    3d32:	0f c0       	rjmp	.+30     	; 0x3d52 <LCD_voidInit+0xbb6>
    3d34:	80 e9       	ldi	r24, 0x90	; 144
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	9c 83       	std	Y+4, r25	; 0x04
    3d3a:	8b 83       	std	Y+3, r24	; 0x03
    3d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	f1 f7       	brne	.-4      	; 0x3d40 <LCD_voidInit+0xba4>
    3d44:	9c 83       	std	Y+4, r25	; 0x04
    3d46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d48:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	9e 83       	std	Y+6, r25	; 0x06
    3d50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d52:	8d 81       	ldd	r24, Y+5	; 0x05
    3d54:	9e 81       	ldd	r25, Y+6	; 0x06
    3d56:	00 97       	sbiw	r24, 0x00	; 0
    3d58:	69 f7       	brne	.-38     	; 0x3d34 <LCD_voidInit+0xb98>
    3d5a:	14 c0       	rjmp	.+40     	; 0x3d84 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5e:	78 85       	ldd	r23, Y+8	; 0x08
    3d60:	89 85       	ldd	r24, Y+9	; 0x09
    3d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	9e 83       	std	Y+6, r25	; 0x06
    3d6e:	8d 83       	std	Y+5, r24	; 0x05
    3d70:	8d 81       	ldd	r24, Y+5	; 0x05
    3d72:	9e 81       	ldd	r25, Y+6	; 0x06
    3d74:	9a 83       	std	Y+2, r25	; 0x02
    3d76:	89 83       	std	Y+1, r24	; 0x01
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	f1 f7       	brne	.-4      	; 0x3d7c <LCD_voidInit+0xbe0>
    3d80:	9a 83       	std	Y+2, r25	; 0x02
    3d82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3d84:	c4 57       	subi	r28, 0x74	; 116
    3d86:	df 4f       	sbci	r29, 0xFF	; 255
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	08 95       	ret

00003d9c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	2f 97       	sbiw	r28, 0x0f	; 15
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	63 e0       	ldi	r22, 0x03	; 3
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	62 e0       	ldi	r22, 0x02	; 2
    3dc0:	41 e0       	ldi	r20, 0x01	; 1
    3dc2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc8:	82 95       	swap	r24
    3dca:	8f 70       	andi	r24, 0x0F	; 15
    3dcc:	98 2f       	mov	r25, r24
    3dce:	91 70       	andi	r25, 0x01	; 1
    3dd0:	82 e0       	ldi	r24, 0x02	; 2
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	49 2f       	mov	r20, r25
    3dd6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ddc:	82 95       	swap	r24
    3dde:	86 95       	lsr	r24
    3de0:	87 70       	andi	r24, 0x07	; 7
    3de2:	98 2f       	mov	r25, r24
    3de4:	91 70       	andi	r25, 0x01	; 1
    3de6:	82 e0       	ldi	r24, 0x02	; 2
    3de8:	61 e0       	ldi	r22, 0x01	; 1
    3dea:	49 2f       	mov	r20, r25
    3dec:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    3df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df2:	82 95       	swap	r24
    3df4:	86 95       	lsr	r24
    3df6:	86 95       	lsr	r24
    3df8:	83 70       	andi	r24, 0x03	; 3
    3dfa:	98 2f       	mov	r25, r24
    3dfc:	91 70       	andi	r25, 0x01	; 1
    3dfe:	82 e0       	ldi	r24, 0x02	; 2
    3e00:	62 e0       	ldi	r22, 0x02	; 2
    3e02:	49 2f       	mov	r20, r25
    3e04:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    3e08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e0a:	98 2f       	mov	r25, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	99 27       	eor	r25, r25
    3e10:	99 1f       	adc	r25, r25
    3e12:	82 e0       	ldi	r24, 0x02	; 2
    3e14:	64 e0       	ldi	r22, 0x04	; 4
    3e16:	49 2f       	mov	r20, r25
    3e18:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	62 e0       	ldi	r22, 0x02	; 2
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	62 e0       	ldi	r22, 0x02	; 2
    3e2a:	41 e0       	ldi	r20, 0x01	; 1
    3e2c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    3e30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e32:	98 2f       	mov	r25, r24
    3e34:	91 70       	andi	r25, 0x01	; 1
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	60 e0       	ldi	r22, 0x00	; 0
    3e3a:	49 2f       	mov	r20, r25
    3e3c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    3e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e42:	86 95       	lsr	r24
    3e44:	98 2f       	mov	r25, r24
    3e46:	91 70       	andi	r25, 0x01	; 1
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	61 e0       	ldi	r22, 0x01	; 1
    3e4c:	49 2f       	mov	r20, r25
    3e4e:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    3e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e54:	86 95       	lsr	r24
    3e56:	86 95       	lsr	r24
    3e58:	98 2f       	mov	r25, r24
    3e5a:	91 70       	andi	r25, 0x01	; 1
    3e5c:	82 e0       	ldi	r24, 0x02	; 2
    3e5e:	62 e0       	ldi	r22, 0x02	; 2
    3e60:	49 2f       	mov	r20, r25
    3e62:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    3e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e68:	86 95       	lsr	r24
    3e6a:	86 95       	lsr	r24
    3e6c:	86 95       	lsr	r24
    3e6e:	98 2f       	mov	r25, r24
    3e70:	91 70       	andi	r25, 0x01	; 1
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	64 e0       	ldi	r22, 0x04	; 4
    3e76:	49 2f       	mov	r20, r25
    3e78:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	62 e0       	ldi	r22, 0x02	; 2
    3e80:	40 e0       	ldi	r20, 0x00	; 0
    3e82:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e8c:	b0 e4       	ldi	r27, 0x40	; 64
    3e8e:	8b 87       	std	Y+11, r24	; 0x0b
    3e90:	9c 87       	std	Y+12, r25	; 0x0c
    3e92:	ad 87       	std	Y+13, r26	; 0x0d
    3e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4a e7       	ldi	r20, 0x7A	; 122
    3ea4:	55 e4       	ldi	r21, 0x45	; 69
    3ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	8f 83       	std	Y+7, r24	; 0x07
    3eb0:	98 87       	std	Y+8, r25	; 0x08
    3eb2:	a9 87       	std	Y+9, r26	; 0x09
    3eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb8:	78 85       	ldd	r23, Y+8	; 0x08
    3eba:	89 85       	ldd	r24, Y+9	; 0x09
    3ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e8       	ldi	r20, 0x80	; 128
    3ec4:	5f e3       	ldi	r21, 0x3F	; 63
    3ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eca:	88 23       	and	r24, r24
    3ecc:	2c f4       	brge	.+10     	; 0x3ed8 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	9e 83       	std	Y+6, r25	; 0x06
    3ed4:	8d 83       	std	Y+5, r24	; 0x05
    3ed6:	3f c0       	rjmp	.+126    	; 0x3f56 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    3ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eda:	78 85       	ldd	r23, Y+8	; 0x08
    3edc:	89 85       	ldd	r24, Y+9	; 0x09
    3ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	3f ef       	ldi	r19, 0xFF	; 255
    3ee4:	4f e7       	ldi	r20, 0x7F	; 127
    3ee6:	57 e4       	ldi	r21, 0x47	; 71
    3ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eec:	18 16       	cp	r1, r24
    3eee:	4c f5       	brge	.+82     	; 0x3f42 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e2       	ldi	r20, 0x20	; 32
    3efe:	51 e4       	ldi	r21, 0x41	; 65
    3f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	bc 01       	movw	r22, r24
    3f0a:	cd 01       	movw	r24, r26
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
    3f18:	0f c0       	rjmp	.+30     	; 0x3f38 <LCD_voidSendCommand+0x19c>
    3f1a:	80 e9       	ldi	r24, 0x90	; 144
    3f1c:	91 e0       	ldi	r25, 0x01	; 1
    3f1e:	9c 83       	std	Y+4, r25	; 0x04
    3f20:	8b 83       	std	Y+3, r24	; 0x03
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	9c 81       	ldd	r25, Y+4	; 0x04
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	f1 f7       	brne	.-4      	; 0x3f26 <LCD_voidSendCommand+0x18a>
    3f2a:	9c 83       	std	Y+4, r25	; 0x04
    3f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	9e 81       	ldd	r25, Y+6	; 0x06
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	9e 83       	std	Y+6, r25	; 0x06
    3f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f38:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	69 f7       	brne	.-38     	; 0x3f1a <LCD_voidSendCommand+0x17e>
    3f40:	14 c0       	rjmp	.+40     	; 0x3f6a <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f42:	6f 81       	ldd	r22, Y+7	; 0x07
    3f44:	78 85       	ldd	r23, Y+8	; 0x08
    3f46:	89 85       	ldd	r24, Y+9	; 0x09
    3f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	9e 83       	std	Y+6, r25	; 0x06
    3f54:	8d 83       	std	Y+5, r24	; 0x05
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	9a 83       	std	Y+2, r25	; 0x02
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	9a 81       	ldd	r25, Y+2	; 0x02
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <LCD_voidSendCommand+0x1c6>
    3f66:	9a 83       	std	Y+2, r25	; 0x02
    3f68:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3f6a:	2f 96       	adiw	r28, 0x0f	; 15
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	08 95       	ret

00003f7c <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    3f7c:	df 93       	push	r29
    3f7e:	cf 93       	push	r28
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	2f 97       	sbiw	r28, 0x0f	; 15
    3f86:	0f b6       	in	r0, 0x3f	; 63
    3f88:	f8 94       	cli
    3f8a:	de bf       	out	0x3e, r29	; 62
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	cd bf       	out	0x3d, r28	; 61
    3f90:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	63 e0       	ldi	r22, 0x03	; 3
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	62 e0       	ldi	r22, 0x02	; 2
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fa8:	82 95       	swap	r24
    3faa:	8f 70       	andi	r24, 0x0F	; 15
    3fac:	98 2f       	mov	r25, r24
    3fae:	91 70       	andi	r25, 0x01	; 1
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	49 2f       	mov	r20, r25
    3fb6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fbc:	82 95       	swap	r24
    3fbe:	86 95       	lsr	r24
    3fc0:	87 70       	andi	r24, 0x07	; 7
    3fc2:	98 2f       	mov	r25, r24
    3fc4:	91 70       	andi	r25, 0x01	; 1
    3fc6:	82 e0       	ldi	r24, 0x02	; 2
    3fc8:	61 e0       	ldi	r22, 0x01	; 1
    3fca:	49 2f       	mov	r20, r25
    3fcc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    3fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd2:	82 95       	swap	r24
    3fd4:	86 95       	lsr	r24
    3fd6:	86 95       	lsr	r24
    3fd8:	83 70       	andi	r24, 0x03	; 3
    3fda:	98 2f       	mov	r25, r24
    3fdc:	91 70       	andi	r25, 0x01	; 1
    3fde:	82 e0       	ldi	r24, 0x02	; 2
    3fe0:	62 e0       	ldi	r22, 0x02	; 2
    3fe2:	49 2f       	mov	r20, r25
    3fe4:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    3fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fea:	98 2f       	mov	r25, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	99 27       	eor	r25, r25
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	82 e0       	ldi	r24, 0x02	; 2
    3ff4:	64 e0       	ldi	r22, 0x04	; 4
    3ff6:	49 2f       	mov	r20, r25
    3ff8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	62 e0       	ldi	r22, 0x02	; 2
    4000:	40 e0       	ldi	r20, 0x00	; 0
    4002:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a0 ea       	ldi	r26, 0xA0	; 160
    400c:	b0 e4       	ldi	r27, 0x40	; 64
    400e:	8b 87       	std	Y+11, r24	; 0x0b
    4010:	9c 87       	std	Y+12, r25	; 0x0c
    4012:	ad 87       	std	Y+13, r26	; 0x0d
    4014:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4016:	6b 85       	ldd	r22, Y+11	; 0x0b
    4018:	7c 85       	ldd	r23, Y+12	; 0x0c
    401a:	8d 85       	ldd	r24, Y+13	; 0x0d
    401c:	9e 85       	ldd	r25, Y+14	; 0x0e
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	4a e7       	ldi	r20, 0x7A	; 122
    4024:	55 e4       	ldi	r21, 0x45	; 69
    4026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	8f 83       	std	Y+7, r24	; 0x07
    4030:	98 87       	std	Y+8, r25	; 0x08
    4032:	a9 87       	std	Y+9, r26	; 0x09
    4034:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4036:	6f 81       	ldd	r22, Y+7	; 0x07
    4038:	78 85       	ldd	r23, Y+8	; 0x08
    403a:	89 85       	ldd	r24, Y+9	; 0x09
    403c:	9a 85       	ldd	r25, Y+10	; 0x0a
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e8       	ldi	r20, 0x80	; 128
    4044:	5f e3       	ldi	r21, 0x3F	; 63
    4046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    404a:	88 23       	and	r24, r24
    404c:	2c f4       	brge	.+10     	; 0x4058 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	9e 83       	std	Y+6, r25	; 0x06
    4054:	8d 83       	std	Y+5, r24	; 0x05
    4056:	3f c0       	rjmp	.+126    	; 0x40d6 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    4058:	6f 81       	ldd	r22, Y+7	; 0x07
    405a:	78 85       	ldd	r23, Y+8	; 0x08
    405c:	89 85       	ldd	r24, Y+9	; 0x09
    405e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	3f ef       	ldi	r19, 0xFF	; 255
    4064:	4f e7       	ldi	r20, 0x7F	; 127
    4066:	57 e4       	ldi	r21, 0x47	; 71
    4068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    406c:	18 16       	cp	r1, r24
    406e:	4c f5       	brge	.+82     	; 0x40c2 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4070:	6b 85       	ldd	r22, Y+11	; 0x0b
    4072:	7c 85       	ldd	r23, Y+12	; 0x0c
    4074:	8d 85       	ldd	r24, Y+13	; 0x0d
    4076:	9e 85       	ldd	r25, Y+14	; 0x0e
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e2       	ldi	r20, 0x20	; 32
    407e:	51 e4       	ldi	r21, 0x41	; 65
    4080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	bc 01       	movw	r22, r24
    408a:	cd 01       	movw	r24, r26
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	9e 83       	std	Y+6, r25	; 0x06
    4096:	8d 83       	std	Y+5, r24	; 0x05
    4098:	0f c0       	rjmp	.+30     	; 0x40b8 <LCD_voidSendInitCommand+0x13c>
    409a:	80 e9       	ldi	r24, 0x90	; 144
    409c:	91 e0       	ldi	r25, 0x01	; 1
    409e:	9c 83       	std	Y+4, r25	; 0x04
    40a0:	8b 83       	std	Y+3, r24	; 0x03
    40a2:	8b 81       	ldd	r24, Y+3	; 0x03
    40a4:	9c 81       	ldd	r25, Y+4	; 0x04
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <LCD_voidSendInitCommand+0x12a>
    40aa:	9c 83       	std	Y+4, r25	; 0x04
    40ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ae:	8d 81       	ldd	r24, Y+5	; 0x05
    40b0:	9e 81       	ldd	r25, Y+6	; 0x06
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ba:	9e 81       	ldd	r25, Y+6	; 0x06
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	69 f7       	brne	.-38     	; 0x409a <LCD_voidSendInitCommand+0x11e>
    40c0:	14 c0       	rjmp	.+40     	; 0x40ea <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40c2:	6f 81       	ldd	r22, Y+7	; 0x07
    40c4:	78 85       	ldd	r23, Y+8	; 0x08
    40c6:	89 85       	ldd	r24, Y+9	; 0x09
    40c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	9e 83       	std	Y+6, r25	; 0x06
    40d4:	8d 83       	std	Y+5, r24	; 0x05
    40d6:	8d 81       	ldd	r24, Y+5	; 0x05
    40d8:	9e 81       	ldd	r25, Y+6	; 0x06
    40da:	9a 83       	std	Y+2, r25	; 0x02
    40dc:	89 83       	std	Y+1, r24	; 0x01
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	9a 81       	ldd	r25, Y+2	; 0x02
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <LCD_voidSendInitCommand+0x166>
    40e6:	9a 83       	std	Y+2, r25	; 0x02
    40e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    40ea:	2f 96       	adiw	r28, 0x0f	; 15
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	f8 94       	cli
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	0f be       	out	0x3f, r0	; 63
    40f4:	cd bf       	out	0x3d, r28	; 61
    40f6:	cf 91       	pop	r28
    40f8:	df 91       	pop	r29
    40fa:	08 95       	ret

000040fc <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	2f 97       	sbiw	r28, 0x0f	; 15
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	63 e0       	ldi	r22, 0x03	; 3
    4116:	41 e0       	ldi	r20, 0x01	; 1
    4118:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	62 e0       	ldi	r22, 0x02	; 2
    4120:	41 e0       	ldi	r20, 0x01	; 1
    4122:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    4126:	8f 85       	ldd	r24, Y+15	; 0x0f
    4128:	82 95       	swap	r24
    412a:	8f 70       	andi	r24, 0x0F	; 15
    412c:	98 2f       	mov	r25, r24
    412e:	91 70       	andi	r25, 0x01	; 1
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	60 e0       	ldi	r22, 0x00	; 0
    4134:	49 2f       	mov	r20, r25
    4136:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    413a:	8f 85       	ldd	r24, Y+15	; 0x0f
    413c:	82 95       	swap	r24
    413e:	86 95       	lsr	r24
    4140:	87 70       	andi	r24, 0x07	; 7
    4142:	98 2f       	mov	r25, r24
    4144:	91 70       	andi	r25, 0x01	; 1
    4146:	82 e0       	ldi	r24, 0x02	; 2
    4148:	61 e0       	ldi	r22, 0x01	; 1
    414a:	49 2f       	mov	r20, r25
    414c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    4150:	8f 85       	ldd	r24, Y+15	; 0x0f
    4152:	82 95       	swap	r24
    4154:	86 95       	lsr	r24
    4156:	86 95       	lsr	r24
    4158:	83 70       	andi	r24, 0x03	; 3
    415a:	98 2f       	mov	r25, r24
    415c:	91 70       	andi	r25, 0x01	; 1
    415e:	82 e0       	ldi	r24, 0x02	; 2
    4160:	62 e0       	ldi	r22, 0x02	; 2
    4162:	49 2f       	mov	r20, r25
    4164:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    4168:	8f 85       	ldd	r24, Y+15	; 0x0f
    416a:	98 2f       	mov	r25, r24
    416c:	99 1f       	adc	r25, r25
    416e:	99 27       	eor	r25, r25
    4170:	99 1f       	adc	r25, r25
    4172:	82 e0       	ldi	r24, 0x02	; 2
    4174:	64 e0       	ldi	r22, 0x04	; 4
    4176:	49 2f       	mov	r20, r25
    4178:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	62 e0       	ldi	r22, 0x02	; 2
    4180:	40 e0       	ldi	r20, 0x00	; 0
    4182:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	62 e0       	ldi	r22, 0x02	; 2
    418a:	41 e0       	ldi	r20, 0x01	; 1
    418c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    4190:	8f 85       	ldd	r24, Y+15	; 0x0f
    4192:	98 2f       	mov	r25, r24
    4194:	91 70       	andi	r25, 0x01	; 1
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	49 2f       	mov	r20, r25
    419c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    41a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a2:	86 95       	lsr	r24
    41a4:	98 2f       	mov	r25, r24
    41a6:	91 70       	andi	r25, 0x01	; 1
    41a8:	82 e0       	ldi	r24, 0x02	; 2
    41aa:	61 e0       	ldi	r22, 0x01	; 1
    41ac:	49 2f       	mov	r20, r25
    41ae:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    41b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b4:	86 95       	lsr	r24
    41b6:	86 95       	lsr	r24
    41b8:	98 2f       	mov	r25, r24
    41ba:	91 70       	andi	r25, 0x01	; 1
    41bc:	82 e0       	ldi	r24, 0x02	; 2
    41be:	62 e0       	ldi	r22, 0x02	; 2
    41c0:	49 2f       	mov	r20, r25
    41c2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    41c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c8:	86 95       	lsr	r24
    41ca:	86 95       	lsr	r24
    41cc:	86 95       	lsr	r24
    41ce:	98 2f       	mov	r25, r24
    41d0:	91 70       	andi	r25, 0x01	; 1
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	64 e0       	ldi	r22, 0x04	; 4
    41d6:	49 2f       	mov	r20, r25
    41d8:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	62 e0       	ldi	r22, 0x02	; 2
    41e0:	40 e0       	ldi	r20, 0x00	; 0
    41e2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	a0 ea       	ldi	r26, 0xA0	; 160
    41ec:	b0 e4       	ldi	r27, 0x40	; 64
    41ee:	8b 87       	std	Y+11, r24	; 0x0b
    41f0:	9c 87       	std	Y+12, r25	; 0x0c
    41f2:	ad 87       	std	Y+13, r26	; 0x0d
    41f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	4a e7       	ldi	r20, 0x7A	; 122
    4204:	55 e4       	ldi	r21, 0x45	; 69
    4206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	8f 83       	std	Y+7, r24	; 0x07
    4210:	98 87       	std	Y+8, r25	; 0x08
    4212:	a9 87       	std	Y+9, r26	; 0x09
    4214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4216:	6f 81       	ldd	r22, Y+7	; 0x07
    4218:	78 85       	ldd	r23, Y+8	; 0x08
    421a:	89 85       	ldd	r24, Y+9	; 0x09
    421c:	9a 85       	ldd	r25, Y+10	; 0x0a
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e8       	ldi	r20, 0x80	; 128
    4224:	5f e3       	ldi	r21, 0x3F	; 63
    4226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    422a:	88 23       	and	r24, r24
    422c:	2c f4       	brge	.+10     	; 0x4238 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	9e 83       	std	Y+6, r25	; 0x06
    4234:	8d 83       	std	Y+5, r24	; 0x05
    4236:	3f c0       	rjmp	.+126    	; 0x42b6 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    4238:	6f 81       	ldd	r22, Y+7	; 0x07
    423a:	78 85       	ldd	r23, Y+8	; 0x08
    423c:	89 85       	ldd	r24, Y+9	; 0x09
    423e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	3f ef       	ldi	r19, 0xFF	; 255
    4244:	4f e7       	ldi	r20, 0x7F	; 127
    4246:	57 e4       	ldi	r21, 0x47	; 71
    4248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    424c:	18 16       	cp	r1, r24
    424e:	4c f5       	brge	.+82     	; 0x42a2 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4250:	6b 85       	ldd	r22, Y+11	; 0x0b
    4252:	7c 85       	ldd	r23, Y+12	; 0x0c
    4254:	8d 85       	ldd	r24, Y+13	; 0x0d
    4256:	9e 85       	ldd	r25, Y+14	; 0x0e
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	40 e2       	ldi	r20, 0x20	; 32
    425e:	51 e4       	ldi	r21, 0x41	; 65
    4260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	9e 83       	std	Y+6, r25	; 0x06
    4276:	8d 83       	std	Y+5, r24	; 0x05
    4278:	0f c0       	rjmp	.+30     	; 0x4298 <LCD_voidWriteChar+0x19c>
    427a:	80 e9       	ldi	r24, 0x90	; 144
    427c:	91 e0       	ldi	r25, 0x01	; 1
    427e:	9c 83       	std	Y+4, r25	; 0x04
    4280:	8b 83       	std	Y+3, r24	; 0x03
    4282:	8b 81       	ldd	r24, Y+3	; 0x03
    4284:	9c 81       	ldd	r25, Y+4	; 0x04
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <LCD_voidWriteChar+0x18a>
    428a:	9c 83       	std	Y+4, r25	; 0x04
    428c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	9e 81       	ldd	r25, Y+6	; 0x06
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	9e 83       	std	Y+6, r25	; 0x06
    4296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	8d 81       	ldd	r24, Y+5	; 0x05
    429a:	9e 81       	ldd	r25, Y+6	; 0x06
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	69 f7       	brne	.-38     	; 0x427a <LCD_voidWriteChar+0x17e>
    42a0:	14 c0       	rjmp	.+40     	; 0x42ca <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a2:	6f 81       	ldd	r22, Y+7	; 0x07
    42a4:	78 85       	ldd	r23, Y+8	; 0x08
    42a6:	89 85       	ldd	r24, Y+9	; 0x09
    42a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	9e 83       	std	Y+6, r25	; 0x06
    42b4:	8d 83       	std	Y+5, r24	; 0x05
    42b6:	8d 81       	ldd	r24, Y+5	; 0x05
    42b8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <LCD_voidWriteChar+0x1c6>
    42c6:	9a 83       	std	Y+2, r25	; 0x02
    42c8:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    42ca:	2f 96       	adiw	r28, 0x0f	; 15
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret

000042dc <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    42dc:	df 93       	push	r29
    42de:	cf 93       	push	r28
    42e0:	00 d0       	rcall	.+0      	; 0x42e2 <LCD_voidWriteString+0x6>
    42e2:	0f 92       	push	r0
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
    42e8:	9b 83       	std	Y+3, r25	; 0x03
    42ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    42ec:	19 82       	std	Y+1, r1	; 0x01
    42ee:	0e c0       	rjmp	.+28     	; 0x430c <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	28 2f       	mov	r18, r24
    42f4:	30 e0       	ldi	r19, 0x00	; 0
    42f6:	8a 81       	ldd	r24, Y+2	; 0x02
    42f8:	9b 81       	ldd	r25, Y+3	; 0x03
    42fa:	fc 01       	movw	r30, r24
    42fc:	e2 0f       	add	r30, r18
    42fe:	f3 1f       	adc	r31, r19
    4300:	80 81       	ld	r24, Z
    4302:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
		index++;
    4306:	89 81       	ldd	r24, Y+1	; 0x01
    4308:	8f 5f       	subi	r24, 0xFF	; 255
    430a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	28 2f       	mov	r18, r24
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	8a 81       	ldd	r24, Y+2	; 0x02
    4314:	9b 81       	ldd	r25, Y+3	; 0x03
    4316:	fc 01       	movw	r30, r24
    4318:	e2 0f       	add	r30, r18
    431a:	f3 1f       	adc	r31, r19
    431c:	80 81       	ld	r24, Z
    431e:	88 23       	and	r24, r24
    4320:	39 f7       	brne	.-50     	; 0x42f0 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    4322:	0f 90       	pop	r0
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	df 93       	push	r29
    4334:	cf 93       	push	r28
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	2e 97       	sbiw	r28, 0x0e	; 14
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	69 87       	std	Y+9, r22	; 0x09
    4348:	7a 87       	std	Y+10, r23	; 0x0a
    434a:	8b 87       	std	Y+11, r24	; 0x0b
    434c:	9c 87       	std	Y+12, r25	; 0x0c
    434e:	5e 87       	std	Y+14, r21	; 0x0e
    4350:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    4352:	1d 82       	std	Y+5, r1	; 0x05
    4354:	1e 82       	std	Y+6, r1	; 0x06
    4356:	1f 82       	std	Y+7, r1	; 0x07
    4358:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    435a:	83 e1       	ldi	r24, 0x13	; 19
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	a0 e0       	ldi	r26, 0x00	; 0
    4360:	b0 e0       	ldi	r27, 0x00	; 0
    4362:	89 83       	std	Y+1, r24	; 0x01
    4364:	9a 83       	std	Y+2, r25	; 0x02
    4366:	ab 83       	std	Y+3, r26	; 0x03
    4368:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    436a:	29 81       	ldd	r18, Y+1	; 0x01
    436c:	3a 81       	ldd	r19, Y+2	; 0x02
    436e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4370:	9e 85       	ldd	r25, Y+14	; 0x0e
    4372:	fc 01       	movw	r30, r24
    4374:	e2 0f       	add	r30, r18
    4376:	f3 1f       	adc	r31, r19
    4378:	10 82       	st	Z, r1
    437a:	89 81       	ldd	r24, Y+1	; 0x01
    437c:	9a 81       	ldd	r25, Y+2	; 0x02
    437e:	ab 81       	ldd	r26, Y+3	; 0x03
    4380:	bc 81       	ldd	r27, Y+4	; 0x04
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	a1 09       	sbc	r26, r1
    4386:	b1 09       	sbc	r27, r1
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	9a 83       	std	Y+2, r25	; 0x02
    438c:	ab 83       	std	Y+3, r26	; 0x03
    438e:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	ab 85       	ldd	r26, Y+11	; 0x0b
    4396:	bc 85       	ldd	r27, Y+12	; 0x0c
    4398:	bb 23       	and	r27, r27
    439a:	0c f0       	brlt	.+2      	; 0x439e <IntToString+0x70>
    439c:	4d c0       	rjmp	.+154    	; 0x4438 <IntToString+0x10a>
		flag = 1;
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	a0 e0       	ldi	r26, 0x00	; 0
    43a4:	b0 e0       	ldi	r27, 0x00	; 0
    43a6:	8d 83       	std	Y+5, r24	; 0x05
    43a8:	9e 83       	std	Y+6, r25	; 0x06
    43aa:	af 83       	std	Y+7, r26	; 0x07
    43ac:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    43ae:	89 85       	ldd	r24, Y+9	; 0x09
    43b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    43b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    43b6:	b0 95       	com	r27
    43b8:	a0 95       	com	r26
    43ba:	90 95       	com	r25
    43bc:	81 95       	neg	r24
    43be:	9f 4f       	sbci	r25, 0xFF	; 255
    43c0:	af 4f       	sbci	r26, 0xFF	; 255
    43c2:	bf 4f       	sbci	r27, 0xFF	; 255
    43c4:	89 87       	std	Y+9, r24	; 0x09
    43c6:	9a 87       	std	Y+10, r25	; 0x0a
    43c8:	ab 87       	std	Y+11, r26	; 0x0b
    43ca:	bc 87       	std	Y+12, r27	; 0x0c
    43cc:	35 c0       	rjmp	.+106    	; 0x4438 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    43ce:	29 81       	ldd	r18, Y+1	; 0x01
    43d0:	3a 81       	ldd	r19, Y+2	; 0x02
    43d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43d6:	8c 01       	movw	r16, r24
    43d8:	02 0f       	add	r16, r18
    43da:	13 1f       	adc	r17, r19
    43dc:	89 85       	ldd	r24, Y+9	; 0x09
    43de:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    43e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    43e4:	2a e0       	ldi	r18, 0x0A	; 10
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e0       	ldi	r20, 0x00	; 0
    43ea:	50 e0       	ldi	r21, 0x00	; 0
    43ec:	bc 01       	movw	r22, r24
    43ee:	cd 01       	movw	r24, r26
    43f0:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__divmodsi4>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	80 5d       	subi	r24, 0xD0	; 208
    43fa:	f8 01       	movw	r30, r16
    43fc:	80 83       	st	Z, r24
    43fe:	89 81       	ldd	r24, Y+1	; 0x01
    4400:	9a 81       	ldd	r25, Y+2	; 0x02
    4402:	ab 81       	ldd	r26, Y+3	; 0x03
    4404:	bc 81       	ldd	r27, Y+4	; 0x04
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	a1 09       	sbc	r26, r1
    440a:	b1 09       	sbc	r27, r1
    440c:	89 83       	std	Y+1, r24	; 0x01
    440e:	9a 83       	std	Y+2, r25	; 0x02
    4410:	ab 83       	std	Y+3, r26	; 0x03
    4412:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    4414:	89 85       	ldd	r24, Y+9	; 0x09
    4416:	9a 85       	ldd	r25, Y+10	; 0x0a
    4418:	ab 85       	ldd	r26, Y+11	; 0x0b
    441a:	bc 85       	ldd	r27, Y+12	; 0x0c
    441c:	2a e0       	ldi	r18, 0x0A	; 10
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e0       	ldi	r20, 0x00	; 0
    4422:	50 e0       	ldi	r21, 0x00	; 0
    4424:	bc 01       	movw	r22, r24
    4426:	cd 01       	movw	r24, r26
    4428:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__divmodsi4>
    442c:	da 01       	movw	r26, r20
    442e:	c9 01       	movw	r24, r18
    4430:	89 87       	std	Y+9, r24	; 0x09
    4432:	9a 87       	std	Y+10, r25	; 0x0a
    4434:	ab 87       	std	Y+11, r26	; 0x0b
    4436:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    4438:	89 85       	ldd	r24, Y+9	; 0x09
    443a:	9a 85       	ldd	r25, Y+10	; 0x0a
    443c:	ab 85       	ldd	r26, Y+11	; 0x0b
    443e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4440:	00 97       	sbiw	r24, 0x00	; 0
    4442:	a1 05       	cpc	r26, r1
    4444:	b1 05       	cpc	r27, r1
    4446:	19 f6       	brne	.-122    	; 0x43ce <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    4448:	8d 81       	ldd	r24, Y+5	; 0x05
    444a:	9e 81       	ldd	r25, Y+6	; 0x06
    444c:	af 81       	ldd	r26, Y+7	; 0x07
    444e:	b8 85       	ldd	r27, Y+8	; 0x08
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	a1 05       	cpc	r26, r1
    4454:	b1 05       	cpc	r27, r1
    4456:	a1 f0       	breq	.+40     	; 0x4480 <IntToString+0x152>
		str[i--] = '-';
    4458:	29 81       	ldd	r18, Y+1	; 0x01
    445a:	3a 81       	ldd	r19, Y+2	; 0x02
    445c:	8d 85       	ldd	r24, Y+13	; 0x0d
    445e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4460:	fc 01       	movw	r30, r24
    4462:	e2 0f       	add	r30, r18
    4464:	f3 1f       	adc	r31, r19
    4466:	8d e2       	ldi	r24, 0x2D	; 45
    4468:	80 83       	st	Z, r24
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	9a 81       	ldd	r25, Y+2	; 0x02
    446e:	ab 81       	ldd	r26, Y+3	; 0x03
    4470:	bc 81       	ldd	r27, Y+4	; 0x04
    4472:	01 97       	sbiw	r24, 0x01	; 1
    4474:	a1 09       	sbc	r26, r1
    4476:	b1 09       	sbc	r27, r1
    4478:	89 83       	std	Y+1, r24	; 0x01
    447a:	9a 83       	std	Y+2, r25	; 0x02
    447c:	ab 83       	std	Y+3, r26	; 0x03
    447e:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	ab 81       	ldd	r26, Y+3	; 0x03
    4486:	bc 81       	ldd	r27, Y+4	; 0x04
    4488:	01 96       	adiw	r24, 0x01	; 1
    448a:	a1 1d       	adc	r26, r1
    448c:	b1 1d       	adc	r27, r1
    448e:	89 83       	std	Y+1, r24	; 0x01
    4490:	9a 83       	std	Y+2, r25	; 0x02
    4492:	ab 83       	std	Y+3, r26	; 0x03
    4494:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    4496:	29 81       	ldd	r18, Y+1	; 0x01
    4498:	3a 81       	ldd	r19, Y+2	; 0x02
    449a:	8d 85       	ldd	r24, Y+13	; 0x0d
    449c:	9e 85       	ldd	r25, Y+14	; 0x0e
    449e:	82 0f       	add	r24, r18
    44a0:	93 1f       	adc	r25, r19

}
    44a2:	2e 96       	adiw	r28, 0x0e	; 14
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	f8 94       	cli
    44a8:	de bf       	out	0x3e, r29	; 62
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	cd bf       	out	0x3d, r28	; 61
    44ae:	cf 91       	pop	r28
    44b0:	df 91       	pop	r29
    44b2:	1f 91       	pop	r17
    44b4:	0f 91       	pop	r16
    44b6:	08 95       	ret

000044b8 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62
    44c0:	6a 97       	sbiw	r28, 0x1a	; 26
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
    44cc:	6f 8b       	std	Y+23, r22	; 0x17
    44ce:	78 8f       	std	Y+24, r23	; 0x18
    44d0:	89 8f       	std	Y+25, r24	; 0x19
    44d2:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    44d4:	8f 89       	ldd	r24, Y+23	; 0x17
    44d6:	98 8d       	ldd	r25, Y+24	; 0x18
    44d8:	a9 8d       	ldd	r26, Y+25	; 0x19
    44da:	ba 8d       	ldd	r27, Y+26	; 0x1a
    44dc:	00 97       	sbiw	r24, 0x00	; 0
    44de:	a1 05       	cpc	r26, r1
    44e0:	b1 05       	cpc	r27, r1
    44e2:	99 f0       	breq	.+38     	; 0x450a <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    44e4:	8f 89       	ldd	r24, Y+23	; 0x17
    44e6:	98 8d       	ldd	r25, Y+24	; 0x18
    44e8:	a9 8d       	ldd	r26, Y+25	; 0x19
    44ea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    44ec:	9e 01       	movw	r18, r28
    44ee:	2d 5f       	subi	r18, 0xFD	; 253
    44f0:	3f 4f       	sbci	r19, 0xFF	; 255
    44f2:	bc 01       	movw	r22, r24
    44f4:	cd 01       	movw	r24, r26
    44f6:	a9 01       	movw	r20, r18
    44f8:	0e 94 97 21 	call	0x432e	; 0x432e <IntToString>
    44fc:	9a 83       	std	Y+2, r25	; 0x02
    44fe:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    4500:	89 81       	ldd	r24, Y+1	; 0x01
    4502:	9a 81       	ldd	r25, Y+2	; 0x02
    4504:	0e 94 6e 21 	call	0x42dc	; 0x42dc <LCD_voidWriteString>
    4508:	03 c0       	rjmp	.+6      	; 0x4510 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    450a:	80 e3       	ldi	r24, 0x30	; 48
    450c:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
	}
}
    4510:	6a 96       	adiw	r28, 0x1a	; 26
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
    451c:	cf 91       	pop	r28
    451e:	df 91       	pop	r29
    4520:	08 95       	ret

00004522 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    4522:	df 93       	push	r29
    4524:	cf 93       	push	r28
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	a6 97       	sbiw	r28, 0x26	; 38
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	f8 94       	cli
    4530:	de bf       	out	0x3e, r29	; 62
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	cd bf       	out	0x3d, r28	; 61
    4536:	6b a3       	std	Y+35, r22	; 0x23
    4538:	7c a3       	std	Y+36, r23	; 0x24
    453a:	8d a3       	std	Y+37, r24	; 0x25
    453c:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    453e:	6b a1       	ldd	r22, Y+35	; 0x23
    4540:	7c a1       	ldd	r23, Y+36	; 0x24
    4542:	8d a1       	ldd	r24, Y+37	; 0x25
    4544:	9e a1       	ldd	r25, Y+38	; 0x26
    4546:	20 e0       	ldi	r18, 0x00	; 0
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	48 ec       	ldi	r20, 0xC8	; 200
    454c:	52 e4       	ldi	r21, 0x42	; 66
    454e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	bc 01       	movw	r22, r24
    4558:	cd 01       	movw	r24, r26
    455a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	8b 87       	std	Y+11, r24	; 0x0b
    4564:	9c 87       	std	Y+12, r25	; 0x0c
    4566:	ad 87       	std	Y+13, r26	; 0x0d
    4568:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    456a:	8b 85       	ldd	r24, Y+11	; 0x0b
    456c:	9c 85       	ldd	r25, Y+12	; 0x0c
    456e:	ad 85       	ldd	r26, Y+13	; 0x0d
    4570:	be 85       	ldd	r27, Y+14	; 0x0e
    4572:	9e 01       	movw	r18, r28
    4574:	21 5f       	subi	r18, 0xF1	; 241
    4576:	3f 4f       	sbci	r19, 0xFF	; 255
    4578:	bc 01       	movw	r22, r24
    457a:	cd 01       	movw	r24, r26
    457c:	a9 01       	movw	r20, r18
    457e:	0e 94 97 21 	call	0x432e	; 0x432e <IntToString>
    4582:	9a 87       	std	Y+10, r25	; 0x0a
    4584:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    4586:	1d 82       	std	Y+5, r1	; 0x05
    4588:	1e 82       	std	Y+6, r1	; 0x06
    458a:	1f 82       	std	Y+7, r1	; 0x07
    458c:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    458e:	19 82       	std	Y+1, r1	; 0x01
    4590:	1a 82       	std	Y+2, r1	; 0x02
    4592:	1b 82       	std	Y+3, r1	; 0x03
    4594:	1c 82       	std	Y+4, r1	; 0x04
    4596:	0b c0       	rjmp	.+22     	; 0x45ae <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    4598:	8d 81       	ldd	r24, Y+5	; 0x05
    459a:	9e 81       	ldd	r25, Y+6	; 0x06
    459c:	af 81       	ldd	r26, Y+7	; 0x07
    459e:	b8 85       	ldd	r27, Y+8	; 0x08
    45a0:	01 96       	adiw	r24, 0x01	; 1
    45a2:	a1 1d       	adc	r26, r1
    45a4:	b1 1d       	adc	r27, r1
    45a6:	8d 83       	std	Y+5, r24	; 0x05
    45a8:	9e 83       	std	Y+6, r25	; 0x06
    45aa:	af 83       	std	Y+7, r26	; 0x07
    45ac:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    45ae:	2d 81       	ldd	r18, Y+5	; 0x05
    45b0:	3e 81       	ldd	r19, Y+6	; 0x06
    45b2:	89 85       	ldd	r24, Y+9	; 0x09
    45b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b6:	fc 01       	movw	r30, r24
    45b8:	e2 0f       	add	r30, r18
    45ba:	f3 1f       	adc	r31, r19
    45bc:	80 81       	ld	r24, Z
    45be:	88 23       	and	r24, r24
    45c0:	59 f7       	brne	.-42     	; 0x4598 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    45c2:	8d 81       	ldd	r24, Y+5	; 0x05
    45c4:	9e 81       	ldd	r25, Y+6	; 0x06
    45c6:	af 81       	ldd	r26, Y+7	; 0x07
    45c8:	b8 85       	ldd	r27, Y+8	; 0x08
    45ca:	02 97       	sbiw	r24, 0x02	; 2
    45cc:	a1 09       	sbc	r26, r1
    45ce:	b1 09       	sbc	r27, r1
    45d0:	8d 83       	std	Y+5, r24	; 0x05
    45d2:	9e 83       	std	Y+6, r25	; 0x06
    45d4:	af 83       	std	Y+7, r26	; 0x07
    45d6:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	9e 81       	ldd	r25, Y+6	; 0x06
    45dc:	af 81       	ldd	r26, Y+7	; 0x07
    45de:	b8 85       	ldd	r27, Y+8	; 0x08
    45e0:	00 97       	sbiw	r24, 0x00	; 0
    45e2:	a1 05       	cpc	r26, r1
    45e4:	b1 05       	cpc	r27, r1
    45e6:	49 f5       	brne	.+82     	; 0x463a <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    45e8:	80 e3       	ldi	r24, 0x30	; 48
    45ea:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
    45ee:	25 c0       	rjmp	.+74     	; 0x463a <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    45f0:	29 81       	ldd	r18, Y+1	; 0x01
    45f2:	3a 81       	ldd	r19, Y+2	; 0x02
    45f4:	4b 81       	ldd	r20, Y+3	; 0x03
    45f6:	5c 81       	ldd	r21, Y+4	; 0x04
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	af 81       	ldd	r26, Y+7	; 0x07
    45fe:	b8 85       	ldd	r27, Y+8	; 0x08
    4600:	28 17       	cp	r18, r24
    4602:	39 07       	cpc	r19, r25
    4604:	4a 07       	cpc	r20, r26
    4606:	5b 07       	cpc	r21, r27
    4608:	19 f4       	brne	.+6      	; 0x4610 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    460a:	8e e2       	ldi	r24, 0x2E	; 46
    460c:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    4610:	29 81       	ldd	r18, Y+1	; 0x01
    4612:	3a 81       	ldd	r19, Y+2	; 0x02
    4614:	89 85       	ldd	r24, Y+9	; 0x09
    4616:	9a 85       	ldd	r25, Y+10	; 0x0a
    4618:	fc 01       	movw	r30, r24
    461a:	e2 0f       	add	r30, r18
    461c:	f3 1f       	adc	r31, r19
    461e:	80 81       	ld	r24, Z
    4620:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
		counter2++;
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	9a 81       	ldd	r25, Y+2	; 0x02
    4628:	ab 81       	ldd	r26, Y+3	; 0x03
    462a:	bc 81       	ldd	r27, Y+4	; 0x04
    462c:	01 96       	adiw	r24, 0x01	; 1
    462e:	a1 1d       	adc	r26, r1
    4630:	b1 1d       	adc	r27, r1
    4632:	89 83       	std	Y+1, r24	; 0x01
    4634:	9a 83       	std	Y+2, r25	; 0x02
    4636:	ab 83       	std	Y+3, r26	; 0x03
    4638:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    463a:	29 81       	ldd	r18, Y+1	; 0x01
    463c:	3a 81       	ldd	r19, Y+2	; 0x02
    463e:	89 85       	ldd	r24, Y+9	; 0x09
    4640:	9a 85       	ldd	r25, Y+10	; 0x0a
    4642:	fc 01       	movw	r30, r24
    4644:	e2 0f       	add	r30, r18
    4646:	f3 1f       	adc	r31, r19
    4648:	80 81       	ld	r24, Z
    464a:	88 23       	and	r24, r24
    464c:	89 f6       	brne	.-94     	; 0x45f0 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    464e:	a6 96       	adiw	r28, 0x26	; 38
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61
    465a:	cf 91       	pop	r28
    465c:	df 91       	pop	r29
    465e:	08 95       	ret

00004660 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    4660:	df 93       	push	r29
    4662:	cf 93       	push	r28
    4664:	00 d0       	rcall	.+0      	; 0x4666 <LCD_voidGoToPosition+0x6>
    4666:	0f 92       	push	r0
    4668:	cd b7       	in	r28, 0x3d	; 61
    466a:	de b7       	in	r29, 0x3e	; 62
    466c:	8a 83       	std	Y+2, r24	; 0x02
    466e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    4670:	80 e8       	ldi	r24, 0x80	; 128
    4672:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    4674:	8a 81       	ldd	r24, Y+2	; 0x02
    4676:	88 23       	and	r24, r24
    4678:	21 f4       	brne	.+8      	; 0x4682 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    467a:	8b 81       	ldd	r24, Y+3	; 0x03
    467c:	80 58       	subi	r24, 0x80	; 128
    467e:	89 83       	std	Y+1, r24	; 0x01
    4680:	14 c0       	rjmp	.+40     	; 0x46aa <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    4682:	8a 81       	ldd	r24, Y+2	; 0x02
    4684:	81 30       	cpi	r24, 0x01	; 1
    4686:	21 f4       	brne	.+8      	; 0x4690 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4688:	8b 81       	ldd	r24, Y+3	; 0x03
    468a:	80 54       	subi	r24, 0x40	; 64
    468c:	89 83       	std	Y+1, r24	; 0x01
    468e:	0d c0       	rjmp	.+26     	; 0x46aa <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    4690:	8a 81       	ldd	r24, Y+2	; 0x02
    4692:	82 30       	cpi	r24, 0x02	; 2
    4694:	21 f4       	brne	.+8      	; 0x469e <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    4696:	8b 81       	ldd	r24, Y+3	; 0x03
    4698:	8c 56       	subi	r24, 0x6C	; 108
    469a:	89 83       	std	Y+1, r24	; 0x01
    469c:	06 c0       	rjmp	.+12     	; 0x46aa <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    469e:	8a 81       	ldd	r24, Y+2	; 0x02
    46a0:	83 30       	cpi	r24, 0x03	; 3
    46a2:	19 f4       	brne	.+6      	; 0x46aa <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    46a4:	8b 81       	ldd	r24, Y+3	; 0x03
    46a6:	8c 52       	subi	r24, 0x2C	; 44
    46a8:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	80 68       	ori	r24, 0x80	; 128
    46ae:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
}
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
    46bc:	cf 91       	pop	r28
    46be:	df 91       	pop	r29
    46c0:	08 95       	ret

000046c2 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    46c2:	df 93       	push	r29
    46c4:	cf 93       	push	r28
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    46ca:	27 97       	sbiw	r28, 0x07	; 7
    46cc:	0f b6       	in	r0, 0x3f	; 63
    46ce:	f8 94       	cli
    46d0:	de bf       	out	0x3e, r29	; 62
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	cd bf       	out	0x3d, r28	; 61
    46d6:	9c 83       	std	Y+4, r25	; 0x04
    46d8:	8b 83       	std	Y+3, r24	; 0x03
    46da:	6d 83       	std	Y+5, r22	; 0x05
    46dc:	4e 83       	std	Y+6, r20	; 0x06
    46de:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    46e0:	8e 81       	ldd	r24, Y+6	; 0x06
    46e2:	6f 81       	ldd	r22, Y+7	; 0x07
    46e4:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    46e8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ea:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
	u8 address = 0;
    46ee:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    46f0:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    46f2:	8d 81       	ldd	r24, Y+5	; 0x05
    46f4:	88 30       	cpi	r24, 0x08	; 8
    46f6:	30 f5       	brcc	.+76     	; 0x4744 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    46f8:	8d 81       	ldd	r24, Y+5	; 0x05
    46fa:	88 2f       	mov	r24, r24
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    470c:	8a 81       	ldd	r24, Y+2	; 0x02
    470e:	80 64       	ori	r24, 0x40	; 64
    4710:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    4712:	8a 81       	ldd	r24, Y+2	; 0x02
    4714:	8f 77       	andi	r24, 0x7F	; 127
    4716:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    4718:	8a 81       	ldd	r24, Y+2	; 0x02
    471a:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    471e:	19 82       	std	Y+1, r1	; 0x01
    4720:	0e c0       	rjmp	.+28     	; 0x473e <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	28 2f       	mov	r18, r24
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	8b 81       	ldd	r24, Y+3	; 0x03
    472a:	9c 81       	ldd	r25, Y+4	; 0x04
    472c:	fc 01       	movw	r30, r24
    472e:	e2 0f       	add	r30, r18
    4730:	f3 1f       	adc	r31, r19
    4732:	80 81       	ld	r24, Z
    4734:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    4738:	89 81       	ldd	r24, Y+1	; 0x01
    473a:	8f 5f       	subi	r24, 0xFF	; 255
    473c:	89 83       	std	Y+1, r24	; 0x01
    473e:	89 81       	ldd	r24, Y+1	; 0x01
    4740:	88 30       	cpi	r24, 0x08	; 8
    4742:	78 f3       	brcs	.-34     	; 0x4722 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    4744:	82 e0       	ldi	r24, 0x02	; 2
    4746:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
}
    474a:	27 96       	adiw	r28, 0x07	; 7
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	cf 91       	pop	r28
    4758:	df 91       	pop	r29
    475a:	08 95       	ret

0000475c <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    475c:	df 93       	push	r29
    475e:	cf 93       	push	r28
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
    4764:	a1 97       	sbiw	r28, 0x21	; 33
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	f8 94       	cli
    476a:	de bf       	out	0x3e, r29	; 62
    476c:	0f be       	out	0x3f, r0	; 63
    476e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    4770:	8f ef       	ldi	r24, 0xFF	; 255
    4772:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    4774:	ce 01       	movw	r24, r28
    4776:	04 96       	adiw	r24, 0x04	; 4
    4778:	9e 8f       	std	Y+30, r25	; 0x1e
    477a:	8d 8f       	std	Y+29, r24	; 0x1d
    477c:	e1 e0       	ldi	r30, 0x01	; 1
    477e:	f2 e0       	ldi	r31, 0x02	; 2
    4780:	f8 a3       	std	Y+32, r31	; 0x20
    4782:	ef 8f       	std	Y+31, r30	; 0x1f
    4784:	f0 e1       	ldi	r31, 0x10	; 16
    4786:	f9 a3       	std	Y+33, r31	; 0x21
    4788:	ef 8d       	ldd	r30, Y+31	; 0x1f
    478a:	f8 a1       	ldd	r31, Y+32	; 0x20
    478c:	00 80       	ld	r0, Z
    478e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4790:	98 a1       	ldd	r25, Y+32	; 0x20
    4792:	01 96       	adiw	r24, 0x01	; 1
    4794:	98 a3       	std	Y+32, r25	; 0x20
    4796:	8f 8f       	std	Y+31, r24	; 0x1f
    4798:	ed 8d       	ldd	r30, Y+29	; 0x1d
    479a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    479c:	00 82       	st	Z, r0
    479e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47a2:	01 96       	adiw	r24, 0x01	; 1
    47a4:	9e 8f       	std	Y+30, r25	; 0x1e
    47a6:	8d 8f       	std	Y+29, r24	; 0x1d
    47a8:	99 a1       	ldd	r25, Y+33	; 0x21
    47aa:	91 50       	subi	r25, 0x01	; 1
    47ac:	99 a3       	std	Y+33, r25	; 0x21
    47ae:	e9 a1       	ldd	r30, Y+33	; 0x21
    47b0:	ee 23       	and	r30, r30
    47b2:	51 f7       	brne	.-44     	; 0x4788 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    47b4:	87 e0       	ldi	r24, 0x07	; 7
    47b6:	8c 8b       	std	Y+20, r24	; 0x14
    47b8:	86 e0       	ldi	r24, 0x06	; 6
    47ba:	8d 8b       	std	Y+21, r24	; 0x15
    47bc:	85 e0       	ldi	r24, 0x05	; 5
    47be:	8e 8b       	std	Y+22, r24	; 0x16
    47c0:	83 e0       	ldi	r24, 0x03	; 3
    47c2:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    47c4:	85 e0       	ldi	r24, 0x05	; 5
    47c6:	88 8f       	std	Y+24, r24	; 0x18
    47c8:	84 e0       	ldi	r24, 0x04	; 4
    47ca:	89 8f       	std	Y+25, r24	; 0x19
    47cc:	83 e0       	ldi	r24, 0x03	; 3
    47ce:	8a 8f       	std	Y+26, r24	; 0x1a
    47d0:	82 e0       	ldi	r24, 0x02	; 2
    47d2:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    47d4:	1a 82       	std	Y+2, r1	; 0x02
    47d6:	6b c0       	rjmp	.+214    	; 0x48ae <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    47d8:	8a 81       	ldd	r24, Y+2	; 0x02
    47da:	28 2f       	mov	r18, r24
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	ce 01       	movw	r24, r28
    47e0:	44 96       	adiw	r24, 0x14	; 20
    47e2:	fc 01       	movw	r30, r24
    47e4:	e2 0f       	add	r30, r18
    47e6:	f3 1f       	adc	r31, r19
    47e8:	90 81       	ld	r25, Z
    47ea:	84 e0       	ldi	r24, 0x04	; 4
    47ec:	69 2f       	mov	r22, r25
    47ee:	40 e0       	ldi	r20, 0x00	; 0
    47f0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    47f4:	19 82       	std	Y+1, r1	; 0x01
    47f6:	46 c0       	rjmp	.+140    	; 0x4884 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	28 2f       	mov	r18, r24
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	ce 01       	movw	r24, r28
    4800:	48 96       	adiw	r24, 0x18	; 24
    4802:	fc 01       	movw	r30, r24
    4804:	e2 0f       	add	r30, r18
    4806:	f3 1f       	adc	r31, r19
    4808:	90 81       	ld	r25, Z
    480a:	83 e0       	ldi	r24, 0x03	; 3
    480c:	69 2f       	mov	r22, r25
    480e:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_u8GetPinValue>
    4812:	88 23       	and	r24, r24
    4814:	a1 f5       	brne	.+104    	; 0x487e <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    4816:	89 81       	ldd	r24, Y+1	; 0x01
    4818:	28 2f       	mov	r18, r24
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	8a 81       	ldd	r24, Y+2	; 0x02
    481e:	48 2f       	mov	r20, r24
    4820:	50 e0       	ldi	r21, 0x00	; 0
    4822:	22 0f       	add	r18, r18
    4824:	33 1f       	adc	r19, r19
    4826:	22 0f       	add	r18, r18
    4828:	33 1f       	adc	r19, r19
    482a:	ce 01       	movw	r24, r28
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	82 0f       	add	r24, r18
    4830:	93 1f       	adc	r25, r19
    4832:	84 0f       	add	r24, r20
    4834:	95 1f       	adc	r25, r21
    4836:	fc 01       	movw	r30, r24
    4838:	33 96       	adiw	r30, 0x03	; 3
    483a:	80 81       	ld	r24, Z
    483c:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    483e:	89 81       	ldd	r24, Y+1	; 0x01
    4840:	28 2f       	mov	r18, r24
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	ce 01       	movw	r24, r28
    4846:	48 96       	adiw	r24, 0x18	; 24
    4848:	fc 01       	movw	r30, r24
    484a:	e2 0f       	add	r30, r18
    484c:	f3 1f       	adc	r31, r19
    484e:	90 81       	ld	r25, Z
    4850:	83 e0       	ldi	r24, 0x03	; 3
    4852:	69 2f       	mov	r22, r25
    4854:	0e 94 4a 09 	call	0x1294	; 0x1294 <DIO_u8GetPinValue>
    4858:	88 23       	and	r24, r24
    485a:	89 f3       	breq	.-30     	; 0x483e <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    485c:	8a 81       	ldd	r24, Y+2	; 0x02
    485e:	28 2f       	mov	r18, r24
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	ce 01       	movw	r24, r28
    4864:	44 96       	adiw	r24, 0x14	; 20
    4866:	fc 01       	movw	r30, r24
    4868:	e2 0f       	add	r30, r18
    486a:	f3 1f       	adc	r31, r19
    486c:	90 81       	ld	r25, Z
    486e:	84 e0       	ldi	r24, 0x04	; 4
    4870:	69 2f       	mov	r22, r25
    4872:	41 e0       	ldi	r20, 0x01	; 1
    4874:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    4878:	fb 81       	ldd	r31, Y+3	; 0x03
    487a:	fc 8f       	std	Y+28, r31	; 0x1c
    487c:	1e c0       	rjmp	.+60     	; 0x48ba <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    487e:	89 81       	ldd	r24, Y+1	; 0x01
    4880:	8f 5f       	subi	r24, 0xFF	; 255
    4882:	89 83       	std	Y+1, r24	; 0x01
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	84 30       	cpi	r24, 0x04	; 4
    4888:	08 f4       	brcc	.+2      	; 0x488c <KPD_u8GetPressedKey+0x130>
    488a:	b6 cf       	rjmp	.-148    	; 0x47f8 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    488c:	8a 81       	ldd	r24, Y+2	; 0x02
    488e:	28 2f       	mov	r18, r24
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	ce 01       	movw	r24, r28
    4894:	44 96       	adiw	r24, 0x14	; 20
    4896:	fc 01       	movw	r30, r24
    4898:	e2 0f       	add	r30, r18
    489a:	f3 1f       	adc	r31, r19
    489c:	90 81       	ld	r25, Z
    489e:	84 e0       	ldi	r24, 0x04	; 4
    48a0:	69 2f       	mov	r22, r25
    48a2:	41 e0       	ldi	r20, 0x01	; 1
    48a4:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	8f 5f       	subi	r24, 0xFF	; 255
    48ac:	8a 83       	std	Y+2, r24	; 0x02
    48ae:	8a 81       	ldd	r24, Y+2	; 0x02
    48b0:	84 30       	cpi	r24, 0x04	; 4
    48b2:	08 f4       	brcc	.+2      	; 0x48b6 <KPD_u8GetPressedKey+0x15a>
    48b4:	91 cf       	rjmp	.-222    	; 0x47d8 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    48b6:	8b 81       	ldd	r24, Y+3	; 0x03
    48b8:	8c 8f       	std	Y+28, r24	; 0x1c
    48ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    48bc:	a1 96       	adiw	r28, 0x21	; 33
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	cf 91       	pop	r28
    48ca:	df 91       	pop	r29
    48cc:	08 95       	ret

000048ce <main>:
		}
};

u8 posArr[4][20] ={{0}};

int main(){
    48ce:	0f 93       	push	r16
    48d0:	1f 93       	push	r17
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	cd b7       	in	r28, 0x3d	; 61
    48d8:	de b7       	in	r29, 0x3e	; 62
    48da:	c6 54       	subi	r28, 0x46	; 70
    48dc:	d0 40       	sbci	r29, 0x00	; 0
    48de:	0f b6       	in	r0, 0x3f	; 63
    48e0:	f8 94       	cli
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    48e8:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
    48ec:	83 e0       	ldi	r24, 0x03	; 3
    48ee:	6f ef       	ldi	r22, 0xFF	; 255
    48f0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_voidSetPortValue>
	ADC_voidInit();
    48f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <ADC_voidInit>
	ADC_voidEnable();
    48f8:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ADC_voidEnable>
	ADC_voidStartConversion(0);
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	0e 94 3f 0c 	call	0x187e	; 0x187e <ADC_voidStartConversion>
	srand(ADC_u16ReadADCInMV());
    4902:	0e 94 aa 0c 	call	0x1954	; 0x1954 <ADC_u16ReadADCInMV>
    4906:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <srand>
	ADC_voidDisable();
    490a:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <ADC_voidDisable>
	LCD_voidInit();
    490e:	0e 94 ce 18 	call	0x319c	; 0x319c <LCD_voidInit>
	LoadSnakeInCGRAM();
    4912:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <LoadSnakeInCGRAM>
	InitializeSnake();
    4916:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <InitializeSnake>
	SpawnSnake();
    491a:	0e 94 47 28 	call	0x508e	; 0x508e <SpawnSnake>
    491e:	fe 01       	movw	r30, r28
    4920:	ed 5b       	subi	r30, 0xBD	; 189
    4922:	ff 4f       	sbci	r31, 0xFF	; 255
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	a8 ec       	ldi	r26, 0xC8	; 200
    492a:	b2 e4       	ldi	r27, 0x42	; 66
    492c:	80 83       	st	Z, r24
    492e:	91 83       	std	Z+1, r25	; 0x01
    4930:	a2 83       	std	Z+2, r26	; 0x02
    4932:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4934:	8e 01       	movw	r16, r28
    4936:	01 5c       	subi	r16, 0xC1	; 193
    4938:	1f 4f       	sbci	r17, 0xFF	; 255
    493a:	fe 01       	movw	r30, r28
    493c:	ed 5b       	subi	r30, 0xBD	; 189
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	60 81       	ld	r22, Z
    4942:	71 81       	ldd	r23, Z+1	; 0x01
    4944:	82 81       	ldd	r24, Z+2	; 0x02
    4946:	93 81       	ldd	r25, Z+3	; 0x03
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	4a e7       	ldi	r20, 0x7A	; 122
    494e:	55 e4       	ldi	r21, 0x45	; 69
    4950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	f8 01       	movw	r30, r16
    495a:	80 83       	st	Z, r24
    495c:	91 83       	std	Z+1, r25	; 0x01
    495e:	a2 83       	std	Z+2, r26	; 0x02
    4960:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4962:	fe 01       	movw	r30, r28
    4964:	ff 96       	adiw	r30, 0x3f	; 63
    4966:	60 81       	ld	r22, Z
    4968:	71 81       	ldd	r23, Z+1	; 0x01
    496a:	82 81       	ldd	r24, Z+2	; 0x02
    496c:	93 81       	ldd	r25, Z+3	; 0x03
    496e:	20 e0       	ldi	r18, 0x00	; 0
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e8       	ldi	r20, 0x80	; 128
    4974:	5f e3       	ldi	r21, 0x3F	; 63
    4976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    497a:	88 23       	and	r24, r24
    497c:	2c f4       	brge	.+10     	; 0x4988 <main+0xba>
		__ticks = 1;
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	9e af       	std	Y+62, r25	; 0x3e
    4984:	8d af       	std	Y+61, r24	; 0x3d
    4986:	46 c0       	rjmp	.+140    	; 0x4a14 <main+0x146>
	else if (__tmp > 65535)
    4988:	fe 01       	movw	r30, r28
    498a:	ff 96       	adiw	r30, 0x3f	; 63
    498c:	60 81       	ld	r22, Z
    498e:	71 81       	ldd	r23, Z+1	; 0x01
    4990:	82 81       	ldd	r24, Z+2	; 0x02
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	3f ef       	ldi	r19, 0xFF	; 255
    4998:	4f e7       	ldi	r20, 0x7F	; 127
    499a:	57 e4       	ldi	r21, 0x47	; 71
    499c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49a0:	18 16       	cp	r1, r24
    49a2:	64 f5       	brge	.+88     	; 0x49fc <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a4:	fe 01       	movw	r30, r28
    49a6:	ed 5b       	subi	r30, 0xBD	; 189
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	60 81       	ld	r22, Z
    49ac:	71 81       	ldd	r23, Z+1	; 0x01
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	40 e2       	ldi	r20, 0x20	; 32
    49b8:	51 e4       	ldi	r21, 0x41	; 65
    49ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	bc 01       	movw	r22, r24
    49c4:	cd 01       	movw	r24, r26
    49c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	9e af       	std	Y+62, r25	; 0x3e
    49d0:	8d af       	std	Y+61, r24	; 0x3d
    49d2:	0f c0       	rjmp	.+30     	; 0x49f2 <main+0x124>
    49d4:	80 e9       	ldi	r24, 0x90	; 144
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	9c af       	std	Y+60, r25	; 0x3c
    49da:	8b af       	std	Y+59, r24	; 0x3b
    49dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    49de:	9c ad       	ldd	r25, Y+60	; 0x3c
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <main+0x112>
    49e4:	9c af       	std	Y+60, r25	; 0x3c
    49e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    49ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	9e af       	std	Y+62, r25	; 0x3e
    49f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    49f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    49f6:	00 97       	sbiw	r24, 0x00	; 0
    49f8:	69 f7       	brne	.-38     	; 0x49d4 <main+0x106>
    49fa:	16 c0       	rjmp	.+44     	; 0x4a28 <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49fc:	fe 01       	movw	r30, r28
    49fe:	ff 96       	adiw	r30, 0x3f	; 63
    4a00:	60 81       	ld	r22, Z
    4a02:	71 81       	ldd	r23, Z+1	; 0x01
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	9e af       	std	Y+62, r25	; 0x3e
    4a12:	8d af       	std	Y+61, r24	; 0x3d
    4a14:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a16:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a18:	9a af       	std	Y+58, r25	; 0x3a
    4a1a:	89 af       	std	Y+57, r24	; 0x39
    4a1c:	89 ad       	ldd	r24, Y+57	; 0x39
    4a1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a20:	01 97       	sbiw	r24, 0x01	; 1
    4a22:	f1 f7       	brne	.-4      	; 0x4a20 <main+0x152>
    4a24:	9a af       	std	Y+58, r25	; 0x3a
    4a26:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);

	while(1){
		LCD_voidGoToPosition(0,0);
    4a28:	80 e0       	ldi	r24, 0x00	; 0
    4a2a:	60 e0       	ldi	r22, 0x00	; 0
    4a2c:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
		LCD_voidWriteIntData(currentSize);
    4a30:	80 91 8d 01 	lds	r24, 0x018D
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	a0 e0       	ldi	r26, 0x00	; 0
    4a3a:	b0 e0       	ldi	r27, 0x00	; 0
    4a3c:	bc 01       	movw	r22, r24
    4a3e:	cd 01       	movw	r24, r26
    4a40:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <LCD_voidWriteIntData>
		if(foodAvailable == 0){
    4a44:	80 91 17 02 	lds	r24, 0x0217
    4a48:	88 23       	and	r24, r24
    4a4a:	51 f4       	brne	.+20     	; 0x4a60 <main+0x192>
			foodAvailable = 1;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	80 93 17 02 	sts	0x0217, r24
			SpawnFood();
    4a52:	0e 94 9a 2c 	call	0x5934	; 0x5934 <SpawnFood>
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    4a56:	83 e0       	ldi	r24, 0x03	; 3
    4a58:	66 e0       	ldi	r22, 0x06	; 6
    4a5a:	41 e0       	ldi	r20, 0x01	; 1
    4a5c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
		}
		key = KPD_u8GetPressedKey();
    4a60:	0e 94 ae 23 	call	0x475c	; 0x475c <KPD_u8GetPressedKey>
    4a64:	80 93 8e 01 	sts	0x018E, r24
		if(key != NO_PRESSED_KEY){
    4a68:	80 91 8e 01 	lds	r24, 0x018E
    4a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a6e:	09 f4       	brne	.+2      	; 0x4a72 <main+0x1a4>
    4a70:	bc c0       	rjmp	.+376    	; 0x4bea <main+0x31c>
			if(endGame == 0){
    4a72:	80 91 14 02 	lds	r24, 0x0214
    4a76:	88 23       	and	r24, r24
    4a78:	71 f5       	brne	.+92     	; 0x4ad6 <main+0x208>
				if(key == 8 && snakeArr[0].currentDirection != Down){
    4a7a:	80 91 8e 01 	lds	r24, 0x018E
    4a7e:	88 30       	cpi	r24, 0x08	; 8
    4a80:	41 f4       	brne	.+16     	; 0x4a92 <main+0x1c4>
    4a82:	80 91 68 02 	lds	r24, 0x0268
    4a86:	83 30       	cpi	r24, 0x03	; 3
    4a88:	21 f0       	breq	.+8      	; 0x4a92 <main+0x1c4>
					snakeArr[0].nextDirection = Up;
    4a8a:	82 e0       	ldi	r24, 0x02	; 2
    4a8c:	80 93 69 02 	sts	0x0269, r24
    4a90:	22 c0       	rjmp	.+68     	; 0x4ad6 <main+0x208>
				}
				else if(key == 4 && snakeArr[0].currentDirection != Right){
    4a92:	80 91 8e 01 	lds	r24, 0x018E
    4a96:	84 30       	cpi	r24, 0x04	; 4
    4a98:	41 f4       	brne	.+16     	; 0x4aaa <main+0x1dc>
    4a9a:	80 91 68 02 	lds	r24, 0x0268
    4a9e:	88 23       	and	r24, r24
    4aa0:	21 f0       	breq	.+8      	; 0x4aaa <main+0x1dc>
					snakeArr[0].nextDirection = Left;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	80 93 69 02 	sts	0x0269, r24
    4aa8:	16 c0       	rjmp	.+44     	; 0x4ad6 <main+0x208>
				}
				else if(key == 6 && snakeArr[0].currentDirection != Left){
    4aaa:	80 91 8e 01 	lds	r24, 0x018E
    4aae:	86 30       	cpi	r24, 0x06	; 6
    4ab0:	39 f4       	brne	.+14     	; 0x4ac0 <main+0x1f2>
    4ab2:	80 91 68 02 	lds	r24, 0x0268
    4ab6:	81 30       	cpi	r24, 0x01	; 1
    4ab8:	19 f0       	breq	.+6      	; 0x4ac0 <main+0x1f2>
					snakeArr[0].nextDirection = Right;
    4aba:	10 92 69 02 	sts	0x0269, r1
    4abe:	0b c0       	rjmp	.+22     	; 0x4ad6 <main+0x208>
				}
				else if(key == 2 && snakeArr[0].currentDirection != Up){
    4ac0:	80 91 8e 01 	lds	r24, 0x018E
    4ac4:	82 30       	cpi	r24, 0x02	; 2
    4ac6:	39 f4       	brne	.+14     	; 0x4ad6 <main+0x208>
    4ac8:	80 91 68 02 	lds	r24, 0x0268
    4acc:	82 30       	cpi	r24, 0x02	; 2
    4ace:	19 f0       	breq	.+6      	; 0x4ad6 <main+0x208>
					snakeArr[0].nextDirection = Down;
    4ad0:	83 e0       	ldi	r24, 0x03	; 3
    4ad2:	80 93 69 02 	sts	0x0269, r24
				}
			}
			if(key == 'C'){
    4ad6:	80 91 8e 01 	lds	r24, 0x018E
    4ada:	83 34       	cpi	r24, 0x43	; 67
    4adc:	09 f0       	breq	.+2      	; 0x4ae0 <main+0x212>
    4ade:	85 c0       	rjmp	.+266    	; 0x4bea <main+0x31c>
				LCD_voidSendCommand(LCD_ClearDisplay);
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
				endGame = 0;
    4ae6:	10 92 14 02 	sts	0x0214, r1
				currentSize = STARTING_SIZE;
    4aea:	83 e0       	ldi	r24, 0x03	; 3
    4aec:	80 93 8d 01 	sts	0x018D, r24
				ResetPositionArr();
    4af0:	0e 94 66 2c 	call	0x58cc	; 0x58cc <ResetPositionArr>
				InitializeSnake();
    4af4:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <InitializeSnake>
				SpawnSnake();
    4af8:	0e 94 47 28 	call	0x508e	; 0x508e <SpawnSnake>
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	a6 e9       	ldi	r26, 0x96	; 150
    4b02:	b3 e4       	ldi	r27, 0x43	; 67
    4b04:	8d ab       	std	Y+53, r24	; 0x35
    4b06:	9e ab       	std	Y+54, r25	; 0x36
    4b08:	af ab       	std	Y+55, r26	; 0x37
    4b0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    4b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    4b10:	8f a9       	ldd	r24, Y+55	; 0x37
    4b12:	98 ad       	ldd	r25, Y+56	; 0x38
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	4a e7       	ldi	r20, 0x7A	; 122
    4b1a:	55 e4       	ldi	r21, 0x45	; 69
    4b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	89 ab       	std	Y+49, r24	; 0x31
    4b26:	9a ab       	std	Y+50, r25	; 0x32
    4b28:	ab ab       	std	Y+51, r26	; 0x33
    4b2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    4b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    4b30:	8b a9       	ldd	r24, Y+51	; 0x33
    4b32:	9c a9       	ldd	r25, Y+52	; 0x34
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	30 e0       	ldi	r19, 0x00	; 0
    4b38:	40 e8       	ldi	r20, 0x80	; 128
    4b3a:	5f e3       	ldi	r21, 0x3F	; 63
    4b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b40:	88 23       	and	r24, r24
    4b42:	2c f4       	brge	.+10     	; 0x4b4e <main+0x280>
		__ticks = 1;
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	98 ab       	std	Y+48, r25	; 0x30
    4b4a:	8f a7       	std	Y+47, r24	; 0x2f
    4b4c:	3f c0       	rjmp	.+126    	; 0x4bcc <main+0x2fe>
	else if (__tmp > 65535)
    4b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    4b50:	7a a9       	ldd	r23, Y+50	; 0x32
    4b52:	8b a9       	ldd	r24, Y+51	; 0x33
    4b54:	9c a9       	ldd	r25, Y+52	; 0x34
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	3f ef       	ldi	r19, 0xFF	; 255
    4b5a:	4f e7       	ldi	r20, 0x7F	; 127
    4b5c:	57 e4       	ldi	r21, 0x47	; 71
    4b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b62:	18 16       	cp	r1, r24
    4b64:	4c f5       	brge	.+82     	; 0x4bb8 <main+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b66:	6d a9       	ldd	r22, Y+53	; 0x35
    4b68:	7e a9       	ldd	r23, Y+54	; 0x36
    4b6a:	8f a9       	ldd	r24, Y+55	; 0x37
    4b6c:	98 ad       	ldd	r25, Y+56	; 0x38
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	30 e0       	ldi	r19, 0x00	; 0
    4b72:	40 e2       	ldi	r20, 0x20	; 32
    4b74:	51 e4       	ldi	r21, 0x41	; 65
    4b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	cb 01       	movw	r24, r22
    4b7e:	bc 01       	movw	r22, r24
    4b80:	cd 01       	movw	r24, r26
    4b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	98 ab       	std	Y+48, r25	; 0x30
    4b8c:	8f a7       	std	Y+47, r24	; 0x2f
    4b8e:	0f c0       	rjmp	.+30     	; 0x4bae <main+0x2e0>
    4b90:	80 e9       	ldi	r24, 0x90	; 144
    4b92:	91 e0       	ldi	r25, 0x01	; 1
    4b94:	9e a7       	std	Y+46, r25	; 0x2e
    4b96:	8d a7       	std	Y+45, r24	; 0x2d
    4b98:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <main+0x2ce>
    4ba0:	9e a7       	std	Y+46, r25	; 0x2e
    4ba2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    4ba8:	01 97       	sbiw	r24, 0x01	; 1
    4baa:	98 ab       	std	Y+48, r25	; 0x30
    4bac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    4bb2:	00 97       	sbiw	r24, 0x00	; 0
    4bb4:	69 f7       	brne	.-38     	; 0x4b90 <main+0x2c2>
    4bb6:	14 c0       	rjmp	.+40     	; 0x4be0 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    4bba:	7a a9       	ldd	r23, Y+50	; 0x32
    4bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    4bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    4bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	98 ab       	std	Y+48, r25	; 0x30
    4bca:	8f a7       	std	Y+47, r24	; 0x2f
    4bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bce:	98 a9       	ldd	r25, Y+48	; 0x30
    4bd0:	9c a7       	std	Y+44, r25	; 0x2c
    4bd2:	8b a7       	std	Y+43, r24	; 0x2b
    4bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bd8:	01 97       	sbiw	r24, 0x01	; 1
    4bda:	f1 f7       	brne	.-4      	; 0x4bd8 <main+0x30a>
    4bdc:	9c a7       	std	Y+44, r25	; 0x2c
    4bde:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(300);
				DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    4be0:	83 e0       	ldi	r24, 0x03	; 3
    4be2:	66 e0       	ldi	r22, 0x06	; 6
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
			}
		}
		LCD_voidSendCommand(LCD_ClearDisplay);
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
		if(endGame == 0){
    4bf0:	80 91 14 02 	lds	r24, 0x0214
    4bf4:	88 23       	and	r24, r24
    4bf6:	99 f5       	brne	.+102    	; 0x4c5e <main+0x390>
			LCD_voidGoToPosition(foodX,foodY);
    4bf8:	80 91 15 02 	lds	r24, 0x0215
    4bfc:	90 91 16 02 	lds	r25, 0x0216
    4c00:	69 2f       	mov	r22, r25
    4c02:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
			LCD_voidWriteChar('o');
    4c06:	8f e6       	ldi	r24, 0x6F	; 111
    4c08:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
			MoveSnake();
    4c0c:	0e 94 bf 28 	call	0x517e	; 0x517e <MoveSnake>
			UpdateSize();
    4c10:	0e 94 c1 2c 	call	0x5982	; 0x5982 <UpdateSize>
			if(posArr[snakeArr[0].posX][snakeArr[0].posY] == 1){
    4c14:	80 91 6a 02 	lds	r24, 0x026A
    4c18:	28 2f       	mov	r18, r24
    4c1a:	33 27       	eor	r19, r19
    4c1c:	27 fd       	sbrc	r18, 7
    4c1e:	30 95       	com	r19
    4c20:	80 91 6b 02 	lds	r24, 0x026B
    4c24:	48 2f       	mov	r20, r24
    4c26:	55 27       	eor	r21, r21
    4c28:	47 fd       	sbrc	r20, 7
    4c2a:	50 95       	com	r21
    4c2c:	c9 01       	movw	r24, r18
    4c2e:	88 0f       	add	r24, r24
    4c30:	99 1f       	adc	r25, r25
    4c32:	88 0f       	add	r24, r24
    4c34:	99 1f       	adc	r25, r25
    4c36:	9c 01       	movw	r18, r24
    4c38:	22 0f       	add	r18, r18
    4c3a:	33 1f       	adc	r19, r19
    4c3c:	22 0f       	add	r18, r18
    4c3e:	33 1f       	adc	r19, r19
    4c40:	82 0f       	add	r24, r18
    4c42:	93 1f       	adc	r25, r19
    4c44:	84 0f       	add	r24, r20
    4c46:	95 1f       	adc	r25, r21
    4c48:	fc 01       	movw	r30, r24
    4c4a:	e8 5e       	subi	r30, 0xE8	; 232
    4c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    4c4e:	80 81       	ld	r24, Z
    4c50:	81 30       	cpi	r24, 0x01	; 1
    4c52:	09 f0       	breq	.+2      	; 0x4c56 <main+0x388>
    4c54:	1c c1       	rjmp	.+568    	; 0x4e8e <main+0x5c0>
				endGame = 1;
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	80 93 14 02 	sts	0x0214, r24
    4c5c:	e5 ce       	rjmp	.-566    	; 0x4a28 <main+0x15a>
				continue;
			}
		}
		else{
			endGame = 0;
    4c5e:	10 92 14 02 	sts	0x0214, r1
			LCD_voidGoToPosition(1,5);
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	65 e0       	ldi	r22, 0x05	; 5
    4c66:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    4c6a:	83 e0       	ldi	r24, 0x03	; 3
    4c6c:	66 e0       	ldi	r22, 0x06	; 6
    4c6e:	41 e0       	ldi	r20, 0x01	; 1
    4c70:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
			LCD_voidWriteString((u8*)"Game Over!");
    4c74:	80 e6       	ldi	r24, 0x60	; 96
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	0e 94 6e 21 	call	0x42dc	; 0x42dc <LCD_voidWriteString>
			LCD_voidGoToPosition(2,5);
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	65 e0       	ldi	r22, 0x05	; 5
    4c80:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
			LCD_voidWriteString((u8*)"Score: ");
    4c84:	8b e6       	ldi	r24, 0x6B	; 107
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	0e 94 6e 21 	call	0x42dc	; 0x42dc <LCD_voidWriteString>
			LCD_voidWriteIntData(currentSize);
    4c8c:	80 91 8d 01 	lds	r24, 0x018D
    4c90:	88 2f       	mov	r24, r24
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	a0 e0       	ldi	r26, 0x00	; 0
    4c96:	b0 e0       	ldi	r27, 0x00	; 0
    4c98:	bc 01       	movw	r22, r24
    4c9a:	cd 01       	movw	r24, r26
    4c9c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <LCD_voidWriteIntData>
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	a6 e9       	ldi	r26, 0x96	; 150
    4ca6:	b3 e4       	ldi	r27, 0x43	; 67
    4ca8:	8f a3       	std	Y+39, r24	; 0x27
    4caa:	98 a7       	std	Y+40, r25	; 0x28
    4cac:	a9 a7       	std	Y+41, r26	; 0x29
    4cae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    4cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    4cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    4cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	4a e7       	ldi	r20, 0x7A	; 122
    4cbe:	55 e4       	ldi	r21, 0x45	; 69
    4cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	8b a3       	std	Y+35, r24	; 0x23
    4cca:	9c a3       	std	Y+36, r25	; 0x24
    4ccc:	ad a3       	std	Y+37, r26	; 0x25
    4cce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    4cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    4cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    4cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e8       	ldi	r20, 0x80	; 128
    4cde:	5f e3       	ldi	r21, 0x3F	; 63
    4ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ce4:	88 23       	and	r24, r24
    4ce6:	2c f4       	brge	.+10     	; 0x4cf2 <main+0x424>
		__ticks = 1;
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	9a a3       	std	Y+34, r25	; 0x22
    4cee:	89 a3       	std	Y+33, r24	; 0x21
    4cf0:	3f c0       	rjmp	.+126    	; 0x4d70 <main+0x4a2>
	else if (__tmp > 65535)
    4cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    4cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    4cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    4cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	3f ef       	ldi	r19, 0xFF	; 255
    4cfe:	4f e7       	ldi	r20, 0x7F	; 127
    4d00:	57 e4       	ldi	r21, 0x47	; 71
    4d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d06:	18 16       	cp	r1, r24
    4d08:	4c f5       	brge	.+82     	; 0x4d5c <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d0a:	6f a1       	ldd	r22, Y+39	; 0x27
    4d0c:	78 a5       	ldd	r23, Y+40	; 0x28
    4d0e:	89 a5       	ldd	r24, Y+41	; 0x29
    4d10:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e2       	ldi	r20, 0x20	; 32
    4d18:	51 e4       	ldi	r21, 0x41	; 65
    4d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	bc 01       	movw	r22, r24
    4d24:	cd 01       	movw	r24, r26
    4d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	9a a3       	std	Y+34, r25	; 0x22
    4d30:	89 a3       	std	Y+33, r24	; 0x21
    4d32:	0f c0       	rjmp	.+30     	; 0x4d52 <main+0x484>
    4d34:	80 e9       	ldi	r24, 0x90	; 144
    4d36:	91 e0       	ldi	r25, 0x01	; 1
    4d38:	98 a3       	std	Y+32, r25	; 0x20
    4d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    4d3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d3e:	98 a1       	ldd	r25, Y+32	; 0x20
    4d40:	01 97       	sbiw	r24, 0x01	; 1
    4d42:	f1 f7       	brne	.-4      	; 0x4d40 <main+0x472>
    4d44:	98 a3       	std	Y+32, r25	; 0x20
    4d46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d48:	89 a1       	ldd	r24, Y+33	; 0x21
    4d4a:	9a a1       	ldd	r25, Y+34	; 0x22
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	9a a3       	std	Y+34, r25	; 0x22
    4d50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d52:	89 a1       	ldd	r24, Y+33	; 0x21
    4d54:	9a a1       	ldd	r25, Y+34	; 0x22
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	69 f7       	brne	.-38     	; 0x4d34 <main+0x466>
    4d5a:	14 c0       	rjmp	.+40     	; 0x4d84 <main+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    4d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    4d60:	8d a1       	ldd	r24, Y+37	; 0x25
    4d62:	9e a1       	ldd	r25, Y+38	; 0x26
    4d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d68:	dc 01       	movw	r26, r24
    4d6a:	cb 01       	movw	r24, r22
    4d6c:	9a a3       	std	Y+34, r25	; 0x22
    4d6e:	89 a3       	std	Y+33, r24	; 0x21
    4d70:	89 a1       	ldd	r24, Y+33	; 0x21
    4d72:	9a a1       	ldd	r25, Y+34	; 0x22
    4d74:	9e 8f       	std	Y+30, r25	; 0x1e
    4d76:	8d 8f       	std	Y+29, r24	; 0x1d
    4d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	f1 f7       	brne	.-4      	; 0x4d7c <main+0x4ae>
    4d80:	9e 8f       	std	Y+30, r25	; 0x1e
    4d82:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    4d84:	83 e0       	ldi	r24, 0x03	; 3
    4d86:	66 e0       	ldi	r22, 0x06	; 6
    4d88:	40 e0       	ldi	r20, 0x00	; 0
    4d8a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	90 ee       	ldi	r25, 0xE0	; 224
    4d92:	a2 e9       	ldi	r26, 0x92	; 146
    4d94:	b5 e4       	ldi	r27, 0x45	; 69
    4d96:	89 8f       	std	Y+25, r24	; 0x19
    4d98:	9a 8f       	std	Y+26, r25	; 0x1a
    4d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    4d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    4da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	4a e7       	ldi	r20, 0x7A	; 122
    4dac:	55 e4       	ldi	r21, 0x45	; 69
    4dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	8d 8b       	std	Y+21, r24	; 0x15
    4db8:	9e 8b       	std	Y+22, r25	; 0x16
    4dba:	af 8b       	std	Y+23, r26	; 0x17
    4dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    4dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    4dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 e8       	ldi	r20, 0x80	; 128
    4dcc:	5f e3       	ldi	r21, 0x3F	; 63
    4dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dd2:	88 23       	and	r24, r24
    4dd4:	2c f4       	brge	.+10     	; 0x4de0 <main+0x512>
		__ticks = 1;
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	9c 8b       	std	Y+20, r25	; 0x14
    4ddc:	8b 8b       	std	Y+19, r24	; 0x13
    4dde:	3f c0       	rjmp	.+126    	; 0x4e5e <main+0x590>
	else if (__tmp > 65535)
    4de0:	6d 89       	ldd	r22, Y+21	; 0x15
    4de2:	7e 89       	ldd	r23, Y+22	; 0x16
    4de4:	8f 89       	ldd	r24, Y+23	; 0x17
    4de6:	98 8d       	ldd	r25, Y+24	; 0x18
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	3f ef       	ldi	r19, 0xFF	; 255
    4dec:	4f e7       	ldi	r20, 0x7F	; 127
    4dee:	57 e4       	ldi	r21, 0x47	; 71
    4df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4df4:	18 16       	cp	r1, r24
    4df6:	4c f5       	brge	.+82     	; 0x4e4a <main+0x57c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4df8:	69 8d       	ldd	r22, Y+25	; 0x19
    4dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	40 e2       	ldi	r20, 0x20	; 32
    4e06:	51 e4       	ldi	r21, 0x41	; 65
    4e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	cb 01       	movw	r24, r22
    4e10:	bc 01       	movw	r22, r24
    4e12:	cd 01       	movw	r24, r26
    4e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e18:	dc 01       	movw	r26, r24
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	9c 8b       	std	Y+20, r25	; 0x14
    4e1e:	8b 8b       	std	Y+19, r24	; 0x13
    4e20:	0f c0       	rjmp	.+30     	; 0x4e40 <main+0x572>
    4e22:	80 e9       	ldi	r24, 0x90	; 144
    4e24:	91 e0       	ldi	r25, 0x01	; 1
    4e26:	9a 8b       	std	Y+18, r25	; 0x12
    4e28:	89 8b       	std	Y+17, r24	; 0x11
    4e2a:	89 89       	ldd	r24, Y+17	; 0x11
    4e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    4e2e:	01 97       	sbiw	r24, 0x01	; 1
    4e30:	f1 f7       	brne	.-4      	; 0x4e2e <main+0x560>
    4e32:	9a 8b       	std	Y+18, r25	; 0x12
    4e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e36:	8b 89       	ldd	r24, Y+19	; 0x13
    4e38:	9c 89       	ldd	r25, Y+20	; 0x14
    4e3a:	01 97       	sbiw	r24, 0x01	; 1
    4e3c:	9c 8b       	std	Y+20, r25	; 0x14
    4e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e40:	8b 89       	ldd	r24, Y+19	; 0x13
    4e42:	9c 89       	ldd	r25, Y+20	; 0x14
    4e44:	00 97       	sbiw	r24, 0x00	; 0
    4e46:	69 f7       	brne	.-38     	; 0x4e22 <main+0x554>
    4e48:	14 c0       	rjmp	.+40     	; 0x4e72 <main+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e50:	98 8d       	ldd	r25, Y+24	; 0x18
    4e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e56:	dc 01       	movw	r26, r24
    4e58:	cb 01       	movw	r24, r22
    4e5a:	9c 8b       	std	Y+20, r25	; 0x14
    4e5c:	8b 8b       	std	Y+19, r24	; 0x13
    4e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4e60:	9c 89       	ldd	r25, Y+20	; 0x14
    4e62:	98 8b       	std	Y+16, r25	; 0x10
    4e64:	8f 87       	std	Y+15, r24	; 0x0f
    4e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e68:	98 89       	ldd	r25, Y+16	; 0x10
    4e6a:	01 97       	sbiw	r24, 0x01	; 1
    4e6c:	f1 f7       	brne	.-4      	; 0x4e6a <main+0x59c>
    4e6e:	98 8b       	std	Y+16, r25	; 0x10
    4e70:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(4700);
			LCD_voidSendCommand(LCD_ClearDisplay);
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
			currentSize = STARTING_SIZE;
    4e78:	83 e0       	ldi	r24, 0x03	; 3
    4e7a:	80 93 8d 01 	sts	0x018D, r24
			ResetPositionArr();
    4e7e:	0e 94 66 2c 	call	0x58cc	; 0x58cc <ResetPositionArr>
			InitializeSnake();
    4e82:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <InitializeSnake>
			SpawnSnake();
    4e86:	0e 94 47 28 	call	0x508e	; 0x508e <SpawnSnake>
			foodAvailable = 0;
    4e8a:	10 92 17 02 	sts	0x0217, r1
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	a6 e9       	ldi	r26, 0x96	; 150
    4e94:	b3 e4       	ldi	r27, 0x43	; 67
    4e96:	8b 87       	std	Y+11, r24	; 0x0b
    4e98:	9c 87       	std	Y+12, r25	; 0x0c
    4e9a:	ad 87       	std	Y+13, r26	; 0x0d
    4e9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	4a e7       	ldi	r20, 0x7A	; 122
    4eac:	55 e4       	ldi	r21, 0x45	; 69
    4eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	8f 83       	std	Y+7, r24	; 0x07
    4eb8:	98 87       	std	Y+8, r25	; 0x08
    4eba:	a9 87       	std	Y+9, r26	; 0x09
    4ebc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec0:	78 85       	ldd	r23, Y+8	; 0x08
    4ec2:	89 85       	ldd	r24, Y+9	; 0x09
    4ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	40 e8       	ldi	r20, 0x80	; 128
    4ecc:	5f e3       	ldi	r21, 0x3F	; 63
    4ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ed2:	88 23       	and	r24, r24
    4ed4:	2c f4       	brge	.+10     	; 0x4ee0 <main+0x612>
		__ticks = 1;
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	9e 83       	std	Y+6, r25	; 0x06
    4edc:	8d 83       	std	Y+5, r24	; 0x05
    4ede:	3f c0       	rjmp	.+126    	; 0x4f5e <main+0x690>
	else if (__tmp > 65535)
    4ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ee2:	78 85       	ldd	r23, Y+8	; 0x08
    4ee4:	89 85       	ldd	r24, Y+9	; 0x09
    4ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee8:	20 e0       	ldi	r18, 0x00	; 0
    4eea:	3f ef       	ldi	r19, 0xFF	; 255
    4eec:	4f e7       	ldi	r20, 0x7F	; 127
    4eee:	57 e4       	ldi	r21, 0x47	; 71
    4ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ef4:	18 16       	cp	r1, r24
    4ef6:	4c f5       	brge	.+82     	; 0x4f4a <main+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	40 e2       	ldi	r20, 0x20	; 32
    4f06:	51 e4       	ldi	r21, 0x41	; 65
    4f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	bc 01       	movw	r22, r24
    4f12:	cd 01       	movw	r24, r26
    4f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f18:	dc 01       	movw	r26, r24
    4f1a:	cb 01       	movw	r24, r22
    4f1c:	9e 83       	std	Y+6, r25	; 0x06
    4f1e:	8d 83       	std	Y+5, r24	; 0x05
    4f20:	0f c0       	rjmp	.+30     	; 0x4f40 <main+0x672>
    4f22:	80 e9       	ldi	r24, 0x90	; 144
    4f24:	91 e0       	ldi	r25, 0x01	; 1
    4f26:	9c 83       	std	Y+4, r25	; 0x04
    4f28:	8b 83       	std	Y+3, r24	; 0x03
    4f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f2e:	01 97       	sbiw	r24, 0x01	; 1
    4f30:	f1 f7       	brne	.-4      	; 0x4f2e <main+0x660>
    4f32:	9c 83       	std	Y+4, r25	; 0x04
    4f34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3a:	01 97       	sbiw	r24, 0x01	; 1
    4f3c:	9e 83       	std	Y+6, r25	; 0x06
    4f3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f40:	8d 81       	ldd	r24, Y+5	; 0x05
    4f42:	9e 81       	ldd	r25, Y+6	; 0x06
    4f44:	00 97       	sbiw	r24, 0x00	; 0
    4f46:	69 f7       	brne	.-38     	; 0x4f22 <main+0x654>
    4f48:	14 c0       	rjmp	.+40     	; 0x4f72 <main+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f4c:	78 85       	ldd	r23, Y+8	; 0x08
    4f4e:	89 85       	ldd	r24, Y+9	; 0x09
    4f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	9e 83       	std	Y+6, r25	; 0x06
    4f5c:	8d 83       	std	Y+5, r24	; 0x05
    4f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f60:	9e 81       	ldd	r25, Y+6	; 0x06
    4f62:	9a 83       	std	Y+2, r25	; 0x02
    4f64:	89 83       	std	Y+1, r24	; 0x01
    4f66:	89 81       	ldd	r24, Y+1	; 0x01
    4f68:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	f1 f7       	brne	.-4      	; 0x4f6a <main+0x69c>
    4f6e:	9a 83       	std	Y+2, r25	; 0x02
    4f70:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(300);
		DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    4f72:	83 e0       	ldi	r24, 0x03	; 3
    4f74:	66 e0       	ldi	r22, 0x06	; 6
    4f76:	40 e0       	ldi	r20, 0x00	; 0
    4f78:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinValue>
    4f7c:	55 cd       	rjmp	.-1366   	; 0x4a28 <main+0x15a>

00004f7e <LoadSnakeInCGRAM>:
	}
	return 0;
}

void LoadSnakeInCGRAM(){
    4f7e:	df 93       	push	r29
    4f80:	cf 93       	push	r28
    4f82:	0f 92       	push	r0
    4f84:	cd b7       	in	r28, 0x3d	; 61
    4f86:	de b7       	in	r29, 0x3e	; 62
	u8 cgRamIndex = 0;
    4f88:	19 82       	std	Y+1, r1	; 0x01
	for(cgRamIndex = 0; cgRamIndex < 4; cgRamIndex++){
    4f8a:	19 82       	std	Y+1, r1	; 0x01
    4f8c:	2b c0       	rjmp	.+86     	; 0x4fe4 <LoadSnakeInCGRAM+0x66>
		LCD_voidDisplaySpecialChar(Head[cgRamIndex], cgRamIndex, 0, 0);
    4f8e:	2f e8       	ldi	r18, 0x8F	; 143
    4f90:	31 e0       	ldi	r19, 0x01	; 1
    4f92:	89 81       	ldd	r24, Y+1	; 0x01
    4f94:	88 2f       	mov	r24, r24
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	88 0f       	add	r24, r24
    4f9a:	99 1f       	adc	r25, r25
    4f9c:	88 0f       	add	r24, r24
    4f9e:	99 1f       	adc	r25, r25
    4fa0:	88 0f       	add	r24, r24
    4fa2:	99 1f       	adc	r25, r25
    4fa4:	82 0f       	add	r24, r18
    4fa6:	93 1f       	adc	r25, r19
    4fa8:	69 81       	ldd	r22, Y+1	; 0x01
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	20 e0       	ldi	r18, 0x00	; 0
    4fae:	0e 94 61 23 	call	0x46c2	; 0x46c2 <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(Body[cgRamIndex], cgRamIndex + 4, 0, 0);
    4fb2:	2f ea       	ldi	r18, 0xAF	; 175
    4fb4:	31 e0       	ldi	r19, 0x01	; 1
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	88 2f       	mov	r24, r24
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	88 0f       	add	r24, r24
    4fbe:	99 1f       	adc	r25, r25
    4fc0:	88 0f       	add	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	88 0f       	add	r24, r24
    4fc6:	99 1f       	adc	r25, r25
    4fc8:	28 0f       	add	r18, r24
    4fca:	39 1f       	adc	r19, r25
    4fcc:	89 81       	ldd	r24, Y+1	; 0x01
    4fce:	48 2f       	mov	r20, r24
    4fd0:	4c 5f       	subi	r20, 0xFC	; 252
    4fd2:	c9 01       	movw	r24, r18
    4fd4:	64 2f       	mov	r22, r20
    4fd6:	40 e0       	ldi	r20, 0x00	; 0
    4fd8:	20 e0       	ldi	r18, 0x00	; 0
    4fda:	0e 94 61 23 	call	0x46c2	; 0x46c2 <LCD_voidDisplaySpecialChar>
	return 0;
}

void LoadSnakeInCGRAM(){
	u8 cgRamIndex = 0;
	for(cgRamIndex = 0; cgRamIndex < 4; cgRamIndex++){
    4fde:	89 81       	ldd	r24, Y+1	; 0x01
    4fe0:	8f 5f       	subi	r24, 0xFF	; 255
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	84 30       	cpi	r24, 0x04	; 4
    4fe8:	90 f2       	brcs	.-92     	; 0x4f8e <LoadSnakeInCGRAM+0x10>
		LCD_voidDisplaySpecialChar(Head[cgRamIndex], cgRamIndex, 0, 0);
		LCD_voidDisplaySpecialChar(Body[cgRamIndex], cgRamIndex + 4, 0, 0);
	}
	LCD_voidSendCommand(LCD_ClearDisplay);
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <LCD_voidSendCommand>
}
    4ff0:	0f 90       	pop	r0
    4ff2:	cf 91       	pop	r28
    4ff4:	df 91       	pop	r29
    4ff6:	08 95       	ret

00004ff8 <InitializeSnake>:
void InitializeSnake(){
    4ff8:	df 93       	push	r29
    4ffa:	cf 93       	push	r28
    4ffc:	0f 92       	push	r0
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    5002:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0; index < currentSize; index++){
    5004:	19 82       	std	Y+1, r1	; 0x01
    5006:	33 c0       	rjmp	.+102    	; 0x506e <InitializeSnake+0x76>
		snakeArr[index].currentDirection = Right;
    5008:	89 81       	ldd	r24, Y+1	; 0x01
    500a:	28 2f       	mov	r18, r24
    500c:	33 27       	eor	r19, r19
    500e:	27 fd       	sbrc	r18, 7
    5010:	30 95       	com	r19
    5012:	c9 01       	movw	r24, r18
    5014:	88 0f       	add	r24, r24
    5016:	99 1f       	adc	r25, r25
    5018:	88 0f       	add	r24, r24
    501a:	99 1f       	adc	r25, r25
    501c:	82 0f       	add	r24, r18
    501e:	93 1f       	adc	r25, r19
    5020:	fc 01       	movw	r30, r24
    5022:	e8 59       	subi	r30, 0x98	; 152
    5024:	fd 4f       	sbci	r31, 0xFD	; 253
    5026:	10 82       	st	Z, r1
		snakeArr[index].nextDirection = Right;
    5028:	89 81       	ldd	r24, Y+1	; 0x01
    502a:	28 2f       	mov	r18, r24
    502c:	33 27       	eor	r19, r19
    502e:	27 fd       	sbrc	r18, 7
    5030:	30 95       	com	r19
    5032:	c9 01       	movw	r24, r18
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	88 0f       	add	r24, r24
    503a:	99 1f       	adc	r25, r25
    503c:	82 0f       	add	r24, r18
    503e:	93 1f       	adc	r25, r19
    5040:	fc 01       	movw	r30, r24
    5042:	e7 59       	subi	r30, 0x97	; 151
    5044:	fd 4f       	sbci	r31, 0xFD	; 253
    5046:	10 82       	st	Z, r1
		snakeArr[index].shape = Right;
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	28 2f       	mov	r18, r24
    504c:	33 27       	eor	r19, r19
    504e:	27 fd       	sbrc	r18, 7
    5050:	30 95       	com	r19
    5052:	c9 01       	movw	r24, r18
    5054:	88 0f       	add	r24, r24
    5056:	99 1f       	adc	r25, r25
    5058:	88 0f       	add	r24, r24
    505a:	99 1f       	adc	r25, r25
    505c:	82 0f       	add	r24, r18
    505e:	93 1f       	adc	r25, r19
    5060:	fc 01       	movw	r30, r24
    5062:	e4 59       	subi	r30, 0x94	; 148
    5064:	fd 4f       	sbci	r31, 0xFD	; 253
    5066:	10 82       	st	Z, r1
	}
	LCD_voidSendCommand(LCD_ClearDisplay);
}
void InitializeSnake(){
	s8 index = 0;
	for(index = 0; index < currentSize; index++){
    5068:	89 81       	ldd	r24, Y+1	; 0x01
    506a:	8f 5f       	subi	r24, 0xFF	; 255
    506c:	89 83       	std	Y+1, r24	; 0x01
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	28 2f       	mov	r18, r24
    5072:	33 27       	eor	r19, r19
    5074:	27 fd       	sbrc	r18, 7
    5076:	30 95       	com	r19
    5078:	80 91 8d 01 	lds	r24, 0x018D
    507c:	88 2f       	mov	r24, r24
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	28 17       	cp	r18, r24
    5082:	39 07       	cpc	r19, r25
    5084:	0c f2       	brlt	.-126    	; 0x5008 <InitializeSnake+0x10>
		snakeArr[index].currentDirection = Right;
		snakeArr[index].nextDirection = Right;
		snakeArr[index].shape = Right;
	}
}
    5086:	0f 90       	pop	r0
    5088:	cf 91       	pop	r28
    508a:	df 91       	pop	r29
    508c:	08 95       	ret

0000508e <SpawnSnake>:

void SpawnSnake(){
    508e:	df 93       	push	r29
    5090:	cf 93       	push	r28
    5092:	0f 92       	push	r0
    5094:	cd b7       	in	r28, 0x3d	; 61
    5096:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    5098:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0; index < currentSize; index++){
    509a:	19 82       	std	Y+1, r1	; 0x01
    509c:	5f c0       	rjmp	.+190    	; 0x515c <SpawnSnake+0xce>

		snakeArr[index].posX = 0;
    509e:	89 81       	ldd	r24, Y+1	; 0x01
    50a0:	28 2f       	mov	r18, r24
    50a2:	33 27       	eor	r19, r19
    50a4:	27 fd       	sbrc	r18, 7
    50a6:	30 95       	com	r19
    50a8:	c9 01       	movw	r24, r18
    50aa:	88 0f       	add	r24, r24
    50ac:	99 1f       	adc	r25, r25
    50ae:	88 0f       	add	r24, r24
    50b0:	99 1f       	adc	r25, r25
    50b2:	82 0f       	add	r24, r18
    50b4:	93 1f       	adc	r25, r19
    50b6:	fc 01       	movw	r30, r24
    50b8:	e6 59       	subi	r30, 0x96	; 150
    50ba:	fd 4f       	sbci	r31, 0xFD	; 253
    50bc:	10 82       	st	Z, r1
		snakeArr[index].posY = 10 - index;
    50be:	89 81       	ldd	r24, Y+1	; 0x01
    50c0:	28 2f       	mov	r18, r24
    50c2:	33 27       	eor	r19, r19
    50c4:	27 fd       	sbrc	r18, 7
    50c6:	30 95       	com	r19
    50c8:	99 81       	ldd	r25, Y+1	; 0x01
    50ca:	8a e0       	ldi	r24, 0x0A	; 10
    50cc:	89 1b       	sub	r24, r25
    50ce:	48 2f       	mov	r20, r24
    50d0:	c9 01       	movw	r24, r18
    50d2:	88 0f       	add	r24, r24
    50d4:	99 1f       	adc	r25, r25
    50d6:	88 0f       	add	r24, r24
    50d8:	99 1f       	adc	r25, r25
    50da:	82 0f       	add	r24, r18
    50dc:	93 1f       	adc	r25, r19
    50de:	fc 01       	movw	r30, r24
    50e0:	e5 59       	subi	r30, 0x95	; 149
    50e2:	fd 4f       	sbci	r31, 0xFD	; 253
    50e4:	40 83       	st	Z, r20
		LCD_voidGoToPosition(snakeArr[index].posX, snakeArr[index].posY);
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	28 2f       	mov	r18, r24
    50ea:	33 27       	eor	r19, r19
    50ec:	27 fd       	sbrc	r18, 7
    50ee:	30 95       	com	r19
    50f0:	c9 01       	movw	r24, r18
    50f2:	88 0f       	add	r24, r24
    50f4:	99 1f       	adc	r25, r25
    50f6:	88 0f       	add	r24, r24
    50f8:	99 1f       	adc	r25, r25
    50fa:	82 0f       	add	r24, r18
    50fc:	93 1f       	adc	r25, r19
    50fe:	fc 01       	movw	r30, r24
    5100:	e6 59       	subi	r30, 0x96	; 150
    5102:	fd 4f       	sbci	r31, 0xFD	; 253
    5104:	80 81       	ld	r24, Z
    5106:	48 2f       	mov	r20, r24
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	28 2f       	mov	r18, r24
    510c:	33 27       	eor	r19, r19
    510e:	27 fd       	sbrc	r18, 7
    5110:	30 95       	com	r19
    5112:	c9 01       	movw	r24, r18
    5114:	88 0f       	add	r24, r24
    5116:	99 1f       	adc	r25, r25
    5118:	88 0f       	add	r24, r24
    511a:	99 1f       	adc	r25, r25
    511c:	82 0f       	add	r24, r18
    511e:	93 1f       	adc	r25, r19
    5120:	fc 01       	movw	r30, r24
    5122:	e5 59       	subi	r30, 0x95	; 149
    5124:	fd 4f       	sbci	r31, 0xFD	; 253
    5126:	80 81       	ld	r24, Z
    5128:	98 2f       	mov	r25, r24
    512a:	84 2f       	mov	r24, r20
    512c:	69 2f       	mov	r22, r25
    512e:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
		LCD_voidWriteChar(snakeArr[index].shape);
    5132:	89 81       	ldd	r24, Y+1	; 0x01
    5134:	28 2f       	mov	r18, r24
    5136:	33 27       	eor	r19, r19
    5138:	27 fd       	sbrc	r18, 7
    513a:	30 95       	com	r19
    513c:	c9 01       	movw	r24, r18
    513e:	88 0f       	add	r24, r24
    5140:	99 1f       	adc	r25, r25
    5142:	88 0f       	add	r24, r24
    5144:	99 1f       	adc	r25, r25
    5146:	82 0f       	add	r24, r18
    5148:	93 1f       	adc	r25, r19
    514a:	fc 01       	movw	r30, r24
    514c:	e4 59       	subi	r30, 0x94	; 148
    514e:	fd 4f       	sbci	r31, 0xFD	; 253
    5150:	80 81       	ld	r24, Z
    5152:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
	}
}

void SpawnSnake(){
	s8 index = 0;
	for(index = 0; index < currentSize; index++){
    5156:	89 81       	ldd	r24, Y+1	; 0x01
    5158:	8f 5f       	subi	r24, 0xFF	; 255
    515a:	89 83       	std	Y+1, r24	; 0x01
    515c:	89 81       	ldd	r24, Y+1	; 0x01
    515e:	28 2f       	mov	r18, r24
    5160:	33 27       	eor	r19, r19
    5162:	27 fd       	sbrc	r18, 7
    5164:	30 95       	com	r19
    5166:	80 91 8d 01 	lds	r24, 0x018D
    516a:	88 2f       	mov	r24, r24
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	28 17       	cp	r18, r24
    5170:	39 07       	cpc	r19, r25
    5172:	0c f4       	brge	.+2      	; 0x5176 <SpawnSnake+0xe8>
    5174:	94 cf       	rjmp	.-216    	; 0x509e <SpawnSnake+0x10>
		snakeArr[index].posX = 0;
		snakeArr[index].posY = 10 - index;
		LCD_voidGoToPosition(snakeArr[index].posX, snakeArr[index].posY);
		LCD_voidWriteChar(snakeArr[index].shape);
	}
}
    5176:	0f 90       	pop	r0
    5178:	cf 91       	pop	r28
    517a:	df 91       	pop	r29
    517c:	08 95       	ret

0000517e <MoveSnake>:

void MoveSnake(){
    517e:	0f 93       	push	r16
    5180:	1f 93       	push	r17
    5182:	df 93       	push	r29
    5184:	cf 93       	push	r28
    5186:	0f 92       	push	r0
    5188:	cd b7       	in	r28, 0x3d	; 61
    518a:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    518c:	19 82       	std	Y+1, r1	; 0x01
	index = currentSize - 1;
    518e:	80 91 8d 01 	lds	r24, 0x018D
    5192:	81 50       	subi	r24, 0x01	; 1
    5194:	89 83       	std	Y+1, r24	; 0x01
	posArr[snakeArr[index].posX][snakeArr[index].posY] = 0;
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	28 2f       	mov	r18, r24
    519a:	33 27       	eor	r19, r19
    519c:	27 fd       	sbrc	r18, 7
    519e:	30 95       	com	r19
    51a0:	c9 01       	movw	r24, r18
    51a2:	88 0f       	add	r24, r24
    51a4:	99 1f       	adc	r25, r25
    51a6:	88 0f       	add	r24, r24
    51a8:	99 1f       	adc	r25, r25
    51aa:	82 0f       	add	r24, r18
    51ac:	93 1f       	adc	r25, r19
    51ae:	fc 01       	movw	r30, r24
    51b0:	e6 59       	subi	r30, 0x96	; 150
    51b2:	fd 4f       	sbci	r31, 0xFD	; 253
    51b4:	80 81       	ld	r24, Z
    51b6:	68 2f       	mov	r22, r24
    51b8:	77 27       	eor	r23, r23
    51ba:	67 fd       	sbrc	r22, 7
    51bc:	70 95       	com	r23
    51be:	89 81       	ldd	r24, Y+1	; 0x01
    51c0:	28 2f       	mov	r18, r24
    51c2:	33 27       	eor	r19, r19
    51c4:	27 fd       	sbrc	r18, 7
    51c6:	30 95       	com	r19
    51c8:	c9 01       	movw	r24, r18
    51ca:	88 0f       	add	r24, r24
    51cc:	99 1f       	adc	r25, r25
    51ce:	88 0f       	add	r24, r24
    51d0:	99 1f       	adc	r25, r25
    51d2:	82 0f       	add	r24, r18
    51d4:	93 1f       	adc	r25, r19
    51d6:	fc 01       	movw	r30, r24
    51d8:	e5 59       	subi	r30, 0x95	; 149
    51da:	fd 4f       	sbci	r31, 0xFD	; 253
    51dc:	80 81       	ld	r24, Z
    51de:	48 2f       	mov	r20, r24
    51e0:	55 27       	eor	r21, r21
    51e2:	47 fd       	sbrc	r20, 7
    51e4:	50 95       	com	r21
    51e6:	cb 01       	movw	r24, r22
    51e8:	88 0f       	add	r24, r24
    51ea:	99 1f       	adc	r25, r25
    51ec:	88 0f       	add	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	9c 01       	movw	r18, r24
    51f2:	22 0f       	add	r18, r18
    51f4:	33 1f       	adc	r19, r19
    51f6:	22 0f       	add	r18, r18
    51f8:	33 1f       	adc	r19, r19
    51fa:	82 0f       	add	r24, r18
    51fc:	93 1f       	adc	r25, r19
    51fe:	84 0f       	add	r24, r20
    5200:	95 1f       	adc	r25, r21
    5202:	fc 01       	movw	r30, r24
    5204:	e8 5e       	subi	r30, 0xE8	; 232
    5206:	fd 4f       	sbci	r31, 0xFD	; 253
    5208:	10 82       	st	Z, r1
    520a:	e3 c2       	rjmp	.+1478   	; 0x57d2 <MoveSnake+0x654>
	while(index >= 0){
		if(index != 0){
    520c:	89 81       	ldd	r24, Y+1	; 0x01
    520e:	88 23       	and	r24, r24
    5210:	09 f4       	brne	.+2      	; 0x5214 <MoveSnake+0x96>
    5212:	f9 c0       	rjmp	.+498    	; 0x5406 <MoveSnake+0x288>
			snakeArr[index].currentDirection = snakeArr[index - 1].currentDirection;
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	48 2f       	mov	r20, r24
    5218:	55 27       	eor	r21, r21
    521a:	47 fd       	sbrc	r20, 7
    521c:	50 95       	com	r21
    521e:	89 81       	ldd	r24, Y+1	; 0x01
    5220:	99 27       	eor	r25, r25
    5222:	87 fd       	sbrc	r24, 7
    5224:	90 95       	com	r25
    5226:	9c 01       	movw	r18, r24
    5228:	21 50       	subi	r18, 0x01	; 1
    522a:	30 40       	sbci	r19, 0x00	; 0
    522c:	c9 01       	movw	r24, r18
    522e:	88 0f       	add	r24, r24
    5230:	99 1f       	adc	r25, r25
    5232:	88 0f       	add	r24, r24
    5234:	99 1f       	adc	r25, r25
    5236:	82 0f       	add	r24, r18
    5238:	93 1f       	adc	r25, r19
    523a:	fc 01       	movw	r30, r24
    523c:	e8 59       	subi	r30, 0x98	; 152
    523e:	fd 4f       	sbci	r31, 0xFD	; 253
    5240:	20 81       	ld	r18, Z
    5242:	ca 01       	movw	r24, r20
    5244:	88 0f       	add	r24, r24
    5246:	99 1f       	adc	r25, r25
    5248:	88 0f       	add	r24, r24
    524a:	99 1f       	adc	r25, r25
    524c:	84 0f       	add	r24, r20
    524e:	95 1f       	adc	r25, r21
    5250:	fc 01       	movw	r30, r24
    5252:	e8 59       	subi	r30, 0x98	; 152
    5254:	fd 4f       	sbci	r31, 0xFD	; 253
    5256:	20 83       	st	Z, r18
			snakeArr[index].nextDirection = snakeArr[index - 1].nextDirection;
    5258:	89 81       	ldd	r24, Y+1	; 0x01
    525a:	48 2f       	mov	r20, r24
    525c:	55 27       	eor	r21, r21
    525e:	47 fd       	sbrc	r20, 7
    5260:	50 95       	com	r21
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	99 27       	eor	r25, r25
    5266:	87 fd       	sbrc	r24, 7
    5268:	90 95       	com	r25
    526a:	9c 01       	movw	r18, r24
    526c:	21 50       	subi	r18, 0x01	; 1
    526e:	30 40       	sbci	r19, 0x00	; 0
    5270:	c9 01       	movw	r24, r18
    5272:	88 0f       	add	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	88 0f       	add	r24, r24
    5278:	99 1f       	adc	r25, r25
    527a:	82 0f       	add	r24, r18
    527c:	93 1f       	adc	r25, r19
    527e:	fc 01       	movw	r30, r24
    5280:	e7 59       	subi	r30, 0x97	; 151
    5282:	fd 4f       	sbci	r31, 0xFD	; 253
    5284:	20 81       	ld	r18, Z
    5286:	ca 01       	movw	r24, r20
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	88 0f       	add	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	84 0f       	add	r24, r20
    5292:	95 1f       	adc	r25, r21
    5294:	fc 01       	movw	r30, r24
    5296:	e7 59       	subi	r30, 0x97	; 151
    5298:	fd 4f       	sbci	r31, 0xFD	; 253
    529a:	20 83       	st	Z, r18
			snakeArr[index].posX = snakeArr[index - 1].posX;
    529c:	89 81       	ldd	r24, Y+1	; 0x01
    529e:	48 2f       	mov	r20, r24
    52a0:	55 27       	eor	r21, r21
    52a2:	47 fd       	sbrc	r20, 7
    52a4:	50 95       	com	r21
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	99 27       	eor	r25, r25
    52aa:	87 fd       	sbrc	r24, 7
    52ac:	90 95       	com	r25
    52ae:	9c 01       	movw	r18, r24
    52b0:	21 50       	subi	r18, 0x01	; 1
    52b2:	30 40       	sbci	r19, 0x00	; 0
    52b4:	c9 01       	movw	r24, r18
    52b6:	88 0f       	add	r24, r24
    52b8:	99 1f       	adc	r25, r25
    52ba:	88 0f       	add	r24, r24
    52bc:	99 1f       	adc	r25, r25
    52be:	82 0f       	add	r24, r18
    52c0:	93 1f       	adc	r25, r19
    52c2:	fc 01       	movw	r30, r24
    52c4:	e6 59       	subi	r30, 0x96	; 150
    52c6:	fd 4f       	sbci	r31, 0xFD	; 253
    52c8:	20 81       	ld	r18, Z
    52ca:	ca 01       	movw	r24, r20
    52cc:	88 0f       	add	r24, r24
    52ce:	99 1f       	adc	r25, r25
    52d0:	88 0f       	add	r24, r24
    52d2:	99 1f       	adc	r25, r25
    52d4:	84 0f       	add	r24, r20
    52d6:	95 1f       	adc	r25, r21
    52d8:	fc 01       	movw	r30, r24
    52da:	e6 59       	subi	r30, 0x96	; 150
    52dc:	fd 4f       	sbci	r31, 0xFD	; 253
    52de:	20 83       	st	Z, r18
			snakeArr[index].posY = snakeArr[index - 1].posY;
    52e0:	89 81       	ldd	r24, Y+1	; 0x01
    52e2:	48 2f       	mov	r20, r24
    52e4:	55 27       	eor	r21, r21
    52e6:	47 fd       	sbrc	r20, 7
    52e8:	50 95       	com	r21
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	99 27       	eor	r25, r25
    52ee:	87 fd       	sbrc	r24, 7
    52f0:	90 95       	com	r25
    52f2:	9c 01       	movw	r18, r24
    52f4:	21 50       	subi	r18, 0x01	; 1
    52f6:	30 40       	sbci	r19, 0x00	; 0
    52f8:	c9 01       	movw	r24, r18
    52fa:	88 0f       	add	r24, r24
    52fc:	99 1f       	adc	r25, r25
    52fe:	88 0f       	add	r24, r24
    5300:	99 1f       	adc	r25, r25
    5302:	82 0f       	add	r24, r18
    5304:	93 1f       	adc	r25, r19
    5306:	fc 01       	movw	r30, r24
    5308:	e5 59       	subi	r30, 0x95	; 149
    530a:	fd 4f       	sbci	r31, 0xFD	; 253
    530c:	20 81       	ld	r18, Z
    530e:	ca 01       	movw	r24, r20
    5310:	88 0f       	add	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	88 0f       	add	r24, r24
    5316:	99 1f       	adc	r25, r25
    5318:	84 0f       	add	r24, r20
    531a:	95 1f       	adc	r25, r21
    531c:	fc 01       	movw	r30, r24
    531e:	e5 59       	subi	r30, 0x95	; 149
    5320:	fd 4f       	sbci	r31, 0xFD	; 253
    5322:	20 83       	st	Z, r18
			snakeArr[index].shape = FindShape(snakeArr[index].currentDirection, snakeArr[index].nextDirection);
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	08 2f       	mov	r16, r24
    5328:	11 27       	eor	r17, r17
    532a:	07 fd       	sbrc	r16, 7
    532c:	10 95       	com	r17
    532e:	89 81       	ldd	r24, Y+1	; 0x01
    5330:	28 2f       	mov	r18, r24
    5332:	33 27       	eor	r19, r19
    5334:	27 fd       	sbrc	r18, 7
    5336:	30 95       	com	r19
    5338:	c9 01       	movw	r24, r18
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	88 0f       	add	r24, r24
    5340:	99 1f       	adc	r25, r25
    5342:	82 0f       	add	r24, r18
    5344:	93 1f       	adc	r25, r19
    5346:	fc 01       	movw	r30, r24
    5348:	e8 59       	subi	r30, 0x98	; 152
    534a:	fd 4f       	sbci	r31, 0xFD	; 253
    534c:	40 81       	ld	r20, Z
    534e:	89 81       	ldd	r24, Y+1	; 0x01
    5350:	28 2f       	mov	r18, r24
    5352:	33 27       	eor	r19, r19
    5354:	27 fd       	sbrc	r18, 7
    5356:	30 95       	com	r19
    5358:	c9 01       	movw	r24, r18
    535a:	88 0f       	add	r24, r24
    535c:	99 1f       	adc	r25, r25
    535e:	88 0f       	add	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	82 0f       	add	r24, r18
    5364:	93 1f       	adc	r25, r19
    5366:	fc 01       	movw	r30, r24
    5368:	e7 59       	subi	r30, 0x97	; 151
    536a:	fd 4f       	sbci	r31, 0xFD	; 253
    536c:	90 81       	ld	r25, Z
    536e:	84 2f       	mov	r24, r20
    5370:	69 2f       	mov	r22, r25
    5372:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <FindShape>
    5376:	28 2f       	mov	r18, r24
    5378:	c8 01       	movw	r24, r16
    537a:	88 0f       	add	r24, r24
    537c:	99 1f       	adc	r25, r25
    537e:	88 0f       	add	r24, r24
    5380:	99 1f       	adc	r25, r25
    5382:	80 0f       	add	r24, r16
    5384:	91 1f       	adc	r25, r17
    5386:	fc 01       	movw	r30, r24
    5388:	e4 59       	subi	r30, 0x94	; 148
    538a:	fd 4f       	sbci	r31, 0xFD	; 253
    538c:	20 83       	st	Z, r18
			posArr[snakeArr[index].posX][snakeArr[index].posY] = 1;
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	28 2f       	mov	r18, r24
    5392:	33 27       	eor	r19, r19
    5394:	27 fd       	sbrc	r18, 7
    5396:	30 95       	com	r19
    5398:	c9 01       	movw	r24, r18
    539a:	88 0f       	add	r24, r24
    539c:	99 1f       	adc	r25, r25
    539e:	88 0f       	add	r24, r24
    53a0:	99 1f       	adc	r25, r25
    53a2:	82 0f       	add	r24, r18
    53a4:	93 1f       	adc	r25, r19
    53a6:	fc 01       	movw	r30, r24
    53a8:	e6 59       	subi	r30, 0x96	; 150
    53aa:	fd 4f       	sbci	r31, 0xFD	; 253
    53ac:	80 81       	ld	r24, Z
    53ae:	68 2f       	mov	r22, r24
    53b0:	77 27       	eor	r23, r23
    53b2:	67 fd       	sbrc	r22, 7
    53b4:	70 95       	com	r23
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	28 2f       	mov	r18, r24
    53ba:	33 27       	eor	r19, r19
    53bc:	27 fd       	sbrc	r18, 7
    53be:	30 95       	com	r19
    53c0:	c9 01       	movw	r24, r18
    53c2:	88 0f       	add	r24, r24
    53c4:	99 1f       	adc	r25, r25
    53c6:	88 0f       	add	r24, r24
    53c8:	99 1f       	adc	r25, r25
    53ca:	82 0f       	add	r24, r18
    53cc:	93 1f       	adc	r25, r19
    53ce:	fc 01       	movw	r30, r24
    53d0:	e5 59       	subi	r30, 0x95	; 149
    53d2:	fd 4f       	sbci	r31, 0xFD	; 253
    53d4:	80 81       	ld	r24, Z
    53d6:	48 2f       	mov	r20, r24
    53d8:	55 27       	eor	r21, r21
    53da:	47 fd       	sbrc	r20, 7
    53dc:	50 95       	com	r21
    53de:	cb 01       	movw	r24, r22
    53e0:	88 0f       	add	r24, r24
    53e2:	99 1f       	adc	r25, r25
    53e4:	88 0f       	add	r24, r24
    53e6:	99 1f       	adc	r25, r25
    53e8:	9c 01       	movw	r18, r24
    53ea:	22 0f       	add	r18, r18
    53ec:	33 1f       	adc	r19, r19
    53ee:	22 0f       	add	r18, r18
    53f0:	33 1f       	adc	r19, r19
    53f2:	82 0f       	add	r24, r18
    53f4:	93 1f       	adc	r25, r19
    53f6:	84 0f       	add	r24, r20
    53f8:	95 1f       	adc	r25, r21
    53fa:	fc 01       	movw	r30, r24
    53fc:	e8 5e       	subi	r30, 0xE8	; 232
    53fe:	fd 4f       	sbci	r31, 0xFD	; 253
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	80 83       	st	Z, r24
    5404:	1f c1       	rjmp	.+574    	; 0x5644 <MoveSnake+0x4c6>
		}
		else{
			snakeArr[index].currentDirection = snakeArr[index].nextDirection;
    5406:	89 81       	ldd	r24, Y+1	; 0x01
    5408:	48 2f       	mov	r20, r24
    540a:	55 27       	eor	r21, r21
    540c:	47 fd       	sbrc	r20, 7
    540e:	50 95       	com	r21
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	28 2f       	mov	r18, r24
    5414:	33 27       	eor	r19, r19
    5416:	27 fd       	sbrc	r18, 7
    5418:	30 95       	com	r19
    541a:	c9 01       	movw	r24, r18
    541c:	88 0f       	add	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	88 0f       	add	r24, r24
    5422:	99 1f       	adc	r25, r25
    5424:	82 0f       	add	r24, r18
    5426:	93 1f       	adc	r25, r19
    5428:	fc 01       	movw	r30, r24
    542a:	e7 59       	subi	r30, 0x97	; 151
    542c:	fd 4f       	sbci	r31, 0xFD	; 253
    542e:	20 81       	ld	r18, Z
    5430:	ca 01       	movw	r24, r20
    5432:	88 0f       	add	r24, r24
    5434:	99 1f       	adc	r25, r25
    5436:	88 0f       	add	r24, r24
    5438:	99 1f       	adc	r25, r25
    543a:	84 0f       	add	r24, r20
    543c:	95 1f       	adc	r25, r21
    543e:	fc 01       	movw	r30, r24
    5440:	e8 59       	subi	r30, 0x98	; 152
    5442:	fd 4f       	sbci	r31, 0xFD	; 253
    5444:	20 83       	st	Z, r18
			snakeArr[index].shape = snakeArr[index].currentDirection;
    5446:	89 81       	ldd	r24, Y+1	; 0x01
    5448:	48 2f       	mov	r20, r24
    544a:	55 27       	eor	r21, r21
    544c:	47 fd       	sbrc	r20, 7
    544e:	50 95       	com	r21
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	28 2f       	mov	r18, r24
    5454:	33 27       	eor	r19, r19
    5456:	27 fd       	sbrc	r18, 7
    5458:	30 95       	com	r19
    545a:	c9 01       	movw	r24, r18
    545c:	88 0f       	add	r24, r24
    545e:	99 1f       	adc	r25, r25
    5460:	88 0f       	add	r24, r24
    5462:	99 1f       	adc	r25, r25
    5464:	82 0f       	add	r24, r18
    5466:	93 1f       	adc	r25, r19
    5468:	fc 01       	movw	r30, r24
    546a:	e8 59       	subi	r30, 0x98	; 152
    546c:	fd 4f       	sbci	r31, 0xFD	; 253
    546e:	20 81       	ld	r18, Z
    5470:	ca 01       	movw	r24, r20
    5472:	88 0f       	add	r24, r24
    5474:	99 1f       	adc	r25, r25
    5476:	88 0f       	add	r24, r24
    5478:	99 1f       	adc	r25, r25
    547a:	84 0f       	add	r24, r20
    547c:	95 1f       	adc	r25, r21
    547e:	fc 01       	movw	r30, r24
    5480:	e4 59       	subi	r30, 0x94	; 148
    5482:	fd 4f       	sbci	r31, 0xFD	; 253
    5484:	20 83       	st	Z, r18
			if(snakeArr[index].nextDirection == Down){
    5486:	89 81       	ldd	r24, Y+1	; 0x01
    5488:	28 2f       	mov	r18, r24
    548a:	33 27       	eor	r19, r19
    548c:	27 fd       	sbrc	r18, 7
    548e:	30 95       	com	r19
    5490:	c9 01       	movw	r24, r18
    5492:	88 0f       	add	r24, r24
    5494:	99 1f       	adc	r25, r25
    5496:	88 0f       	add	r24, r24
    5498:	99 1f       	adc	r25, r25
    549a:	82 0f       	add	r24, r18
    549c:	93 1f       	adc	r25, r19
    549e:	fc 01       	movw	r30, r24
    54a0:	e7 59       	subi	r30, 0x97	; 151
    54a2:	fd 4f       	sbci	r31, 0xFD	; 253
    54a4:	80 81       	ld	r24, Z
    54a6:	83 30       	cpi	r24, 0x03	; 3
    54a8:	f1 f4       	brne	.+60     	; 0x54e6 <MoveSnake+0x368>
				snakeArr[index].posX++;
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	28 2f       	mov	r18, r24
    54ae:	33 27       	eor	r19, r19
    54b0:	27 fd       	sbrc	r18, 7
    54b2:	30 95       	com	r19
    54b4:	c9 01       	movw	r24, r18
    54b6:	88 0f       	add	r24, r24
    54b8:	99 1f       	adc	r25, r25
    54ba:	88 0f       	add	r24, r24
    54bc:	99 1f       	adc	r25, r25
    54be:	82 0f       	add	r24, r18
    54c0:	93 1f       	adc	r25, r19
    54c2:	fc 01       	movw	r30, r24
    54c4:	e6 59       	subi	r30, 0x96	; 150
    54c6:	fd 4f       	sbci	r31, 0xFD	; 253
    54c8:	80 81       	ld	r24, Z
    54ca:	48 2f       	mov	r20, r24
    54cc:	4f 5f       	subi	r20, 0xFF	; 255
    54ce:	c9 01       	movw	r24, r18
    54d0:	88 0f       	add	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	82 0f       	add	r24, r18
    54da:	93 1f       	adc	r25, r19
    54dc:	fc 01       	movw	r30, r24
    54de:	e6 59       	subi	r30, 0x96	; 150
    54e0:	fd 4f       	sbci	r31, 0xFD	; 253
    54e2:	40 83       	st	Z, r20
    54e4:	8f c0       	rjmp	.+286    	; 0x5604 <MoveSnake+0x486>
			}
			else if(snakeArr[index].currentDirection == Up){
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	28 2f       	mov	r18, r24
    54ea:	33 27       	eor	r19, r19
    54ec:	27 fd       	sbrc	r18, 7
    54ee:	30 95       	com	r19
    54f0:	c9 01       	movw	r24, r18
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	88 0f       	add	r24, r24
    54f8:	99 1f       	adc	r25, r25
    54fa:	82 0f       	add	r24, r18
    54fc:	93 1f       	adc	r25, r19
    54fe:	fc 01       	movw	r30, r24
    5500:	e8 59       	subi	r30, 0x98	; 152
    5502:	fd 4f       	sbci	r31, 0xFD	; 253
    5504:	80 81       	ld	r24, Z
    5506:	82 30       	cpi	r24, 0x02	; 2
    5508:	f1 f4       	brne	.+60     	; 0x5546 <MoveSnake+0x3c8>
				snakeArr[index].posX--;
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	28 2f       	mov	r18, r24
    550e:	33 27       	eor	r19, r19
    5510:	27 fd       	sbrc	r18, 7
    5512:	30 95       	com	r19
    5514:	c9 01       	movw	r24, r18
    5516:	88 0f       	add	r24, r24
    5518:	99 1f       	adc	r25, r25
    551a:	88 0f       	add	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	82 0f       	add	r24, r18
    5520:	93 1f       	adc	r25, r19
    5522:	fc 01       	movw	r30, r24
    5524:	e6 59       	subi	r30, 0x96	; 150
    5526:	fd 4f       	sbci	r31, 0xFD	; 253
    5528:	80 81       	ld	r24, Z
    552a:	48 2f       	mov	r20, r24
    552c:	41 50       	subi	r20, 0x01	; 1
    552e:	c9 01       	movw	r24, r18
    5530:	88 0f       	add	r24, r24
    5532:	99 1f       	adc	r25, r25
    5534:	88 0f       	add	r24, r24
    5536:	99 1f       	adc	r25, r25
    5538:	82 0f       	add	r24, r18
    553a:	93 1f       	adc	r25, r19
    553c:	fc 01       	movw	r30, r24
    553e:	e6 59       	subi	r30, 0x96	; 150
    5540:	fd 4f       	sbci	r31, 0xFD	; 253
    5542:	40 83       	st	Z, r20
    5544:	5f c0       	rjmp	.+190    	; 0x5604 <MoveSnake+0x486>
			}
			else if(snakeArr[index].currentDirection == Right){
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	28 2f       	mov	r18, r24
    554a:	33 27       	eor	r19, r19
    554c:	27 fd       	sbrc	r18, 7
    554e:	30 95       	com	r19
    5550:	c9 01       	movw	r24, r18
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	88 0f       	add	r24, r24
    5558:	99 1f       	adc	r25, r25
    555a:	82 0f       	add	r24, r18
    555c:	93 1f       	adc	r25, r19
    555e:	fc 01       	movw	r30, r24
    5560:	e8 59       	subi	r30, 0x98	; 152
    5562:	fd 4f       	sbci	r31, 0xFD	; 253
    5564:	80 81       	ld	r24, Z
    5566:	88 23       	and	r24, r24
    5568:	f1 f4       	brne	.+60     	; 0x55a6 <MoveSnake+0x428>
				snakeArr[index].posY++;
    556a:	89 81       	ldd	r24, Y+1	; 0x01
    556c:	28 2f       	mov	r18, r24
    556e:	33 27       	eor	r19, r19
    5570:	27 fd       	sbrc	r18, 7
    5572:	30 95       	com	r19
    5574:	c9 01       	movw	r24, r18
    5576:	88 0f       	add	r24, r24
    5578:	99 1f       	adc	r25, r25
    557a:	88 0f       	add	r24, r24
    557c:	99 1f       	adc	r25, r25
    557e:	82 0f       	add	r24, r18
    5580:	93 1f       	adc	r25, r19
    5582:	fc 01       	movw	r30, r24
    5584:	e5 59       	subi	r30, 0x95	; 149
    5586:	fd 4f       	sbci	r31, 0xFD	; 253
    5588:	80 81       	ld	r24, Z
    558a:	48 2f       	mov	r20, r24
    558c:	4f 5f       	subi	r20, 0xFF	; 255
    558e:	c9 01       	movw	r24, r18
    5590:	88 0f       	add	r24, r24
    5592:	99 1f       	adc	r25, r25
    5594:	88 0f       	add	r24, r24
    5596:	99 1f       	adc	r25, r25
    5598:	82 0f       	add	r24, r18
    559a:	93 1f       	adc	r25, r19
    559c:	fc 01       	movw	r30, r24
    559e:	e5 59       	subi	r30, 0x95	; 149
    55a0:	fd 4f       	sbci	r31, 0xFD	; 253
    55a2:	40 83       	st	Z, r20
    55a4:	2f c0       	rjmp	.+94     	; 0x5604 <MoveSnake+0x486>
			}
			else if(snakeArr[index].currentDirection == Left){
    55a6:	89 81       	ldd	r24, Y+1	; 0x01
    55a8:	28 2f       	mov	r18, r24
    55aa:	33 27       	eor	r19, r19
    55ac:	27 fd       	sbrc	r18, 7
    55ae:	30 95       	com	r19
    55b0:	c9 01       	movw	r24, r18
    55b2:	88 0f       	add	r24, r24
    55b4:	99 1f       	adc	r25, r25
    55b6:	88 0f       	add	r24, r24
    55b8:	99 1f       	adc	r25, r25
    55ba:	82 0f       	add	r24, r18
    55bc:	93 1f       	adc	r25, r19
    55be:	fc 01       	movw	r30, r24
    55c0:	e8 59       	subi	r30, 0x98	; 152
    55c2:	fd 4f       	sbci	r31, 0xFD	; 253
    55c4:	80 81       	ld	r24, Z
    55c6:	81 30       	cpi	r24, 0x01	; 1
    55c8:	e9 f4       	brne	.+58     	; 0x5604 <MoveSnake+0x486>
				snakeArr[index].posY--;
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	28 2f       	mov	r18, r24
    55ce:	33 27       	eor	r19, r19
    55d0:	27 fd       	sbrc	r18, 7
    55d2:	30 95       	com	r19
    55d4:	c9 01       	movw	r24, r18
    55d6:	88 0f       	add	r24, r24
    55d8:	99 1f       	adc	r25, r25
    55da:	88 0f       	add	r24, r24
    55dc:	99 1f       	adc	r25, r25
    55de:	82 0f       	add	r24, r18
    55e0:	93 1f       	adc	r25, r19
    55e2:	fc 01       	movw	r30, r24
    55e4:	e5 59       	subi	r30, 0x95	; 149
    55e6:	fd 4f       	sbci	r31, 0xFD	; 253
    55e8:	80 81       	ld	r24, Z
    55ea:	48 2f       	mov	r20, r24
    55ec:	41 50       	subi	r20, 0x01	; 1
    55ee:	c9 01       	movw	r24, r18
    55f0:	88 0f       	add	r24, r24
    55f2:	99 1f       	adc	r25, r25
    55f4:	88 0f       	add	r24, r24
    55f6:	99 1f       	adc	r25, r25
    55f8:	82 0f       	add	r24, r18
    55fa:	93 1f       	adc	r25, r19
    55fc:	fc 01       	movw	r30, r24
    55fe:	e5 59       	subi	r30, 0x95	; 149
    5600:	fd 4f       	sbci	r31, 0xFD	; 253
    5602:	40 83       	st	Z, r20
			}
			snakeArr[index].shape = snakeArr[index].currentDirection;
    5604:	89 81       	ldd	r24, Y+1	; 0x01
    5606:	48 2f       	mov	r20, r24
    5608:	55 27       	eor	r21, r21
    560a:	47 fd       	sbrc	r20, 7
    560c:	50 95       	com	r21
    560e:	89 81       	ldd	r24, Y+1	; 0x01
    5610:	28 2f       	mov	r18, r24
    5612:	33 27       	eor	r19, r19
    5614:	27 fd       	sbrc	r18, 7
    5616:	30 95       	com	r19
    5618:	c9 01       	movw	r24, r18
    561a:	88 0f       	add	r24, r24
    561c:	99 1f       	adc	r25, r25
    561e:	88 0f       	add	r24, r24
    5620:	99 1f       	adc	r25, r25
    5622:	82 0f       	add	r24, r18
    5624:	93 1f       	adc	r25, r19
    5626:	fc 01       	movw	r30, r24
    5628:	e8 59       	subi	r30, 0x98	; 152
    562a:	fd 4f       	sbci	r31, 0xFD	; 253
    562c:	20 81       	ld	r18, Z
    562e:	ca 01       	movw	r24, r20
    5630:	88 0f       	add	r24, r24
    5632:	99 1f       	adc	r25, r25
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	84 0f       	add	r24, r20
    563a:	95 1f       	adc	r25, r21
    563c:	fc 01       	movw	r30, r24
    563e:	e4 59       	subi	r30, 0x94	; 148
    5640:	fd 4f       	sbci	r31, 0xFD	; 253
    5642:	20 83       	st	Z, r18
		}
		if(snakeArr[index].posX > 3){
    5644:	89 81       	ldd	r24, Y+1	; 0x01
    5646:	28 2f       	mov	r18, r24
    5648:	33 27       	eor	r19, r19
    564a:	27 fd       	sbrc	r18, 7
    564c:	30 95       	com	r19
    564e:	c9 01       	movw	r24, r18
    5650:	88 0f       	add	r24, r24
    5652:	99 1f       	adc	r25, r25
    5654:	88 0f       	add	r24, r24
    5656:	99 1f       	adc	r25, r25
    5658:	82 0f       	add	r24, r18
    565a:	93 1f       	adc	r25, r19
    565c:	fc 01       	movw	r30, r24
    565e:	e6 59       	subi	r30, 0x96	; 150
    5660:	fd 4f       	sbci	r31, 0xFD	; 253
    5662:	80 81       	ld	r24, Z
    5664:	84 30       	cpi	r24, 0x04	; 4
    5666:	8c f0       	brlt	.+34     	; 0x568a <MoveSnake+0x50c>
			snakeArr[index].posX = 0;
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	28 2f       	mov	r18, r24
    566c:	33 27       	eor	r19, r19
    566e:	27 fd       	sbrc	r18, 7
    5670:	30 95       	com	r19
    5672:	c9 01       	movw	r24, r18
    5674:	88 0f       	add	r24, r24
    5676:	99 1f       	adc	r25, r25
    5678:	88 0f       	add	r24, r24
    567a:	99 1f       	adc	r25, r25
    567c:	82 0f       	add	r24, r18
    567e:	93 1f       	adc	r25, r19
    5680:	fc 01       	movw	r30, r24
    5682:	e6 59       	subi	r30, 0x96	; 150
    5684:	fd 4f       	sbci	r31, 0xFD	; 253
    5686:	10 82       	st	Z, r1
    5688:	23 c0       	rjmp	.+70     	; 0x56d0 <MoveSnake+0x552>
		}
		else if(snakeArr[index].posX < 0){
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	28 2f       	mov	r18, r24
    568e:	33 27       	eor	r19, r19
    5690:	27 fd       	sbrc	r18, 7
    5692:	30 95       	com	r19
    5694:	c9 01       	movw	r24, r18
    5696:	88 0f       	add	r24, r24
    5698:	99 1f       	adc	r25, r25
    569a:	88 0f       	add	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	82 0f       	add	r24, r18
    56a0:	93 1f       	adc	r25, r19
    56a2:	fc 01       	movw	r30, r24
    56a4:	e6 59       	subi	r30, 0x96	; 150
    56a6:	fd 4f       	sbci	r31, 0xFD	; 253
    56a8:	80 81       	ld	r24, Z
    56aa:	88 23       	and	r24, r24
    56ac:	8c f4       	brge	.+34     	; 0x56d0 <MoveSnake+0x552>
			snakeArr[index].posX = 3;
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	28 2f       	mov	r18, r24
    56b2:	33 27       	eor	r19, r19
    56b4:	27 fd       	sbrc	r18, 7
    56b6:	30 95       	com	r19
    56b8:	c9 01       	movw	r24, r18
    56ba:	88 0f       	add	r24, r24
    56bc:	99 1f       	adc	r25, r25
    56be:	88 0f       	add	r24, r24
    56c0:	99 1f       	adc	r25, r25
    56c2:	82 0f       	add	r24, r18
    56c4:	93 1f       	adc	r25, r19
    56c6:	fc 01       	movw	r30, r24
    56c8:	e6 59       	subi	r30, 0x96	; 150
    56ca:	fd 4f       	sbci	r31, 0xFD	; 253
    56cc:	83 e0       	ldi	r24, 0x03	; 3
    56ce:	80 83       	st	Z, r24
		}

		if(snakeArr[index].posY > 19){
    56d0:	89 81       	ldd	r24, Y+1	; 0x01
    56d2:	28 2f       	mov	r18, r24
    56d4:	33 27       	eor	r19, r19
    56d6:	27 fd       	sbrc	r18, 7
    56d8:	30 95       	com	r19
    56da:	c9 01       	movw	r24, r18
    56dc:	88 0f       	add	r24, r24
    56de:	99 1f       	adc	r25, r25
    56e0:	88 0f       	add	r24, r24
    56e2:	99 1f       	adc	r25, r25
    56e4:	82 0f       	add	r24, r18
    56e6:	93 1f       	adc	r25, r19
    56e8:	fc 01       	movw	r30, r24
    56ea:	e5 59       	subi	r30, 0x95	; 149
    56ec:	fd 4f       	sbci	r31, 0xFD	; 253
    56ee:	80 81       	ld	r24, Z
    56f0:	84 31       	cpi	r24, 0x14	; 20
    56f2:	8c f0       	brlt	.+34     	; 0x5716 <MoveSnake+0x598>
			snakeArr[index].posY = 0;
    56f4:	89 81       	ldd	r24, Y+1	; 0x01
    56f6:	28 2f       	mov	r18, r24
    56f8:	33 27       	eor	r19, r19
    56fa:	27 fd       	sbrc	r18, 7
    56fc:	30 95       	com	r19
    56fe:	c9 01       	movw	r24, r18
    5700:	88 0f       	add	r24, r24
    5702:	99 1f       	adc	r25, r25
    5704:	88 0f       	add	r24, r24
    5706:	99 1f       	adc	r25, r25
    5708:	82 0f       	add	r24, r18
    570a:	93 1f       	adc	r25, r19
    570c:	fc 01       	movw	r30, r24
    570e:	e5 59       	subi	r30, 0x95	; 149
    5710:	fd 4f       	sbci	r31, 0xFD	; 253
    5712:	10 82       	st	Z, r1
    5714:	23 c0       	rjmp	.+70     	; 0x575c <MoveSnake+0x5de>
		}
		else if(snakeArr[index].posY < 0){
    5716:	89 81       	ldd	r24, Y+1	; 0x01
    5718:	28 2f       	mov	r18, r24
    571a:	33 27       	eor	r19, r19
    571c:	27 fd       	sbrc	r18, 7
    571e:	30 95       	com	r19
    5720:	c9 01       	movw	r24, r18
    5722:	88 0f       	add	r24, r24
    5724:	99 1f       	adc	r25, r25
    5726:	88 0f       	add	r24, r24
    5728:	99 1f       	adc	r25, r25
    572a:	82 0f       	add	r24, r18
    572c:	93 1f       	adc	r25, r19
    572e:	fc 01       	movw	r30, r24
    5730:	e5 59       	subi	r30, 0x95	; 149
    5732:	fd 4f       	sbci	r31, 0xFD	; 253
    5734:	80 81       	ld	r24, Z
    5736:	88 23       	and	r24, r24
    5738:	8c f4       	brge	.+34     	; 0x575c <MoveSnake+0x5de>
			snakeArr[index].posY = 19;
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	28 2f       	mov	r18, r24
    573e:	33 27       	eor	r19, r19
    5740:	27 fd       	sbrc	r18, 7
    5742:	30 95       	com	r19
    5744:	c9 01       	movw	r24, r18
    5746:	88 0f       	add	r24, r24
    5748:	99 1f       	adc	r25, r25
    574a:	88 0f       	add	r24, r24
    574c:	99 1f       	adc	r25, r25
    574e:	82 0f       	add	r24, r18
    5750:	93 1f       	adc	r25, r19
    5752:	fc 01       	movw	r30, r24
    5754:	e5 59       	subi	r30, 0x95	; 149
    5756:	fd 4f       	sbci	r31, 0xFD	; 253
    5758:	83 e1       	ldi	r24, 0x13	; 19
    575a:	80 83       	st	Z, r24
		}

		LCD_voidGoToPosition(snakeArr[index].posX,snakeArr[index].posY);
    575c:	89 81       	ldd	r24, Y+1	; 0x01
    575e:	28 2f       	mov	r18, r24
    5760:	33 27       	eor	r19, r19
    5762:	27 fd       	sbrc	r18, 7
    5764:	30 95       	com	r19
    5766:	c9 01       	movw	r24, r18
    5768:	88 0f       	add	r24, r24
    576a:	99 1f       	adc	r25, r25
    576c:	88 0f       	add	r24, r24
    576e:	99 1f       	adc	r25, r25
    5770:	82 0f       	add	r24, r18
    5772:	93 1f       	adc	r25, r19
    5774:	fc 01       	movw	r30, r24
    5776:	e6 59       	subi	r30, 0x96	; 150
    5778:	fd 4f       	sbci	r31, 0xFD	; 253
    577a:	80 81       	ld	r24, Z
    577c:	48 2f       	mov	r20, r24
    577e:	89 81       	ldd	r24, Y+1	; 0x01
    5780:	28 2f       	mov	r18, r24
    5782:	33 27       	eor	r19, r19
    5784:	27 fd       	sbrc	r18, 7
    5786:	30 95       	com	r19
    5788:	c9 01       	movw	r24, r18
    578a:	88 0f       	add	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	88 0f       	add	r24, r24
    5790:	99 1f       	adc	r25, r25
    5792:	82 0f       	add	r24, r18
    5794:	93 1f       	adc	r25, r19
    5796:	fc 01       	movw	r30, r24
    5798:	e5 59       	subi	r30, 0x95	; 149
    579a:	fd 4f       	sbci	r31, 0xFD	; 253
    579c:	80 81       	ld	r24, Z
    579e:	98 2f       	mov	r25, r24
    57a0:	84 2f       	mov	r24, r20
    57a2:	69 2f       	mov	r22, r25
    57a4:	0e 94 30 23 	call	0x4660	; 0x4660 <LCD_voidGoToPosition>
		LCD_voidWriteChar(snakeArr[index].shape);
    57a8:	89 81       	ldd	r24, Y+1	; 0x01
    57aa:	28 2f       	mov	r18, r24
    57ac:	33 27       	eor	r19, r19
    57ae:	27 fd       	sbrc	r18, 7
    57b0:	30 95       	com	r19
    57b2:	c9 01       	movw	r24, r18
    57b4:	88 0f       	add	r24, r24
    57b6:	99 1f       	adc	r25, r25
    57b8:	88 0f       	add	r24, r24
    57ba:	99 1f       	adc	r25, r25
    57bc:	82 0f       	add	r24, r18
    57be:	93 1f       	adc	r25, r19
    57c0:	fc 01       	movw	r30, r24
    57c2:	e4 59       	subi	r30, 0x94	; 148
    57c4:	fd 4f       	sbci	r31, 0xFD	; 253
    57c6:	80 81       	ld	r24, Z
    57c8:	0e 94 7e 20 	call	0x40fc	; 0x40fc <LCD_voidWriteChar>
		index--;
    57cc:	89 81       	ldd	r24, Y+1	; 0x01
    57ce:	81 50       	subi	r24, 0x01	; 1
    57d0:	89 83       	std	Y+1, r24	; 0x01

void MoveSnake(){
	s8 index = 0;
	index = currentSize - 1;
	posArr[snakeArr[index].posX][snakeArr[index].posY] = 0;
	while(index >= 0){
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	88 23       	and	r24, r24
    57d6:	0c f0       	brlt	.+2      	; 0x57da <MoveSnake+0x65c>
    57d8:	19 cd       	rjmp	.-1486   	; 0x520c <MoveSnake+0x8e>

		LCD_voidGoToPosition(snakeArr[index].posX,snakeArr[index].posY);
		LCD_voidWriteChar(snakeArr[index].shape);
		index--;
	}
}
    57da:	0f 90       	pop	r0
    57dc:	cf 91       	pop	r28
    57de:	df 91       	pop	r29
    57e0:	1f 91       	pop	r17
    57e2:	0f 91       	pop	r16
    57e4:	08 95       	ret

000057e6 <FindShape>:

u8 FindShape(u8 currentDir, u8 nextDir){
    57e6:	df 93       	push	r29
    57e8:	cf 93       	push	r28
    57ea:	00 d0       	rcall	.+0      	; 0x57ec <FindShape+0x6>
    57ec:	00 d0       	rcall	.+0      	; 0x57ee <FindShape+0x8>
    57ee:	0f 92       	push	r0
    57f0:	cd b7       	in	r28, 0x3d	; 61
    57f2:	de b7       	in	r29, 0x3e	; 62
    57f4:	8a 83       	std	Y+2, r24	; 0x02
    57f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 index = 0;
    57f8:	19 82       	std	Y+1, r1	; 0x01
	switch(currentDir){
    57fa:	8a 81       	ldd	r24, Y+2	; 0x02
    57fc:	28 2f       	mov	r18, r24
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	3d 83       	std	Y+5, r19	; 0x05
    5802:	2c 83       	std	Y+4, r18	; 0x04
    5804:	8c 81       	ldd	r24, Y+4	; 0x04
    5806:	9d 81       	ldd	r25, Y+5	; 0x05
    5808:	81 30       	cpi	r24, 0x01	; 1
    580a:	91 05       	cpc	r25, r1
    580c:	39 f1       	breq	.+78     	; 0x585c <FindShape+0x76>
    580e:	2c 81       	ldd	r18, Y+4	; 0x04
    5810:	3d 81       	ldd	r19, Y+5	; 0x05
    5812:	22 30       	cpi	r18, 0x02	; 2
    5814:	31 05       	cpc	r19, r1
    5816:	2c f4       	brge	.+10     	; 0x5822 <FindShape+0x3c>
    5818:	8c 81       	ldd	r24, Y+4	; 0x04
    581a:	9d 81       	ldd	r25, Y+5	; 0x05
    581c:	00 97       	sbiw	r24, 0x00	; 0
    581e:	61 f0       	breq	.+24     	; 0x5838 <FindShape+0x52>
    5820:	4c c0       	rjmp	.+152    	; 0x58ba <FindShape+0xd4>
    5822:	2c 81       	ldd	r18, Y+4	; 0x04
    5824:	3d 81       	ldd	r19, Y+5	; 0x05
    5826:	22 30       	cpi	r18, 0x02	; 2
    5828:	31 05       	cpc	r19, r1
    582a:	51 f1       	breq	.+84     	; 0x5880 <FindShape+0x9a>
    582c:	8c 81       	ldd	r24, Y+4	; 0x04
    582e:	9d 81       	ldd	r25, Y+5	; 0x05
    5830:	83 30       	cpi	r24, 0x03	; 3
    5832:	91 05       	cpc	r25, r1
    5834:	a1 f1       	breq	.+104    	; 0x589e <FindShape+0xb8>
    5836:	41 c0       	rjmp	.+130    	; 0x58ba <FindShape+0xd4>
	case Right:
		if(nextDir == Right){
    5838:	8b 81       	ldd	r24, Y+3	; 0x03
    583a:	88 23       	and	r24, r24
    583c:	19 f4       	brne	.+6      	; 0x5844 <FindShape+0x5e>
			index = RightLeft;
    583e:	84 e0       	ldi	r24, 0x04	; 4
    5840:	89 83       	std	Y+1, r24	; 0x01
    5842:	3b c0       	rjmp	.+118    	; 0x58ba <FindShape+0xd4>
		}
		else if(nextDir == Up){
    5844:	8b 81       	ldd	r24, Y+3	; 0x03
    5846:	82 30       	cpi	r24, 0x02	; 2
    5848:	19 f4       	brne	.+6      	; 0x5850 <FindShape+0x6a>
			index = RightLeft_Up;
    584a:	87 e0       	ldi	r24, 0x07	; 7
    584c:	89 83       	std	Y+1, r24	; 0x01
    584e:	35 c0       	rjmp	.+106    	; 0x58ba <FindShape+0xd4>
		}
		else if(nextDir == Down){
    5850:	8b 81       	ldd	r24, Y+3	; 0x03
    5852:	83 30       	cpi	r24, 0x03	; 3
    5854:	91 f5       	brne	.+100    	; 0x58ba <FindShape+0xd4>
			index =  RightLeft_Down;
    5856:	86 e0       	ldi	r24, 0x06	; 6
    5858:	89 83       	std	Y+1, r24	; 0x01
    585a:	2f c0       	rjmp	.+94     	; 0x58ba <FindShape+0xd4>
		}
		break;
	case Left:
		if(nextDir == Left){
    585c:	8b 81       	ldd	r24, Y+3	; 0x03
    585e:	81 30       	cpi	r24, 0x01	; 1
    5860:	19 f4       	brne	.+6      	; 0x5868 <FindShape+0x82>
			index = RightLeft;
    5862:	84 e0       	ldi	r24, 0x04	; 4
    5864:	89 83       	std	Y+1, r24	; 0x01
    5866:	29 c0       	rjmp	.+82     	; 0x58ba <FindShape+0xd4>
		}
		else if(nextDir == Up){
    5868:	8b 81       	ldd	r24, Y+3	; 0x03
    586a:	82 30       	cpi	r24, 0x02	; 2
    586c:	19 f4       	brne	.+6      	; 0x5874 <FindShape+0x8e>
			index = RightLeft_Up;
    586e:	87 e0       	ldi	r24, 0x07	; 7
    5870:	89 83       	std	Y+1, r24	; 0x01
    5872:	23 c0       	rjmp	.+70     	; 0x58ba <FindShape+0xd4>
		}
		else if(nextDir == Down){
    5874:	8b 81       	ldd	r24, Y+3	; 0x03
    5876:	83 30       	cpi	r24, 0x03	; 3
    5878:	01 f5       	brne	.+64     	; 0x58ba <FindShape+0xd4>
			index =  RightLeft_Down;
    587a:	86 e0       	ldi	r24, 0x06	; 6
    587c:	89 83       	std	Y+1, r24	; 0x01
    587e:	1d c0       	rjmp	.+58     	; 0x58ba <FindShape+0xd4>
		}
		break;
	case Up:
		if(nextDir == Right || nextDir == Left){
    5880:	8b 81       	ldd	r24, Y+3	; 0x03
    5882:	88 23       	and	r24, r24
    5884:	19 f0       	breq	.+6      	; 0x588c <FindShape+0xa6>
    5886:	8b 81       	ldd	r24, Y+3	; 0x03
    5888:	81 30       	cpi	r24, 0x01	; 1
    588a:	19 f4       	brne	.+6      	; 0x5892 <FindShape+0xac>
			index =  Up_RightLeft;
    588c:	86 e0       	ldi	r24, 0x06	; 6
    588e:	89 83       	std	Y+1, r24	; 0x01
    5890:	14 c0       	rjmp	.+40     	; 0x58ba <FindShape+0xd4>
		}
		else if(nextDir == Up){
    5892:	8b 81       	ldd	r24, Y+3	; 0x03
    5894:	82 30       	cpi	r24, 0x02	; 2
    5896:	89 f4       	brne	.+34     	; 0x58ba <FindShape+0xd4>
			index =  UpDown;
    5898:	85 e0       	ldi	r24, 0x05	; 5
    589a:	89 83       	std	Y+1, r24	; 0x01
    589c:	0e c0       	rjmp	.+28     	; 0x58ba <FindShape+0xd4>
		}
		break;
	case Down:
		if(nextDir == Right || nextDir == Left){
    589e:	8b 81       	ldd	r24, Y+3	; 0x03
    58a0:	88 23       	and	r24, r24
    58a2:	19 f0       	breq	.+6      	; 0x58aa <FindShape+0xc4>
    58a4:	8b 81       	ldd	r24, Y+3	; 0x03
    58a6:	81 30       	cpi	r24, 0x01	; 1
    58a8:	19 f4       	brne	.+6      	; 0x58b0 <FindShape+0xca>
			index =  Down_RightLeft;
    58aa:	87 e0       	ldi	r24, 0x07	; 7
    58ac:	89 83       	std	Y+1, r24	; 0x01
    58ae:	05 c0       	rjmp	.+10     	; 0x58ba <FindShape+0xd4>
		}
		else if(nextDir == Down){
    58b0:	8b 81       	ldd	r24, Y+3	; 0x03
    58b2:	83 30       	cpi	r24, 0x03	; 3
    58b4:	11 f4       	brne	.+4      	; 0x58ba <FindShape+0xd4>
			index =  UpDown;
    58b6:	85 e0       	ldi	r24, 0x05	; 5
    58b8:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return index;
    58ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    58bc:	0f 90       	pop	r0
    58be:	0f 90       	pop	r0
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	0f 90       	pop	r0
    58c6:	cf 91       	pop	r28
    58c8:	df 91       	pop	r29
    58ca:	08 95       	ret

000058cc <ResetPositionArr>:

void ResetPositionArr(){
    58cc:	df 93       	push	r29
    58ce:	cf 93       	push	r28
    58d0:	00 d0       	rcall	.+0      	; 0x58d2 <ResetPositionArr+0x6>
    58d2:	cd b7       	in	r28, 0x3d	; 61
    58d4:	de b7       	in	r29, 0x3e	; 62
	u8 x= 0;
    58d6:	1a 82       	std	Y+2, r1	; 0x02
	u8 y =0;
    58d8:	19 82       	std	Y+1, r1	; 0x01
	for(x =0; x < 4; x++){
    58da:	1a 82       	std	Y+2, r1	; 0x02
    58dc:	23 c0       	rjmp	.+70     	; 0x5924 <ResetPositionArr+0x58>
		for(y=0; y < 20; y++){
    58de:	19 82       	std	Y+1, r1	; 0x01
    58e0:	1b c0       	rjmp	.+54     	; 0x5918 <ResetPositionArr+0x4c>
			posArr[x][y] = 0;
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	28 2f       	mov	r18, r24
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	48 2f       	mov	r20, r24
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	c9 01       	movw	r24, r18
    58f0:	88 0f       	add	r24, r24
    58f2:	99 1f       	adc	r25, r25
    58f4:	88 0f       	add	r24, r24
    58f6:	99 1f       	adc	r25, r25
    58f8:	9c 01       	movw	r18, r24
    58fa:	22 0f       	add	r18, r18
    58fc:	33 1f       	adc	r19, r19
    58fe:	22 0f       	add	r18, r18
    5900:	33 1f       	adc	r19, r19
    5902:	82 0f       	add	r24, r18
    5904:	93 1f       	adc	r25, r19
    5906:	84 0f       	add	r24, r20
    5908:	95 1f       	adc	r25, r21
    590a:	fc 01       	movw	r30, r24
    590c:	e8 5e       	subi	r30, 0xE8	; 232
    590e:	fd 4f       	sbci	r31, 0xFD	; 253
    5910:	10 82       	st	Z, r1

void ResetPositionArr(){
	u8 x= 0;
	u8 y =0;
	for(x =0; x < 4; x++){
		for(y=0; y < 20; y++){
    5912:	89 81       	ldd	r24, Y+1	; 0x01
    5914:	8f 5f       	subi	r24, 0xFF	; 255
    5916:	89 83       	std	Y+1, r24	; 0x01
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	84 31       	cpi	r24, 0x14	; 20
    591c:	10 f3       	brcs	.-60     	; 0x58e2 <ResetPositionArr+0x16>
}

void ResetPositionArr(){
	u8 x= 0;
	u8 y =0;
	for(x =0; x < 4; x++){
    591e:	8a 81       	ldd	r24, Y+2	; 0x02
    5920:	8f 5f       	subi	r24, 0xFF	; 255
    5922:	8a 83       	std	Y+2, r24	; 0x02
    5924:	8a 81       	ldd	r24, Y+2	; 0x02
    5926:	84 30       	cpi	r24, 0x04	; 4
    5928:	d0 f2       	brcs	.-76     	; 0x58de <ResetPositionArr+0x12>
		for(y=0; y < 20; y++){
			posArr[x][y] = 0;
		}
	}
}
    592a:	0f 90       	pop	r0
    592c:	0f 90       	pop	r0
    592e:	cf 91       	pop	r28
    5930:	df 91       	pop	r29
    5932:	08 95       	ret

00005934 <SpawnFood>:

void SpawnFood(){
    5934:	df 93       	push	r29
    5936:	cf 93       	push	r28
    5938:	00 d0       	rcall	.+0      	; 0x593a <SpawnFood+0x6>
    593a:	cd b7       	in	r28, 0x3d	; 61
    593c:	de b7       	in	r29, 0x3e	; 62
	u8 oldfoodX = foodX;
    593e:	80 91 15 02 	lds	r24, 0x0215
    5942:	8a 83       	std	Y+2, r24	; 0x02
	u8 oldfoodY = foodY;
    5944:	80 91 16 02 	lds	r24, 0x0216
    5948:	89 83       	std	Y+1, r24	; 0x01
    594a:	0c c0       	rjmp	.+24     	; 0x5964 <SpawnFood+0x30>
	while(oldfoodX == foodX && oldfoodY == foodY){
		foodX = Random(0,3);
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	63 e0       	ldi	r22, 0x03	; 3
    5950:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <Random>
    5954:	80 93 15 02 	sts	0x0215, r24
		foodY = Random(0,19);
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	63 e1       	ldi	r22, 0x13	; 19
    595c:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <Random>
    5960:	80 93 16 02 	sts	0x0216, r24
}

void SpawnFood(){
	u8 oldfoodX = foodX;
	u8 oldfoodY = foodY;
	while(oldfoodX == foodX && oldfoodY == foodY){
    5964:	90 91 15 02 	lds	r25, 0x0215
    5968:	8a 81       	ldd	r24, Y+2	; 0x02
    596a:	89 17       	cp	r24, r25
    596c:	29 f4       	brne	.+10     	; 0x5978 <SpawnFood+0x44>
    596e:	90 91 16 02 	lds	r25, 0x0216
    5972:	89 81       	ldd	r24, Y+1	; 0x01
    5974:	89 17       	cp	r24, r25
    5976:	51 f3       	breq	.-44     	; 0x594c <SpawnFood+0x18>
		foodX = Random(0,3);
		foodY = Random(0,19);
	}
}
    5978:	0f 90       	pop	r0
    597a:	0f 90       	pop	r0
    597c:	cf 91       	pop	r28
    597e:	df 91       	pop	r29
    5980:	08 95       	ret

00005982 <UpdateSize>:

void UpdateSize(){
    5982:	df 93       	push	r29
    5984:	cf 93       	push	r28
    5986:	cd b7       	in	r28, 0x3d	; 61
    5988:	de b7       	in	r29, 0x3e	; 62
	if(snakeArr[0].posX == foodX && snakeArr[0].posY == foodY){
    598a:	80 91 6a 02 	lds	r24, 0x026A
    598e:	28 2f       	mov	r18, r24
    5990:	33 27       	eor	r19, r19
    5992:	27 fd       	sbrc	r18, 7
    5994:	30 95       	com	r19
    5996:	80 91 15 02 	lds	r24, 0x0215
    599a:	88 2f       	mov	r24, r24
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	28 17       	cp	r18, r24
    59a0:	39 07       	cpc	r19, r25
    59a2:	a1 f4       	brne	.+40     	; 0x59cc <UpdateSize+0x4a>
    59a4:	80 91 6b 02 	lds	r24, 0x026B
    59a8:	28 2f       	mov	r18, r24
    59aa:	33 27       	eor	r19, r19
    59ac:	27 fd       	sbrc	r18, 7
    59ae:	30 95       	com	r19
    59b0:	80 91 16 02 	lds	r24, 0x0216
    59b4:	88 2f       	mov	r24, r24
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	28 17       	cp	r18, r24
    59ba:	39 07       	cpc	r19, r25
    59bc:	39 f4       	brne	.+14     	; 0x59cc <UpdateSize+0x4a>
		currentSize++;
    59be:	80 91 8d 01 	lds	r24, 0x018D
    59c2:	8f 5f       	subi	r24, 0xFF	; 255
    59c4:	80 93 8d 01 	sts	0x018D, r24
		foodAvailable = 0;
    59c8:	10 92 17 02 	sts	0x0217, r1
	}
}
    59cc:	cf 91       	pop	r28
    59ce:	df 91       	pop	r29
    59d0:	08 95       	ret

000059d2 <Random>:

u8 Random(u8 lower, u8 upper){
    59d2:	df 93       	push	r29
    59d4:	cf 93       	push	r28
    59d6:	00 d0       	rcall	.+0      	; 0x59d8 <Random+0x6>
    59d8:	0f 92       	push	r0
    59da:	cd b7       	in	r28, 0x3d	; 61
    59dc:	de b7       	in	r29, 0x3e	; 62
    59de:	8a 83       	std	Y+2, r24	; 0x02
    59e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 num = (rand() %  (upper - lower + 1)) + lower;
    59e2:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <rand>
    59e6:	ac 01       	movw	r20, r24
    59e8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ea:	28 2f       	mov	r18, r24
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	8a 81       	ldd	r24, Y+2	; 0x02
    59f0:	88 2f       	mov	r24, r24
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	b9 01       	movw	r22, r18
    59f6:	68 1b       	sub	r22, r24
    59f8:	79 0b       	sbc	r23, r25
    59fa:	cb 01       	movw	r24, r22
    59fc:	9c 01       	movw	r18, r24
    59fe:	2f 5f       	subi	r18, 0xFF	; 255
    5a00:	3f 4f       	sbci	r19, 0xFF	; 255
    5a02:	ca 01       	movw	r24, r20
    5a04:	b9 01       	movw	r22, r18
    5a06:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <__divmodhi4>
    5a0a:	98 2f       	mov	r25, r24
    5a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a0e:	89 0f       	add	r24, r25
    5a10:	89 83       	std	Y+1, r24	; 0x01
	return num;
    5a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a14:	0f 90       	pop	r0
    5a16:	0f 90       	pop	r0
    5a18:	0f 90       	pop	r0
    5a1a:	cf 91       	pop	r28
    5a1c:	df 91       	pop	r29
    5a1e:	08 95       	ret

00005a20 <__mulsi3>:
    5a20:	62 9f       	mul	r22, r18
    5a22:	d0 01       	movw	r26, r0
    5a24:	73 9f       	mul	r23, r19
    5a26:	f0 01       	movw	r30, r0
    5a28:	82 9f       	mul	r24, r18
    5a2a:	e0 0d       	add	r30, r0
    5a2c:	f1 1d       	adc	r31, r1
    5a2e:	64 9f       	mul	r22, r20
    5a30:	e0 0d       	add	r30, r0
    5a32:	f1 1d       	adc	r31, r1
    5a34:	92 9f       	mul	r25, r18
    5a36:	f0 0d       	add	r31, r0
    5a38:	83 9f       	mul	r24, r19
    5a3a:	f0 0d       	add	r31, r0
    5a3c:	74 9f       	mul	r23, r20
    5a3e:	f0 0d       	add	r31, r0
    5a40:	65 9f       	mul	r22, r21
    5a42:	f0 0d       	add	r31, r0
    5a44:	99 27       	eor	r25, r25
    5a46:	72 9f       	mul	r23, r18
    5a48:	b0 0d       	add	r27, r0
    5a4a:	e1 1d       	adc	r30, r1
    5a4c:	f9 1f       	adc	r31, r25
    5a4e:	63 9f       	mul	r22, r19
    5a50:	b0 0d       	add	r27, r0
    5a52:	e1 1d       	adc	r30, r1
    5a54:	f9 1f       	adc	r31, r25
    5a56:	bd 01       	movw	r22, r26
    5a58:	cf 01       	movw	r24, r30
    5a5a:	11 24       	eor	r1, r1
    5a5c:	08 95       	ret

00005a5e <__divmodqi4>:
    5a5e:	87 fb       	bst	r24, 7
    5a60:	08 2e       	mov	r0, r24
    5a62:	06 26       	eor	r0, r22
    5a64:	87 fd       	sbrc	r24, 7
    5a66:	81 95       	neg	r24
    5a68:	67 fd       	sbrc	r22, 7
    5a6a:	61 95       	neg	r22
    5a6c:	33 d0       	rcall	.+102    	; 0x5ad4 <__udivmodqi4>
    5a6e:	0e f4       	brtc	.+2      	; 0x5a72 <__divmodqi4_1>
    5a70:	91 95       	neg	r25

00005a72 <__divmodqi4_1>:
    5a72:	07 fc       	sbrc	r0, 7
    5a74:	81 95       	neg	r24

00005a76 <__divmodqi4_exit>:
    5a76:	08 95       	ret

00005a78 <__divmodhi4>:
    5a78:	97 fb       	bst	r25, 7
    5a7a:	09 2e       	mov	r0, r25
    5a7c:	07 26       	eor	r0, r23
    5a7e:	0a d0       	rcall	.+20     	; 0x5a94 <__divmodhi4_neg1>
    5a80:	77 fd       	sbrc	r23, 7
    5a82:	04 d0       	rcall	.+8      	; 0x5a8c <__divmodhi4_neg2>
    5a84:	33 d0       	rcall	.+102    	; 0x5aec <__udivmodhi4>
    5a86:	06 d0       	rcall	.+12     	; 0x5a94 <__divmodhi4_neg1>
    5a88:	00 20       	and	r0, r0
    5a8a:	1a f4       	brpl	.+6      	; 0x5a92 <__divmodhi4_exit>

00005a8c <__divmodhi4_neg2>:
    5a8c:	70 95       	com	r23
    5a8e:	61 95       	neg	r22
    5a90:	7f 4f       	sbci	r23, 0xFF	; 255

00005a92 <__divmodhi4_exit>:
    5a92:	08 95       	ret

00005a94 <__divmodhi4_neg1>:
    5a94:	f6 f7       	brtc	.-4      	; 0x5a92 <__divmodhi4_exit>
    5a96:	90 95       	com	r25
    5a98:	81 95       	neg	r24
    5a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a9c:	08 95       	ret

00005a9e <__divmodsi4>:
    5a9e:	97 fb       	bst	r25, 7
    5aa0:	09 2e       	mov	r0, r25
    5aa2:	05 26       	eor	r0, r21
    5aa4:	0e d0       	rcall	.+28     	; 0x5ac2 <__divmodsi4_neg1>
    5aa6:	57 fd       	sbrc	r21, 7
    5aa8:	04 d0       	rcall	.+8      	; 0x5ab2 <__divmodsi4_neg2>
    5aaa:	34 d0       	rcall	.+104    	; 0x5b14 <__udivmodsi4>
    5aac:	0a d0       	rcall	.+20     	; 0x5ac2 <__divmodsi4_neg1>
    5aae:	00 1c       	adc	r0, r0
    5ab0:	38 f4       	brcc	.+14     	; 0x5ac0 <__divmodsi4_exit>

00005ab2 <__divmodsi4_neg2>:
    5ab2:	50 95       	com	r21
    5ab4:	40 95       	com	r20
    5ab6:	30 95       	com	r19
    5ab8:	21 95       	neg	r18
    5aba:	3f 4f       	sbci	r19, 0xFF	; 255
    5abc:	4f 4f       	sbci	r20, 0xFF	; 255
    5abe:	5f 4f       	sbci	r21, 0xFF	; 255

00005ac0 <__divmodsi4_exit>:
    5ac0:	08 95       	ret

00005ac2 <__divmodsi4_neg1>:
    5ac2:	f6 f7       	brtc	.-4      	; 0x5ac0 <__divmodsi4_exit>
    5ac4:	90 95       	com	r25
    5ac6:	80 95       	com	r24
    5ac8:	70 95       	com	r23
    5aca:	61 95       	neg	r22
    5acc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ace:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad2:	08 95       	ret

00005ad4 <__udivmodqi4>:
    5ad4:	99 1b       	sub	r25, r25
    5ad6:	79 e0       	ldi	r23, 0x09	; 9
    5ad8:	04 c0       	rjmp	.+8      	; 0x5ae2 <__udivmodqi4_ep>

00005ada <__udivmodqi4_loop>:
    5ada:	99 1f       	adc	r25, r25
    5adc:	96 17       	cp	r25, r22
    5ade:	08 f0       	brcs	.+2      	; 0x5ae2 <__udivmodqi4_ep>
    5ae0:	96 1b       	sub	r25, r22

00005ae2 <__udivmodqi4_ep>:
    5ae2:	88 1f       	adc	r24, r24
    5ae4:	7a 95       	dec	r23
    5ae6:	c9 f7       	brne	.-14     	; 0x5ada <__udivmodqi4_loop>
    5ae8:	80 95       	com	r24
    5aea:	08 95       	ret

00005aec <__udivmodhi4>:
    5aec:	aa 1b       	sub	r26, r26
    5aee:	bb 1b       	sub	r27, r27
    5af0:	51 e1       	ldi	r21, 0x11	; 17
    5af2:	07 c0       	rjmp	.+14     	; 0x5b02 <__udivmodhi4_ep>

00005af4 <__udivmodhi4_loop>:
    5af4:	aa 1f       	adc	r26, r26
    5af6:	bb 1f       	adc	r27, r27
    5af8:	a6 17       	cp	r26, r22
    5afa:	b7 07       	cpc	r27, r23
    5afc:	10 f0       	brcs	.+4      	; 0x5b02 <__udivmodhi4_ep>
    5afe:	a6 1b       	sub	r26, r22
    5b00:	b7 0b       	sbc	r27, r23

00005b02 <__udivmodhi4_ep>:
    5b02:	88 1f       	adc	r24, r24
    5b04:	99 1f       	adc	r25, r25
    5b06:	5a 95       	dec	r21
    5b08:	a9 f7       	brne	.-22     	; 0x5af4 <__udivmodhi4_loop>
    5b0a:	80 95       	com	r24
    5b0c:	90 95       	com	r25
    5b0e:	bc 01       	movw	r22, r24
    5b10:	cd 01       	movw	r24, r26
    5b12:	08 95       	ret

00005b14 <__udivmodsi4>:
    5b14:	a1 e2       	ldi	r26, 0x21	; 33
    5b16:	1a 2e       	mov	r1, r26
    5b18:	aa 1b       	sub	r26, r26
    5b1a:	bb 1b       	sub	r27, r27
    5b1c:	fd 01       	movw	r30, r26
    5b1e:	0d c0       	rjmp	.+26     	; 0x5b3a <__udivmodsi4_ep>

00005b20 <__udivmodsi4_loop>:
    5b20:	aa 1f       	adc	r26, r26
    5b22:	bb 1f       	adc	r27, r27
    5b24:	ee 1f       	adc	r30, r30
    5b26:	ff 1f       	adc	r31, r31
    5b28:	a2 17       	cp	r26, r18
    5b2a:	b3 07       	cpc	r27, r19
    5b2c:	e4 07       	cpc	r30, r20
    5b2e:	f5 07       	cpc	r31, r21
    5b30:	20 f0       	brcs	.+8      	; 0x5b3a <__udivmodsi4_ep>
    5b32:	a2 1b       	sub	r26, r18
    5b34:	b3 0b       	sbc	r27, r19
    5b36:	e4 0b       	sbc	r30, r20
    5b38:	f5 0b       	sbc	r31, r21

00005b3a <__udivmodsi4_ep>:
    5b3a:	66 1f       	adc	r22, r22
    5b3c:	77 1f       	adc	r23, r23
    5b3e:	88 1f       	adc	r24, r24
    5b40:	99 1f       	adc	r25, r25
    5b42:	1a 94       	dec	r1
    5b44:	69 f7       	brne	.-38     	; 0x5b20 <__udivmodsi4_loop>
    5b46:	60 95       	com	r22
    5b48:	70 95       	com	r23
    5b4a:	80 95       	com	r24
    5b4c:	90 95       	com	r25
    5b4e:	9b 01       	movw	r18, r22
    5b50:	ac 01       	movw	r20, r24
    5b52:	bd 01       	movw	r22, r26
    5b54:	cf 01       	movw	r24, r30
    5b56:	08 95       	ret

00005b58 <__prologue_saves__>:
    5b58:	2f 92       	push	r2
    5b5a:	3f 92       	push	r3
    5b5c:	4f 92       	push	r4
    5b5e:	5f 92       	push	r5
    5b60:	6f 92       	push	r6
    5b62:	7f 92       	push	r7
    5b64:	8f 92       	push	r8
    5b66:	9f 92       	push	r9
    5b68:	af 92       	push	r10
    5b6a:	bf 92       	push	r11
    5b6c:	cf 92       	push	r12
    5b6e:	df 92       	push	r13
    5b70:	ef 92       	push	r14
    5b72:	ff 92       	push	r15
    5b74:	0f 93       	push	r16
    5b76:	1f 93       	push	r17
    5b78:	cf 93       	push	r28
    5b7a:	df 93       	push	r29
    5b7c:	cd b7       	in	r28, 0x3d	; 61
    5b7e:	de b7       	in	r29, 0x3e	; 62
    5b80:	ca 1b       	sub	r28, r26
    5b82:	db 0b       	sbc	r29, r27
    5b84:	0f b6       	in	r0, 0x3f	; 63
    5b86:	f8 94       	cli
    5b88:	de bf       	out	0x3e, r29	; 62
    5b8a:	0f be       	out	0x3f, r0	; 63
    5b8c:	cd bf       	out	0x3d, r28	; 61
    5b8e:	09 94       	ijmp

00005b90 <__epilogue_restores__>:
    5b90:	2a 88       	ldd	r2, Y+18	; 0x12
    5b92:	39 88       	ldd	r3, Y+17	; 0x11
    5b94:	48 88       	ldd	r4, Y+16	; 0x10
    5b96:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b98:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ba0:	aa 84       	ldd	r10, Y+10	; 0x0a
    5ba2:	b9 84       	ldd	r11, Y+9	; 0x09
    5ba4:	c8 84       	ldd	r12, Y+8	; 0x08
    5ba6:	df 80       	ldd	r13, Y+7	; 0x07
    5ba8:	ee 80       	ldd	r14, Y+6	; 0x06
    5baa:	fd 80       	ldd	r15, Y+5	; 0x05
    5bac:	0c 81       	ldd	r16, Y+4	; 0x04
    5bae:	1b 81       	ldd	r17, Y+3	; 0x03
    5bb0:	aa 81       	ldd	r26, Y+2	; 0x02
    5bb2:	b9 81       	ldd	r27, Y+1	; 0x01
    5bb4:	ce 0f       	add	r28, r30
    5bb6:	d1 1d       	adc	r29, r1
    5bb8:	0f b6       	in	r0, 0x3f	; 63
    5bba:	f8 94       	cli
    5bbc:	de bf       	out	0x3e, r29	; 62
    5bbe:	0f be       	out	0x3f, r0	; 63
    5bc0:	cd bf       	out	0x3d, r28	; 61
    5bc2:	ed 01       	movw	r28, r26
    5bc4:	08 95       	ret

00005bc6 <do_rand>:
    5bc6:	a0 e0       	ldi	r26, 0x00	; 0
    5bc8:	b0 e0       	ldi	r27, 0x00	; 0
    5bca:	e9 ee       	ldi	r30, 0xE9	; 233
    5bcc:	fd e2       	ldi	r31, 0x2D	; 45
    5bce:	0c 94 b4 2d 	jmp	0x5b68	; 0x5b68 <__prologue_saves__+0x10>
    5bd2:	ec 01       	movw	r28, r24
    5bd4:	a8 80       	ld	r10, Y
    5bd6:	b9 80       	ldd	r11, Y+1	; 0x01
    5bd8:	ca 80       	ldd	r12, Y+2	; 0x02
    5bda:	db 80       	ldd	r13, Y+3	; 0x03
    5bdc:	a1 14       	cp	r10, r1
    5bde:	b1 04       	cpc	r11, r1
    5be0:	c1 04       	cpc	r12, r1
    5be2:	d1 04       	cpc	r13, r1
    5be4:	41 f4       	brne	.+16     	; 0x5bf6 <do_rand+0x30>
    5be6:	84 e2       	ldi	r24, 0x24	; 36
    5be8:	a8 2e       	mov	r10, r24
    5bea:	89 ed       	ldi	r24, 0xD9	; 217
    5bec:	b8 2e       	mov	r11, r24
    5bee:	8b e5       	ldi	r24, 0x5B	; 91
    5bf0:	c8 2e       	mov	r12, r24
    5bf2:	87 e0       	ldi	r24, 0x07	; 7
    5bf4:	d8 2e       	mov	r13, r24
    5bf6:	c6 01       	movw	r24, r12
    5bf8:	b5 01       	movw	r22, r10
    5bfa:	2d e1       	ldi	r18, 0x1D	; 29
    5bfc:	33 ef       	ldi	r19, 0xF3	; 243
    5bfe:	41 e0       	ldi	r20, 0x01	; 1
    5c00:	50 e0       	ldi	r21, 0x00	; 0
    5c02:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__divmodsi4>
    5c06:	27 ea       	ldi	r18, 0xA7	; 167
    5c08:	31 e4       	ldi	r19, 0x41	; 65
    5c0a:	40 e0       	ldi	r20, 0x00	; 0
    5c0c:	50 e0       	ldi	r21, 0x00	; 0
    5c0e:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsi3>
    5c12:	7b 01       	movw	r14, r22
    5c14:	8c 01       	movw	r16, r24
    5c16:	c6 01       	movw	r24, r12
    5c18:	b5 01       	movw	r22, r10
    5c1a:	2d e1       	ldi	r18, 0x1D	; 29
    5c1c:	33 ef       	ldi	r19, 0xF3	; 243
    5c1e:	41 e0       	ldi	r20, 0x01	; 1
    5c20:	50 e0       	ldi	r21, 0x00	; 0
    5c22:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__divmodsi4>
    5c26:	ca 01       	movw	r24, r20
    5c28:	b9 01       	movw	r22, r18
    5c2a:	2c ee       	ldi	r18, 0xEC	; 236
    5c2c:	34 ef       	ldi	r19, 0xF4	; 244
    5c2e:	4f ef       	ldi	r20, 0xFF	; 255
    5c30:	5f ef       	ldi	r21, 0xFF	; 255
    5c32:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <__mulsi3>
    5c36:	6e 0d       	add	r22, r14
    5c38:	7f 1d       	adc	r23, r15
    5c3a:	80 1f       	adc	r24, r16
    5c3c:	91 1f       	adc	r25, r17
    5c3e:	97 ff       	sbrs	r25, 7
    5c40:	04 c0       	rjmp	.+8      	; 0x5c4a <do_rand+0x84>
    5c42:	61 50       	subi	r22, 0x01	; 1
    5c44:	70 40       	sbci	r23, 0x00	; 0
    5c46:	80 40       	sbci	r24, 0x00	; 0
    5c48:	90 48       	sbci	r25, 0x80	; 128
    5c4a:	68 83       	st	Y, r22
    5c4c:	79 83       	std	Y+1, r23	; 0x01
    5c4e:	8a 83       	std	Y+2, r24	; 0x02
    5c50:	9b 83       	std	Y+3, r25	; 0x03
    5c52:	9b 01       	movw	r18, r22
    5c54:	3f 77       	andi	r19, 0x7F	; 127
    5c56:	c9 01       	movw	r24, r18
    5c58:	cd b7       	in	r28, 0x3d	; 61
    5c5a:	de b7       	in	r29, 0x3e	; 62
    5c5c:	ea e0       	ldi	r30, 0x0A	; 10
    5c5e:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__epilogue_restores__+0x10>

00005c62 <rand_r>:
    5c62:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <do_rand>
    5c66:	08 95       	ret

00005c68 <rand>:
    5c68:	8b e7       	ldi	r24, 0x7B	; 123
    5c6a:	91 e0       	ldi	r25, 0x01	; 1
    5c6c:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <do_rand>
    5c70:	08 95       	ret

00005c72 <srand>:
    5c72:	a0 e0       	ldi	r26, 0x00	; 0
    5c74:	b0 e0       	ldi	r27, 0x00	; 0
    5c76:	80 93 7b 01 	sts	0x017B, r24
    5c7a:	90 93 7c 01 	sts	0x017C, r25
    5c7e:	a0 93 7d 01 	sts	0x017D, r26
    5c82:	b0 93 7e 01 	sts	0x017E, r27
    5c86:	08 95       	ret

00005c88 <_exit>:
    5c88:	f8 94       	cli

00005c8a <__stop_program>:
    5c8a:	ff cf       	rjmp	.-2      	; 0x5c8a <__stop_program>
