
SnakeGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b2  00800060  00006226  000062ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e9  00800212  00800212  0000646c  2**0
                  ALLOC
  3 .stab         00004f98  00000000  00000000  0000646c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c04  00000000  00000000  0000b404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d39a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000121ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <main>
      8a:	0c 94 11 31 	jmp	0x6222	; 0x6222 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 30 	jmp	0x612a	; 0x612a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 30 	jmp	0x610a	; 0x610a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 30 	jmp	0x610a	; 0x610a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 30 	jmp	0x612a	; 0x612a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 30 	jmp	0x6102	; 0x6102 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 30 	jmp	0x613a	; 0x613a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 30 	jmp	0x610a	; 0x610a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 30 	jmp	0x610a	; 0x610a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 30 	jmp	0x610a	; 0x610a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 30 	jmp	0x6142	; 0x6142 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 89 30 	jmp	0x6112	; 0x6112 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a5 30 	jmp	0x614a	; 0x614a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 81 30 	jmp	0x6102	; 0x6102 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9d 30 	jmp	0x613a	; 0x613a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 58       	subi	r30, 0x85	; 133
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <I2C_Master_voidInit>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/I2C_Interface.h"

void I2C_Master_voidInit(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if I2C_PRESCALER == I2C_PRESCALER_1
	/*Set Prescaler Values*/
	CLR_BIT(TWSR, TWSR_TWPS0);
     e36:	a1 e2       	ldi	r26, 0x21	; 33
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e2       	ldi	r30, 0x21	; 33
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
     e44:	a1 e2       	ldi	r26, 0x21	; 33
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e2       	ldi	r30, 0x21	; 33
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24
	SET_BIT(TWSR, TWSR_TWPS0);
	SET_BIT(TWSR, TWSR_TWPS1);
#endif

	/*Set TWBR with the Value =>100KHZ*/
	TWBR = I2C_TWBR_VALUE;
     e52:	e0 e2       	ldi	r30, 0x20	; 32
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	88 e4       	ldi	r24, 0x48	; 72
     e58:	80 83       	st	Z, r24

	/*Enable  I2C*/
	SET_BIT(TWCR,TWCR_TWEN);
     e5a:	a6 e5       	ldi	r26, 0x56	; 86
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	8c 93       	st	X, r24
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <I2C_Slave_voidInit>:

void I2C_Slave_voidInit(u8 I2C_Address){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
	/*Set Slave Address iN TWAR*/
	TWAR = I2C_Address;
     e7a:	e2 e2       	ldi	r30, 0x22	; 34
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	Set_Bit(TWCR,TWCR_TWEA);
     e82:	a6 e5       	ldi	r26, 0x56	; 86
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e5       	ldi	r30, 0x56	; 86
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	8c 93       	st	X, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	Clear_Bit(TWCR,TWCR_TWEA);
#endif
	/*Enable I2C*/
	SET_BIT(TWCR, TWCR_TWEN);
     e90:	a6 e5       	ldi	r26, 0x56	; 86
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e6 e5       	ldi	r30, 0x56	; 86
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	8c 93       	st	X, r24
}
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <I2C_Master_enuSendStartCond>:

I2C_Error_State I2C_Master_enuSendStartCond(void){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
     eb0:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
     eb2:	e6 e5       	ldi	r30, 0x56	; 86
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	84 ee       	ldi	r24, 0xE4	; 228
     eb8:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
     eba:	e6 e5       	ldi	r30, 0x56	; 86
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 23       	and	r24, r24
     ec2:	dc f7       	brge	.-10     	; 0xeba <I2C_Master_enuSendStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckStart){
     ec4:	e1 e2       	ldi	r30, 0x21	; 33
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	88 2f       	mov	r24, r24
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	88 7f       	andi	r24, 0xF8	; 248
     ed0:	90 70       	andi	r25, 0x00	; 0
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	91 05       	cpc	r25, r1
     ed6:	11 f0       	breq	.+4      	; 0xedc <I2C_Master_enuSendStartCond+0x36>
		state = ErrorStartCondition;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State I2C_Master_enuSendRepeatedStartCond(void){
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
     ef0:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
     ef2:	e6 e5       	ldi	r30, 0x56	; 86
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	84 ee       	ldi	r24, 0xE4	; 228
     ef8:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif
	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
     efa:	e6 e5       	ldi	r30, 0x56	; 86
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	88 23       	and	r24, r24
     f02:	dc f7       	brge	.-10     	; 0xefa <I2C_Master_enuSendRepeatedStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckReStart){
     f04:	e1 e2       	ldi	r30, 0x21	; 33
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 7f       	andi	r24, 0xF8	; 248
     f10:	90 70       	andi	r25, 0x00	; 0
     f12:	80 31       	cpi	r24, 0x10	; 16
     f14:	91 05       	cpc	r25, r1
     f16:	11 f0       	breq	.+4      	; 0xf1c <I2C_Master_enuSendRepeatedStartCond+0x36>
		state = ErrorRestartCondition;
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <I2C_Master_enuSendSlaveAddressWithRead>:


I2C_Error_State I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address){
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <I2C_Master_enuSendSlaveAddressWithRead+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
     f32:	19 82       	std	Y+1, r1	; 0x01

	/*Load the slave address*/
	TWDR = I2C_Address;
     f34:	e3 e2       	ldi	r30, 0x23	; 35
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	80 83       	st	Z, r24
	/*Select the read mode*/
	SET_BIT(TWDR, 0);
     f3c:	a3 e2       	ldi	r26, 0x23	; 35
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e3 e2       	ldi	r30, 0x23	; 35
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	81 60       	ori	r24, 0x01	; 1
     f48:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
     f4a:	e6 e5       	ldi	r30, 0x56	; 86
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	84 ec       	ldi	r24, 0xC4	; 196
     f50:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
     f52:	e6 e5       	ldi	r30, 0x56	; 86
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 23       	and	r24, r24
     f5a:	dc f7       	brge	.-10     	; 0xf52 <I2C_Master_enuSendSlaveAddressWithRead+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithAck){
     f5c:	e1 e2       	ldi	r30, 0x21	; 33
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 7f       	andi	r24, 0xF8	; 248
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	80 34       	cpi	r24, 0x40	; 64
     f6c:	91 05       	cpc	r25, r1
     f6e:	11 f0       	breq	.+4      	; 0xf74 <I2C_Master_enuSendSlaveAddressWithRead+0x4e>
		state = ErrorSlaveAddressReadWithAck;
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithOutAck){
		state = ErrorSlaveAddressReadWithoutAck;
	}
#endif
	return state;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address){
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <I2C_Master_enuSendSlaveAddressWithWrite+0x6>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
     f8c:	19 82       	std	Y+1, r1	; 0x01
	/*Load the slave address*/
	TWDR = I2C_Address;
     f8e:	e3 e2       	ldi	r30, 0x23	; 35
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	80 83       	st	Z, r24

	/*Select the write mode*/
	CLR_BIT(TWDR, 0);
     f96:	a3 e2       	ldi	r26, 0x23	; 35
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e2       	ldi	r30, 0x23	; 35
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8e 7f       	andi	r24, 0xFE	; 254
     fa2:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
     fa4:	e6 e5       	ldi	r30, 0x56	; 86
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	84 ec       	ldi	r24, 0xC4	; 196
     faa:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
     fac:	e6 e5       	ldi	r30, 0x56	; 86
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	dc f7       	brge	.-10     	; 0xfac <I2C_Master_enuSendSlaveAddressWithWrite+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithAck){
     fb6:	e1 e2       	ldi	r30, 0x21	; 33
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	88 7f       	andi	r24, 0xF8	; 248
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	88 31       	cpi	r24, 0x18	; 24
     fc6:	91 05       	cpc	r25, r1
     fc8:	11 f0       	breq	.+4      	; 0xfce <I2C_Master_enuSendSlaveAddressWithWrite+0x4e>
		state = ErrorSlaveAddressWriteWithAck;
     fca:	83 e0       	ldi	r24, 0x03	; 3
     fcc:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithOutAck){
		state = ErrorSlaveAddressWriteWithoutAck;
	}
#endif
	return state;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <I2C_Master_enuSendu8Data>:


I2C_Error_State I2C_Master_enuSendu8Data(u8 I2C_Data){
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <I2C_Master_enuSendu8Data+0x6>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
     fe6:	19 82       	std	Y+1, r1	; 0x01

	/*Load the data*/
	TWDR = I2C_Data;
     fe8:	e3 e2       	ldi	r30, 0x23	; 35
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
     ff0:	e6 e5       	ldi	r30, 0x56	; 86
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	84 ec       	ldi	r24, 0xC4	; 196
     ff6:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 23       	and	r24, r24
    1000:	dc f7       	brge	.-10     	; 0xff8 <I2C_Master_enuSendu8Data+0x1e>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithAck){
    1002:	e1 e2       	ldi	r30, 0x21	; 33
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	88 7f       	andi	r24, 0xF8	; 248
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	88 32       	cpi	r24, 0x28	; 40
    1012:	91 05       	cpc	r25, r1
    1014:	11 f0       	breq	.+4      	; 0x101a <I2C_Master_enuSendu8Data+0x40>
		state = ErrorWriteDataWithAck;
    1016:	87 e0       	ldi	r24, 0x07	; 7
    1018:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithOutAck){
		state = ErrorWriteDataWithoutAck;
	}
#endif
	return state;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <I2C_Master_enuReadu8Data>:

I2C_Error_State I2C_Master_enuReadu8Data(u8* I2C_Data){
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <I2C_Master_enuReadu8Data+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <I2C_Master_enuReadu8Data+0x8>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9b 83       	std	Y+3, r25	; 0x03
    1034:	8a 83       	std	Y+2, r24	; 0x02
	if(I2C_Data != NULL){
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	f9 f0       	breq	.+62     	; 0x107c <I2C_Master_enuReadu8Data+0x56>
		I2C_Error_State state = NoError;
    103e:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
		/*Enable  ACK*/
		TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 ec       	ldi	r24, 0xC4	; 196
    1046:	80 83       	st	Z, r24
		/*Disable  ACK*/
		TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

		/*Wait for the flag*/
		while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <I2C_Master_enuReadu8Data+0x22>

		/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithAck){
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	88 7f       	andi	r24, 0xF8	; 248
    105e:	90 70       	andi	r25, 0x00	; 0
    1060:	80 35       	cpi	r24, 0x50	; 80
    1062:	91 05       	cpc	r25, r1
    1064:	11 f0       	breq	.+4      	; 0x106a <I2C_Master_enuReadu8Data+0x44>
			state = ErrorReadDataWithAck;
    1066:	89 e0       	ldi	r24, 0x09	; 9
    1068:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
			state = ErrorReadDataWithoutAck;
		}
#endif
		*I2C_Data = TWDR;
    106a:	e3 e2       	ldi	r30, 0x23	; 35
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	ea 81       	ldd	r30, Y+2	; 0x02
    1072:	fb 81       	ldd	r31, Y+3	; 0x03
    1074:	80 83       	st	Z, r24
		return state;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	8c 83       	std	Y+4, r24	; 0x04
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <I2C_Master_enuReadu8Data+0x5a>
	}

	return -1;
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	8c 83       	std	Y+4, r24	; 0x04
    1080:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <I2C_Master_voidFlush>:
I2C_Error_State I2C_Master_voidFlush(){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    109a:	19 82       	std	Y+1, r1	; 0x01

	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    109c:	e6 e5       	ldi	r30, 0x56	; 86
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	84 e8       	ldi	r24, 0x84	; 132
    10a2:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 23       	and	r24, r24
    10ac:	dc f7       	brge	.-10     	; 0x10a4 <I2C_Master_voidFlush+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
    10ae:	e1 e2       	ldi	r30, 0x21	; 33
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	88 7f       	andi	r24, 0xF8	; 248
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	88 35       	cpi	r24, 0x58	; 88
    10be:	91 05       	cpc	r25, r1
    10c0:	11 f0       	breq	.+4      	; 0x10c6 <I2C_Master_voidFlush+0x36>
		state = ErrorReadDataWithoutAck;
    10c2:	8a e0       	ldi	r24, 0x0A	; 10
    10c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <I2C_Master_enuSendStopCond>:

void I2C_Master_enuSendStopCond(void){
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWCR_TWSTO)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    10d8:	e6 e5       	ldi	r30, 0x56	; 86
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	84 e9       	ldi	r24, 0x94	; 148
    10de:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWSTO) == 1);
    10e0:	e6 e5       	ldi	r30, 0x56	; 86
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	82 95       	swap	r24
    10e8:	8f 70       	andi	r24, 0x0F	; 15
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	90 70       	andi	r25, 0x00	; 0
    10f2:	88 23       	and	r24, r24
    10f4:	a9 f7       	brne	.-22     	; 0x10e0 <I2C_Master_enuSendStopCond+0x10>

}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <I2C_Slave_enuReadu8Data>:

I2C_Error_State I2C_Slave_enuReadu8Data(u8* I2C_Data){
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <I2C_Slave_enuReadu8Data+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01

	return 0;
    110a:	80 e0       	ldi	r24, 0x00	; 0
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	6c ef       	ldi	r22, 0xFC	; 252
    1122:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	6f ef       	ldi	r22, 0xFF	; 255
    112a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	6f ef       	ldi	r22, 0xFF	; 255
    113a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
}
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	27 97       	sbiw	r28, 0x07	; 7
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	6a 83       	std	Y+2, r22	; 0x02
    115c:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	85 30       	cpi	r24, 0x05	; 5
    1162:	08 f0       	brcs	.+2      	; 0x1166 <DIO_voidSetPinDir+0x22>
    1164:	f4 c0       	rjmp	.+488    	; 0x134e <DIO_voidSetPinDir+0x20a>
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	88 23       	and	r24, r24
    116a:	09 f4       	brne	.+2      	; 0x116e <DIO_voidSetPinDir+0x2a>
    116c:	f0 c0       	rjmp	.+480    	; 0x134e <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	08 f0       	brcs	.+2      	; 0x1176 <DIO_voidSetPinDir+0x32>
    1174:	ec c0       	rjmp	.+472    	; 0x134e <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	09 f0       	breq	.+2      	; 0x117e <DIO_voidSetPinDir+0x3a>
    117c:	70 c0       	rjmp	.+224    	; 0x125e <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3f 83       	std	Y+7, r19	; 0x07
    1186:	2e 83       	std	Y+6, r18	; 0x06
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	9f 81       	ldd	r25, Y+7	; 0x07
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	91 05       	cpc	r25, r1
    1190:	51 f1       	breq	.+84     	; 0x11e6 <DIO_voidSetPinDir+0xa2>
    1192:	2e 81       	ldd	r18, Y+6	; 0x06
    1194:	3f 81       	ldd	r19, Y+7	; 0x07
    1196:	23 30       	cpi	r18, 0x03	; 3
    1198:	31 05       	cpc	r19, r1
    119a:	34 f4       	brge	.+12     	; 0x11a8 <DIO_voidSetPinDir+0x64>
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	61 f0       	breq	.+24     	; 0x11be <DIO_voidSetPinDir+0x7a>
    11a6:	d3 c0       	rjmp	.+422    	; 0x134e <DIO_voidSetPinDir+0x20a>
    11a8:	2e 81       	ldd	r18, Y+6	; 0x06
    11aa:	3f 81       	ldd	r19, Y+7	; 0x07
    11ac:	23 30       	cpi	r18, 0x03	; 3
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f1       	breq	.+92     	; 0x120e <DIO_voidSetPinDir+0xca>
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	84 30       	cpi	r24, 0x04	; 4
    11b8:	91 05       	cpc	r25, r1
    11ba:	e9 f1       	breq	.+122    	; 0x1236 <DIO_voidSetPinDir+0xf2>
    11bc:	c8 c0       	rjmp	.+400    	; 0x134e <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    11be:	aa e3       	ldi	r26, 0x3A	; 58
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_voidSetPinDir+0x98>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_voidSetPinDir+0x94>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	b4 c0       	rjmp	.+360    	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    11e6:	a7 e3       	ldi	r26, 0x37	; 55
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e7 e3       	ldi	r30, 0x37	; 55
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_voidSetPinDir+0xc0>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_voidSetPinDir+0xbc>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	a0 c0       	rjmp	.+320    	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    120e:	a4 e3       	ldi	r26, 0x34	; 52
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_voidSetPinDir+0xe8>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_voidSetPinDir+0xe4>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	8c c0       	rjmp	.+280    	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    1236:	a1 e3       	ldi	r26, 0x31	; 49
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_voidSetPinDir+0x110>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_voidSetPinDir+0x10c>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	78 c0       	rjmp	.+240    	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 23       	and	r24, r24
    1262:	09 f0       	breq	.+2      	; 0x1266 <DIO_voidSetPinDir+0x122>
    1264:	74 c0       	rjmp	.+232    	; 0x134e <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3d 83       	std	Y+5, r19	; 0x05
    126e:	2c 83       	std	Y+4, r18	; 0x04
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	91 05       	cpc	r25, r1
    1278:	61 f1       	breq	.+88     	; 0x12d2 <DIO_voidSetPinDir+0x18e>
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	23 30       	cpi	r18, 0x03	; 3
    1280:	31 05       	cpc	r19, r1
    1282:	34 f4       	brge	.+12     	; 0x1290 <DIO_voidSetPinDir+0x14c>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	91 05       	cpc	r25, r1
    128c:	69 f0       	breq	.+26     	; 0x12a8 <DIO_voidSetPinDir+0x164>
    128e:	5f c0       	rjmp	.+190    	; 0x134e <DIO_voidSetPinDir+0x20a>
    1290:	2c 81       	ldd	r18, Y+4	; 0x04
    1292:	3d 81       	ldd	r19, Y+5	; 0x05
    1294:	23 30       	cpi	r18, 0x03	; 3
    1296:	31 05       	cpc	r19, r1
    1298:	89 f1       	breq	.+98     	; 0x12fc <DIO_voidSetPinDir+0x1b8>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <DIO_voidSetPinDir+0x162>
    12a4:	40 c0       	rjmp	.+128    	; 0x1326 <DIO_voidSetPinDir+0x1e2>
    12a6:	53 c0       	rjmp	.+166    	; 0x134e <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    12a8:	aa e3       	ldi	r26, 0x3A	; 58
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ea e3       	ldi	r30, 0x3A	; 58
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_voidSetPinDir+0x182>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_voidSetPinDir+0x17e>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	3e c0       	rjmp	.+124    	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    12d2:	a7 e3       	ldi	r26, 0x37	; 55
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_voidSetPinDir+0x1ac>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_voidSetPinDir+0x1a8>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	29 c0       	rjmp	.+82     	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_voidSetPinDir+0x1d6>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_voidSetPinDir+0x1d2>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	14 c0       	rjmp	.+40     	; 0x134e <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    1326:	a1 e3       	ldi	r26, 0x31	; 49
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_voidSetPinDir+0x200>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_voidSetPinDir+0x1fc>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    134e:	27 96       	adiw	r28, 0x07	; 7
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	27 97       	sbiw	r28, 0x07	; 7
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	6a 83       	std	Y+2, r22	; 0x02
    1378:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	85 30       	cpi	r24, 0x05	; 5
    137e:	08 f0       	brcs	.+2      	; 0x1382 <DIO_voidSetPinValue+0x22>
    1380:	f4 c0       	rjmp	.+488    	; 0x156a <DIO_voidSetPinValue+0x20a>
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	88 23       	and	r24, r24
    1386:	09 f4       	brne	.+2      	; 0x138a <DIO_voidSetPinValue+0x2a>
    1388:	f0 c0       	rjmp	.+480    	; 0x156a <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	08 f0       	brcs	.+2      	; 0x1392 <DIO_voidSetPinValue+0x32>
    1390:	ec c0       	rjmp	.+472    	; 0x156a <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	09 f0       	breq	.+2      	; 0x139a <DIO_voidSetPinValue+0x3a>
    1398:	70 c0       	rjmp	.+224    	; 0x147a <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3f 83       	std	Y+7, r19	; 0x07
    13a2:	2e 83       	std	Y+6, r18	; 0x06
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	91 05       	cpc	r25, r1
    13ac:	51 f1       	breq	.+84     	; 0x1402 <DIO_voidSetPinValue+0xa2>
    13ae:	2e 81       	ldd	r18, Y+6	; 0x06
    13b0:	3f 81       	ldd	r19, Y+7	; 0x07
    13b2:	23 30       	cpi	r18, 0x03	; 3
    13b4:	31 05       	cpc	r19, r1
    13b6:	34 f4       	brge	.+12     	; 0x13c4 <DIO_voidSetPinValue+0x64>
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ba:	9f 81       	ldd	r25, Y+7	; 0x07
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	61 f0       	breq	.+24     	; 0x13da <DIO_voidSetPinValue+0x7a>
    13c2:	d3 c0       	rjmp	.+422    	; 0x156a <DIO_voidSetPinValue+0x20a>
    13c4:	2e 81       	ldd	r18, Y+6	; 0x06
    13c6:	3f 81       	ldd	r19, Y+7	; 0x07
    13c8:	23 30       	cpi	r18, 0x03	; 3
    13ca:	31 05       	cpc	r19, r1
    13cc:	71 f1       	breq	.+92     	; 0x142a <DIO_voidSetPinValue+0xca>
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	91 05       	cpc	r25, r1
    13d6:	e9 f1       	breq	.+122    	; 0x1452 <DIO_voidSetPinValue+0xf2>
    13d8:	c8 c0       	rjmp	.+400    	; 0x156a <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    13da:	ab e3       	ldi	r26, 0x3B	; 59
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	eb e3       	ldi	r30, 0x3B	; 59
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_voidSetPinValue+0x98>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_voidSetPinValue+0x94>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	b4 c0       	rjmp	.+360    	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    1402:	a8 e3       	ldi	r26, 0x38	; 56
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_voidSetPinValue+0xc0>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_voidSetPinValue+0xbc>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	a0 c0       	rjmp	.+320    	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    142a:	a5 e3       	ldi	r26, 0x35	; 53
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e3       	ldi	r30, 0x35	; 53
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_voidSetPinValue+0xe8>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_voidSetPinValue+0xe4>
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	8c c0       	rjmp	.+280    	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    1452:	a2 e3       	ldi	r26, 0x32	; 50
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e2 e3       	ldi	r30, 0x32	; 50
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_voidSetPinValue+0x110>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_voidSetPinValue+0x10c>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	78 c0       	rjmp	.+240    	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	88 23       	and	r24, r24
    147e:	09 f0       	breq	.+2      	; 0x1482 <DIO_voidSetPinValue+0x122>
    1480:	74 c0       	rjmp	.+232    	; 0x156a <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3d 83       	std	Y+5, r19	; 0x05
    148a:	2c 83       	std	Y+4, r18	; 0x04
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	91 05       	cpc	r25, r1
    1494:	61 f1       	breq	.+88     	; 0x14ee <DIO_voidSetPinValue+0x18e>
    1496:	2c 81       	ldd	r18, Y+4	; 0x04
    1498:	3d 81       	ldd	r19, Y+5	; 0x05
    149a:	23 30       	cpi	r18, 0x03	; 3
    149c:	31 05       	cpc	r19, r1
    149e:	34 f4       	brge	.+12     	; 0x14ac <DIO_voidSetPinValue+0x14c>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <DIO_voidSetPinValue+0x164>
    14aa:	5f c0       	rjmp	.+190    	; 0x156a <DIO_voidSetPinValue+0x20a>
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	3d 81       	ldd	r19, Y+5	; 0x05
    14b0:	23 30       	cpi	r18, 0x03	; 3
    14b2:	31 05       	cpc	r19, r1
    14b4:	89 f1       	breq	.+98     	; 0x1518 <DIO_voidSetPinValue+0x1b8>
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	91 05       	cpc	r25, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <DIO_voidSetPinValue+0x162>
    14c0:	40 c0       	rjmp	.+128    	; 0x1542 <DIO_voidSetPinValue+0x1e2>
    14c2:	53 c0       	rjmp	.+166    	; 0x156a <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    14c4:	ab e3       	ldi	r26, 0x3B	; 59
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_voidSetPinValue+0x182>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DIO_voidSetPinValue+0x17e>
    14e6:	80 95       	com	r24
    14e8:	84 23       	and	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	3e c0       	rjmp	.+124    	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    14ee:	a8 e3       	ldi	r26, 0x38	; 56
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_voidSetPinValue+0x1ac>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_voidSetPinValue+0x1a8>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	29 c0       	rjmp	.+82     	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    1518:	a5 e3       	ldi	r26, 0x35	; 53
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_voidSetPinValue+0x1d6>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_voidSetPinValue+0x1d2>
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	14 c0       	rjmp	.+40     	; 0x156a <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    1542:	a2 e3       	ldi	r26, 0x32	; 50
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_voidSetPinValue+0x200>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_voidSetPinValue+0x1fc>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    156a:	27 96       	adiw	r28, 0x07	; 7
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_u8GetPinValue+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_u8GetPinValue+0x8>
    1584:	0f 92       	push	r0
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	85 30       	cpi	r24, 0x05	; 5
    1592:	08 f0       	brcs	.+2      	; 0x1596 <DIO_u8GetPinValue+0x1a>
    1594:	74 c0       	rjmp	.+232    	; 0x167e <DIO_u8GetPinValue+0x102>
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <DIO_u8GetPinValue+0x22>
    159c:	70 c0       	rjmp	.+224    	; 0x167e <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <DIO_u8GetPinValue+0x2a>
    15a4:	6c c0       	rjmp	.+216    	; 0x167e <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3d 83       	std	Y+5, r19	; 0x05
    15ae:	2c 83       	std	Y+4, r18	; 0x04
    15b0:	4c 81       	ldd	r20, Y+4	; 0x04
    15b2:	5d 81       	ldd	r21, Y+5	; 0x05
    15b4:	42 30       	cpi	r20, 0x02	; 2
    15b6:	51 05       	cpc	r21, r1
    15b8:	49 f1       	breq	.+82     	; 0x160c <DIO_u8GetPinValue+0x90>
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	34 f4       	brge	.+12     	; 0x15d0 <DIO_u8GetPinValue+0x54>
    15c4:	2c 81       	ldd	r18, Y+4	; 0x04
    15c6:	3d 81       	ldd	r19, Y+5	; 0x05
    15c8:	21 30       	cpi	r18, 0x01	; 1
    15ca:	31 05       	cpc	r19, r1
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <DIO_u8GetPinValue+0x6a>
    15ce:	57 c0       	rjmp	.+174    	; 0x167e <DIO_u8GetPinValue+0x102>
    15d0:	4c 81       	ldd	r20, Y+4	; 0x04
    15d2:	5d 81       	ldd	r21, Y+5	; 0x05
    15d4:	43 30       	cpi	r20, 0x03	; 3
    15d6:	51 05       	cpc	r21, r1
    15d8:	61 f1       	breq	.+88     	; 0x1632 <DIO_u8GetPinValue+0xb6>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	91 05       	cpc	r25, r1
    15e2:	d1 f1       	breq	.+116    	; 0x1658 <DIO_u8GetPinValue+0xdc>
    15e4:	4c c0       	rjmp	.+152    	; 0x167e <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    15e6:	e9 e3       	ldi	r30, 0x39	; 57
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a9 01       	movw	r20, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_u8GetPinValue+0x82>
    15fa:	55 95       	asr	r21
    15fc:	47 95       	ror	r20
    15fe:	8a 95       	dec	r24
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_u8GetPinValue+0x7e>
    1602:	ca 01       	movw	r24, r20
    1604:	58 2f       	mov	r21, r24
    1606:	51 70       	andi	r21, 0x01	; 1
    1608:	5b 83       	std	Y+3, r21	; 0x03
    160a:	3b c0       	rjmp	.+118    	; 0x1682 <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    160c:	e6 e3       	ldi	r30, 0x36	; 54
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <DIO_u8GetPinValue+0xa8>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <DIO_u8GetPinValue+0xa4>
    1628:	ca 01       	movw	r24, r20
    162a:	58 2f       	mov	r21, r24
    162c:	51 70       	andi	r21, 0x01	; 1
    162e:	5b 83       	std	Y+3, r21	; 0x03
    1630:	28 c0       	rjmp	.+80     	; 0x1682 <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    1632:	e3 e3       	ldi	r30, 0x33	; 51
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a9 01       	movw	r20, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_u8GetPinValue+0xce>
    1646:	55 95       	asr	r21
    1648:	47 95       	ror	r20
    164a:	8a 95       	dec	r24
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_u8GetPinValue+0xca>
    164e:	ca 01       	movw	r24, r20
    1650:	58 2f       	mov	r21, r24
    1652:	51 70       	andi	r21, 0x01	; 1
    1654:	5b 83       	std	Y+3, r21	; 0x03
    1656:	15 c0       	rjmp	.+42     	; 0x1682 <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_u8GetPinValue+0xf4>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_u8GetPinValue+0xf0>
    1674:	ca 01       	movw	r24, r20
    1676:	58 2f       	mov	r21, r24
    1678:	51 70       	andi	r21, 0x01	; 1
    167a:	5b 83       	std	Y+3, r21	; 0x03
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <DIO_voidTogglePin+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <DIO_voidTogglePin+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	85 30       	cpi	r24, 0x05	; 5
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <DIO_voidTogglePin+0x18>
    16aa:	77 c0       	rjmp	.+238    	; 0x179a <DIO_voidTogglePin+0x106>
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	88 23       	and	r24, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <DIO_voidTogglePin+0x20>
    16b2:	73 c0       	rjmp	.+230    	; 0x179a <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	88 30       	cpi	r24, 0x08	; 8
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <DIO_voidTogglePin+0x28>
    16ba:	6f c0       	rjmp	.+222    	; 0x179a <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3c 83       	std	Y+4, r19	; 0x04
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	91 05       	cpc	r25, r1
    16ce:	51 f1       	breq	.+84     	; 0x1724 <DIO_voidTogglePin+0x90>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	23 30       	cpi	r18, 0x03	; 3
    16d6:	31 05       	cpc	r19, r1
    16d8:	34 f4       	brge	.+12     	; 0x16e6 <DIO_voidTogglePin+0x52>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	91 05       	cpc	r25, r1
    16e2:	61 f0       	breq	.+24     	; 0x16fc <DIO_voidTogglePin+0x68>
    16e4:	5a c0       	rjmp	.+180    	; 0x179a <DIO_voidTogglePin+0x106>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	23 30       	cpi	r18, 0x03	; 3
    16ec:	31 05       	cpc	r19, r1
    16ee:	71 f1       	breq	.+92     	; 0x174c <DIO_voidTogglePin+0xb8>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	91 05       	cpc	r25, r1
    16f8:	e9 f1       	breq	.+122    	; 0x1774 <DIO_voidTogglePin+0xe0>
    16fa:	4f c0       	rjmp	.+158    	; 0x179a <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    16fc:	ab e3       	ldi	r26, 0x3B	; 59
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	eb e3       	ldi	r30, 0x3B	; 59
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_voidTogglePin+0x86>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_voidTogglePin+0x82>
    171e:	84 27       	eor	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	3b c0       	rjmp	.+118    	; 0x179a <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    1724:	a8 e3       	ldi	r26, 0x38	; 56
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 e3       	ldi	r30, 0x38	; 56
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_voidTogglePin+0xae>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_voidTogglePin+0xaa>
    1746:	84 27       	eor	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	27 c0       	rjmp	.+78     	; 0x179a <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    174c:	a5 e3       	ldi	r26, 0x35	; 53
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_voidTogglePin+0xd6>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_voidTogglePin+0xd2>
    176e:	84 27       	eor	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	13 c0       	rjmp	.+38     	; 0x179a <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    1774:	a2 e3       	ldi	r26, 0x32	; 50
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e2 e3       	ldi	r30, 0x32	; 50
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_voidTogglePin+0xfe>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_voidTogglePin+0xfa>
    1796:	84 27       	eor	r24, r20
    1798:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <DIO_voidSetPortDir+0x6>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_voidSetPortDir+0x8>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	85 30       	cpi	r24, 0x05	; 5
    17bc:	b0 f5       	brcc	.+108    	; 0x182a <DIO_voidSetPortDir+0x82>
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	88 23       	and	r24, r24
    17c2:	99 f1       	breq	.+102    	; 0x182a <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3c 83       	std	Y+4, r19	; 0x04
    17cc:	2b 83       	std	Y+3, r18	; 0x03
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	91 05       	cpc	r25, r1
    17d6:	d9 f0       	breq	.+54     	; 0x180e <DIO_voidSetPortDir+0x66>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	23 30       	cpi	r18, 0x03	; 3
    17de:	31 05       	cpc	r19, r1
    17e0:	34 f4       	brge	.+12     	; 0x17ee <DIO_voidSetPortDir+0x46>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	61 f0       	breq	.+24     	; 0x1804 <DIO_voidSetPortDir+0x5c>
    17ec:	1e c0       	rjmp	.+60     	; 0x182a <DIO_voidSetPortDir+0x82>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	23 30       	cpi	r18, 0x03	; 3
    17f4:	31 05       	cpc	r19, r1
    17f6:	81 f0       	breq	.+32     	; 0x1818 <DIO_voidSetPortDir+0x70>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	91 05       	cpc	r25, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <DIO_voidSetPortDir+0x7a>
    1802:	13 c0       	rjmp	.+38     	; 0x182a <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    1804:	ea e3       	ldi	r30, 0x3A	; 58
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	80 83       	st	Z, r24
    180c:	0e c0       	rjmp	.+28     	; 0x182a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    180e:	e7 e3       	ldi	r30, 0x37	; 55
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	80 83       	st	Z, r24
    1816:	09 c0       	rjmp	.+18     	; 0x182a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    1818:	e4 e3       	ldi	r30, 0x34	; 52
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	80 83       	st	Z, r24
    1820:	04 c0       	rjmp	.+8      	; 0x182a <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    1822:	e1 e3       	ldi	r30, 0x31	; 49
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	80 83       	st	Z, r24
			break;
		}
	}
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_voidSetPortValue+0x6>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <DIO_voidSetPortValue+0x8>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	85 30       	cpi	r24, 0x05	; 5
    184c:	b0 f5       	brcc	.+108    	; 0x18ba <DIO_voidSetPortValue+0x82>
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 23       	and	r24, r24
    1852:	99 f1       	breq	.+102    	; 0x18ba <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3c 83       	std	Y+4, r19	; 0x04
    185c:	2b 83       	std	Y+3, r18	; 0x03
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	d9 f0       	breq	.+54     	; 0x189e <DIO_voidSetPortValue+0x66>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	23 30       	cpi	r18, 0x03	; 3
    186e:	31 05       	cpc	r19, r1
    1870:	34 f4       	brge	.+12     	; 0x187e <DIO_voidSetPortValue+0x46>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	61 f0       	breq	.+24     	; 0x1894 <DIO_voidSetPortValue+0x5c>
    187c:	1e c0       	rjmp	.+60     	; 0x18ba <DIO_voidSetPortValue+0x82>
    187e:	2b 81       	ldd	r18, Y+3	; 0x03
    1880:	3c 81       	ldd	r19, Y+4	; 0x04
    1882:	23 30       	cpi	r18, 0x03	; 3
    1884:	31 05       	cpc	r19, r1
    1886:	81 f0       	breq	.+32     	; 0x18a8 <DIO_voidSetPortValue+0x70>
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	91 05       	cpc	r25, r1
    1890:	81 f0       	breq	.+32     	; 0x18b2 <DIO_voidSetPortValue+0x7a>
    1892:	13 c0       	rjmp	.+38     	; 0x18ba <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    1894:	eb e3       	ldi	r30, 0x3B	; 59
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	80 83       	st	Z, r24
    189c:	0e c0       	rjmp	.+28     	; 0x18ba <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    189e:	e8 e3       	ldi	r30, 0x38	; 56
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	80 83       	st	Z, r24
    18a6:	09 c0       	rjmp	.+18     	; 0x18ba <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    18a8:	e5 e3       	ldi	r30, 0x35	; 53
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	80 83       	st	Z, r24
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    18b2:	e2 e3       	ldi	r30, 0x32	; 50
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	80 83       	st	Z, r24
			break;
		}
	}
}
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <DIO_u8GetPortValue+0x6>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <DIO_u8GetPortValue+0x8>
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	85 30       	cpi	r24, 0x05	; 5
    18da:	b8 f5       	brcc	.+110    	; 0x194a <DIO_u8GetPortValue+0x82>
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	88 23       	and	r24, r24
    18e0:	a1 f1       	breq	.+104    	; 0x194a <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3c 83       	std	Y+4, r19	; 0x04
    18ea:	2b 83       	std	Y+3, r18	; 0x03
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	91 05       	cpc	r25, r1
    18f4:	d9 f0       	breq	.+54     	; 0x192c <DIO_u8GetPortValue+0x64>
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	23 30       	cpi	r18, 0x03	; 3
    18fc:	31 05       	cpc	r19, r1
    18fe:	34 f4       	brge	.+12     	; 0x190c <DIO_u8GetPortValue+0x44>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	91 05       	cpc	r25, r1
    1908:	61 f0       	breq	.+24     	; 0x1922 <DIO_u8GetPortValue+0x5a>
    190a:	1f c0       	rjmp	.+62     	; 0x194a <DIO_u8GetPortValue+0x82>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	23 30       	cpi	r18, 0x03	; 3
    1912:	31 05       	cpc	r19, r1
    1914:	81 f0       	breq	.+32     	; 0x1936 <DIO_u8GetPortValue+0x6e>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	91 05       	cpc	r25, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <DIO_u8GetPortValue+0x78>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    1922:	eb e3       	ldi	r30, 0x3B	; 59
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	90 81       	ld	r25, Z
    1928:	9a 83       	std	Y+2, r25	; 0x02
    192a:	11 c0       	rjmp	.+34     	; 0x194e <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    192c:	e8 e3       	ldi	r30, 0x38	; 56
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	20 81       	ld	r18, Z
    1932:	2a 83       	std	Y+2, r18	; 0x02
    1934:	0c c0       	rjmp	.+24     	; 0x194e <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	30 81       	ld	r19, Z
    193c:	3a 83       	std	Y+2, r19	; 0x02
    193e:	07 c0       	rjmp	.+14     	; 0x194e <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1940:	e2 e3       	ldi	r30, 0x32	; 50
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8a 83       	std	Y+2, r24	; 0x02
    1948:	02 c0       	rjmp	.+4      	; 0x194e <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    194a:	9f ef       	ldi	r25, 0xFF	; 255
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	00 d0       	rcall	.+0      	; 0x1964 <DIO_voidTogglePort+0x6>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	85 30       	cpi	r24, 0x05	; 5
    1970:	08 f0       	brcs	.+2      	; 0x1974 <DIO_voidTogglePort+0x16>
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <DIO_voidTogglePort+0x9c>
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <DIO_voidTogglePort+0x1e>
    197a:	3f c0       	rjmp	.+126    	; 0x19fa <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3b 83       	std	Y+3, r19	; 0x03
    1984:	2a 83       	std	Y+2, r18	; 0x02
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	9b 81       	ldd	r25, Y+3	; 0x03
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	91 05       	cpc	r25, r1
    198e:	f1 f0       	breq	.+60     	; 0x19cc <DIO_voidTogglePort+0x6e>
    1990:	2a 81       	ldd	r18, Y+2	; 0x02
    1992:	3b 81       	ldd	r19, Y+3	; 0x03
    1994:	23 30       	cpi	r18, 0x03	; 3
    1996:	31 05       	cpc	r19, r1
    1998:	34 f4       	brge	.+12     	; 0x19a6 <DIO_voidTogglePort+0x48>
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	9b 81       	ldd	r25, Y+3	; 0x03
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	61 f0       	breq	.+24     	; 0x19bc <DIO_voidTogglePort+0x5e>
    19a4:	2a c0       	rjmp	.+84     	; 0x19fa <DIO_voidTogglePort+0x9c>
    19a6:	2a 81       	ldd	r18, Y+2	; 0x02
    19a8:	3b 81       	ldd	r19, Y+3	; 0x03
    19aa:	23 30       	cpi	r18, 0x03	; 3
    19ac:	31 05       	cpc	r19, r1
    19ae:	b1 f0       	breq	.+44     	; 0x19dc <DIO_voidTogglePort+0x7e>
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	84 30       	cpi	r24, 0x04	; 4
    19b6:	91 05       	cpc	r25, r1
    19b8:	c9 f0       	breq	.+50     	; 0x19ec <DIO_voidTogglePort+0x8e>
    19ba:	1f c0       	rjmp	.+62     	; 0x19fa <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    19bc:	ab e3       	ldi	r26, 0x3B	; 59
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	eb e3       	ldi	r30, 0x3B	; 59
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 95       	com	r24
    19c8:	8c 93       	st	X, r24
    19ca:	17 c0       	rjmp	.+46     	; 0x19fa <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    19cc:	a8 e3       	ldi	r26, 0x38	; 56
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e8 e3       	ldi	r30, 0x38	; 56
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	80 95       	com	r24
    19d8:	8c 93       	st	X, r24
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    19dc:	a5 e3       	ldi	r26, 0x35	; 53
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e5 e3       	ldi	r30, 0x35	; 53
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	80 95       	com	r24
    19e8:	8c 93       	st	X, r24
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    19ec:	a2 e3       	ldi	r26, 0x32	; 50
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e2 e3       	ldi	r30, 0x32	; 50
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 95       	com	r24
    19f8:	8c 93       	st	X, r24
				break;
			}
		}
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(){
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    1a0e:	a7 e2       	ldi	r26, 0x27	; 39
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e7 e2       	ldi	r30, 0x27	; 39
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 64       	ori	r24, 0x40	; 64
    1a1a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1a1c:	a7 e2       	ldi	r26, 0x27	; 39
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e7 e2       	ldi	r30, 0x27	; 39
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 77       	andi	r24, 0x7F	; 127
    1a28:	8c 93       	st	X, r24
	Vref = 5;
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 ea       	ldi	r26, 0xA0	; 160
    1a30:	b0 e4       	ldi	r27, 0x40	; 64
    1a32:	80 93 7f 01 	sts	0x017F, r24
    1a36:	90 93 80 01 	sts	0x0180, r25
    1a3a:	a0 93 81 01 	sts	0x0181, r26
    1a3e:	b0 93 82 01 	sts	0x0182, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    1a42:	a7 e2       	ldi	r26, 0x27	; 39
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e7 e2       	ldi	r30, 0x27	; 39
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 7d       	andi	r24, 0xDF	; 223
    1a4e:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1a50:	a6 e2       	ldi	r26, 0x26	; 38
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e6 e2       	ldi	r30, 0x26	; 38
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    1a5e:	a6 e2       	ldi	r26, 0x26	; 38
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e6 e2       	ldi	r30, 0x26	; 38
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	82 60       	ori	r24, 0x02	; 2
    1a6a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    1a6c:	a6 e2       	ldi	r26, 0x26	; 38
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e6 e2       	ldi	r30, 0x26	; 38
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	84 60       	ori	r24, 0x04	; 4
    1a78:	8c 93       	st	X, r24
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
#endif
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <ADC_voidEnable>:

void ADC_voidEnable(){
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1a88:	a6 e2       	ldi	r26, 0x26	; 38
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e6 e2       	ldi	r30, 0x26	; 38
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	80 68       	ori	r24, 0x80	; 128
    1a94:	8c 93       	st	X, r24
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    1aa4:	a6 e2       	ldi	r26, 0x26	; 38
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e6 e2       	ldi	r30, 0x26	; 38
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	88 60       	ori	r24, 0x08	; 8
    1ab0:	8c 93       	st	X, r24
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1ac0:	a6 e2       	ldi	r26, 0x26	; 38
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e6 e2       	ldi	r30, 0x26	; 38
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	87 7f       	andi	r24, 0xF7	; 247
    1acc:	8c 93       	st	X, r24
}
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <ADC_voidDisable>:

void ADC_voidDisable(){
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    1adc:	a6 e2       	ldi	r26, 0x26	; 38
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e6 e2       	ldi	r30, 0x26	; 38
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	8c 93       	st	X, r24
}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <ADC_u16ReadADC+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1afa:	1a 82       	std	Y+2, r1	; 0x02
    1afc:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    1afe:	e4 e2       	ldi	r30, 0x24	; 36
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	cc 01       	movw	r24, r24
    1b08:	a0 e0       	ldi	r26, 0x00	; 0
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	20 91 7f 01 	lds	r18, 0x017F
    1b1c:	30 91 80 01 	lds	r19, 0x0180
    1b20:	40 91 81 01 	lds	r20, 0x0181
    1b24:	50 91 82 01 	lds	r21, 0x0182
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	0f 92       	push	r0
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1b72:	a7 e2       	ldi	r26, 0x27	; 39
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e7 e2       	ldi	r30, 0x27	; 39
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	80 7e       	andi	r24, 0xE0	; 224
    1b7e:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    1b80:	a7 e2       	ldi	r26, 0x27	; 39
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e7 e2       	ldi	r30, 0x27	; 39
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	90 81       	ld	r25, Z
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	89 2b       	or	r24, r25
    1b8e:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1b90:	a6 e2       	ldi	r26, 0x26	; 38
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e6 e2       	ldi	r30, 0x26	; 38
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 64       	ori	r24, 0x40	; 64
    1b9c:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    1b9e:	e6 e2       	ldi	r30, 0x26	; 38
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	82 95       	swap	r24
    1ba6:	8f 70       	andi	r24, 0x0F	; 15
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	81 70       	andi	r24, 0x01	; 1
    1bae:	90 70       	andi	r25, 0x00	; 0
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	a9 f3       	breq	.-22     	; 0x1b9e <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1bb4:	a6 e2       	ldi	r26, 0x26	; 38
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e6 e2       	ldi	r30, 0x26	; 38
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 61       	ori	r24, 0x10	; 16
    1bc0:	8c 93       	st	X, r24
}
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1bd6:	a7 e2       	ldi	r26, 0x27	; 39
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e7 e2       	ldi	r30, 0x27	; 39
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 7e       	andi	r24, 0xE0	; 224
    1be2:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    1be4:	a7 e2       	ldi	r26, 0x27	; 39
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e7 e2       	ldi	r30, 0x27	; 39
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	90 81       	ld	r25, Z
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	89 2b       	or	r24, r25
    1bf2:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1bf4:	a6 e2       	ldi	r26, 0x26	; 38
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e6 e2       	ldi	r30, 0x26	; 38
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 64       	ori	r24, 0x40	; 64
    1c00:	8c 93       	st	X, r24
}
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1c16:	a7 e2       	ldi	r26, 0x27	; 39
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e7 e2       	ldi	r30, 0x27	; 39
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 7e       	andi	r24, 0xE0	; 224
    1c22:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    1c24:	a7 e2       	ldi	r26, 0x27	; 39
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e2       	ldi	r30, 0x27	; 39
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	90 81       	ld	r25, Z
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	89 2b       	or	r24, r25
    1c32:	8c 93       	st	X, r24
}
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <ADC_u16ReadADCInMV+0x6>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    1c46:	1a 82       	std	Y+2, r1	; 0x02
    1c48:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    1c4a:	e4 e2       	ldi	r30, 0x24	; 36
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	cc 01       	movw	r24, r24
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	28 ee       	ldi	r18, 0xE8	; 232
    1c5a:	33 e0       	ldi	r19, 0x03	; 3
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__mulsi3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	20 91 7f 01 	lds	r18, 0x017F
    1c7c:	30 91 80 01 	lds	r19, 0x0180
    1c80:	40 91 81 01 	lds	r20, 0x0181
    1c84:	50 91 82 01 	lds	r21, 0x0182
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	return result;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <ADC_voidSetCallback+0x6>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	90 93 13 02 	sts	0x0213, r25
    1cdc:	80 93 12 02 	sts	0x0212, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <__vector_16>:

void __vector_16 (void){
    1cea:	1f 92       	push	r1
    1cec:	0f 92       	push	r0
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	0f 92       	push	r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	2f 93       	push	r18
    1cf6:	3f 93       	push	r19
    1cf8:	4f 93       	push	r20
    1cfa:	5f 93       	push	r21
    1cfc:	6f 93       	push	r22
    1cfe:	7f 93       	push	r23
    1d00:	8f 93       	push	r24
    1d02:	9f 93       	push	r25
    1d04:	af 93       	push	r26
    1d06:	bf 93       	push	r27
    1d08:	ef 93       	push	r30
    1d0a:	ff 93       	push	r31
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    1d14:	80 91 12 02 	lds	r24, 0x0212
    1d18:	90 91 13 02 	lds	r25, 0x0213
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <__vector_16+0x40>
		Global_ADC_CallBack();
    1d20:	e0 91 12 02 	lds	r30, 0x0212
    1d24:	f0 91 13 02 	lds	r31, 0x0213
    1d28:	09 95       	icall
	}
}
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	ff 91       	pop	r31
    1d30:	ef 91       	pop	r30
    1d32:	bf 91       	pop	r27
    1d34:	af 91       	pop	r26
    1d36:	9f 91       	pop	r25
    1d38:	8f 91       	pop	r24
    1d3a:	7f 91       	pop	r23
    1d3c:	6f 91       	pop	r22
    1d3e:	5f 91       	pop	r21
    1d40:	4f 91       	pop	r20
    1d42:	3f 91       	pop	r19
    1d44:	2f 91       	pop	r18
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	0f 90       	pop	r0
    1d4c:	1f 90       	pop	r1
    1d4e:	18 95       	reti

00001d50 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	6f e7       	ldi	r22, 0x7F	; 127
    1d5c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	6f e7       	ldi	r22, 0x7F	; 127
    1d72:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    1d76:	84 e0       	ldi	r24, 0x04	; 4
    1d78:	6f e7       	ldi	r22, 0x7F	; 127
    1d7a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <DIO_voidSetPortDir>
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	60 97       	sbiw	r28, 0x10	; 16
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	9d 87       	std	Y+13, r25	; 0x0d
    1da0:	8c 87       	std	Y+12, r24	; 0x0c
    1da2:	ef ec       	ldi	r30, 0xCF	; 207
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	ff 87       	std	Y+15, r31	; 0x0f
    1da8:	ee 87       	std	Y+14, r30	; 0x0e
    1daa:	fa e0       	ldi	r31, 0x0A	; 10
    1dac:	f8 8b       	std	Y+16, r31	; 0x10
    1dae:	ee 85       	ldd	r30, Y+14	; 0x0e
    1db0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1db2:	00 80       	ld	r0, Z
    1db4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	9f 87       	std	Y+15, r25	; 0x0f
    1dbc:	8e 87       	std	Y+14, r24	; 0x0e
    1dbe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dc0:	fd 85       	ldd	r31, Y+13	; 0x0d
    1dc2:	00 82       	st	Z, r0
    1dc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	9d 87       	std	Y+13, r25	; 0x0d
    1dcc:	8c 87       	std	Y+12, r24	; 0x0c
    1dce:	98 89       	ldd	r25, Y+16	; 0x10
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	98 8b       	std	Y+16, r25	; 0x10
    1dd4:	e8 89       	ldd	r30, Y+16	; 0x10
    1dd6:	ee 23       	and	r30, r30
    1dd8:	51 f7       	brne	.-44     	; 0x1dae <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    1dda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ddc:	8a 30       	cpi	r24, 0x0A	; 10
    1dde:	70 f4       	brcc	.+28     	; 0x1dfc <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    1de0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	ce 01       	movw	r24, r28
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	fc 01       	movw	r30, r24
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	80 81       	ld	r24, Z
    1df2:	98 2f       	mov	r25, r24
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	69 2f       	mov	r22, r25
    1df8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
	}
}
    1dfc:	60 96       	adiw	r28, 0x10	; 16
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	a1 97       	sbiw	r28, 0x21	; 33
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    1e22:	ce 01       	movw	r24, r28
    1e24:	43 96       	adiw	r24, 0x13	; 19
    1e26:	9e 8f       	std	Y+30, r25	; 0x1e
    1e28:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2a:	e9 ed       	ldi	r30, 0xD9	; 217
    1e2c:	f1 e0       	ldi	r31, 0x01	; 1
    1e2e:	f8 a3       	std	Y+32, r31	; 0x20
    1e30:	ef 8f       	std	Y+31, r30	; 0x1f
    1e32:	fa e0       	ldi	r31, 0x0A	; 10
    1e34:	f9 a3       	std	Y+33, r31	; 0x21
    1e36:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1e38:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e3a:	00 80       	ld	r0, Z
    1e3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	98 a3       	std	Y+32, r25	; 0x20
    1e44:	8f 8f       	std	Y+31, r24	; 0x1f
    1e46:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1e48:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1e4a:	00 82       	st	Z, r0
    1e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	9e 8f       	std	Y+30, r25	; 0x1e
    1e54:	8d 8f       	std	Y+29, r24	; 0x1d
    1e56:	99 a1       	ldd	r25, Y+33	; 0x21
    1e58:	91 50       	subi	r25, 0x01	; 1
    1e5a:	99 a3       	std	Y+33, r25	; 0x21
    1e5c:	e9 a1       	ldd	r30, Y+33	; 0x21
    1e5e:	ee 23       	and	r30, r30
    1e60:	51 f7       	brne	.-44     	; 0x1e36 <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    1e62:	1f 86       	std	Y+15, r1	; 0x0f
    1e64:	18 8a       	std	Y+16, r1	; 0x10
    1e66:	19 8a       	std	Y+17, r1	; 0x11
    1e68:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1e6a:	1f 86       	std	Y+15, r1	; 0x0f
    1e6c:	18 8a       	std	Y+16, r1	; 0x10
    1e6e:	19 8a       	std	Y+17, r1	; 0x11
    1e70:	1a 8a       	std	Y+18, r1	; 0x12
    1e72:	8d c0       	rjmp	.+282    	; 0x1f8e <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    1e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e76:	98 89       	ldd	r25, Y+16	; 0x10
    1e78:	a9 89       	ldd	r26, Y+17	; 0x11
    1e7a:	ba 89       	ldd	r27, Y+18	; 0x12
    1e7c:	9e 01       	movw	r18, r28
    1e7e:	2d 5e       	subi	r18, 0xED	; 237
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	f9 01       	movw	r30, r18
    1e84:	e8 0f       	add	r30, r24
    1e86:	f9 1f       	adc	r31, r25
    1e88:	80 81       	ld	r24, Z
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	69 2f       	mov	r22, r25
    1e90:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e2       	ldi	r26, 0x20	; 32
    1e9a:	b1 e4       	ldi	r27, 0x41	; 65
    1e9c:	8b 87       	std	Y+11, r24	; 0x0b
    1e9e:	9c 87       	std	Y+12, r25	; 0x0c
    1ea0:	ad 87       	std	Y+13, r26	; 0x0d
    1ea2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	55 e4       	ldi	r21, 0x45	; 69
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8f 83       	std	Y+7, r24	; 0x07
    1ebe:	98 87       	std	Y+8, r25	; 0x08
    1ec0:	a9 87       	std	Y+9, r26	; 0x09
    1ec2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    1ee6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee8:	78 85       	ldd	r23, Y+8	; 0x08
    1eea:	89 85       	ldd	r24, Y+9	; 0x09
    1eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <SevSeg_voidSingleAutoCounter+0x138>
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <SevSeg_voidSingleAutoCounter+0x126>
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <SevSeg_voidSingleAutoCounter+0x11a>
    1f4e:	14 c0       	rjmp	.+40     	; 0x1f78 <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <SevSeg_voidSingleAutoCounter+0x162>
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	a9 89       	ldd	r26, Y+17	; 0x11
    1f7e:	ba 89       	ldd	r27, Y+18	; 0x12
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	a1 1d       	adc	r26, r1
    1f84:	b1 1d       	adc	r27, r1
    1f86:	8f 87       	std	Y+15, r24	; 0x0f
    1f88:	98 8b       	std	Y+16, r25	; 0x10
    1f8a:	a9 8b       	std	Y+17, r26	; 0x11
    1f8c:	ba 8b       	std	Y+18, r27	; 0x12
    1f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f90:	98 89       	ldd	r25, Y+16	; 0x10
    1f92:	a9 89       	ldd	r26, Y+17	; 0x11
    1f94:	ba 89       	ldd	r27, Y+18	; 0x12
    1f96:	8a 30       	cpi	r24, 0x0A	; 10
    1f98:	91 05       	cpc	r25, r1
    1f9a:	a1 05       	cpc	r26, r1
    1f9c:	b1 05       	cpc	r27, r1
    1f9e:	0c f4       	brge	.+2      	; 0x1fa2 <SevSeg_voidSingleAutoCounter+0x194>
    1fa0:	69 cf       	rjmp	.-302    	; 0x1e74 <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    1fa2:	a1 96       	adiw	r28, 0x21	; 33
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	a5 97       	sbiw	r28, 0x25	; 37
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    1fc8:	ce 01       	movw	r24, r28
    1fca:	47 96       	adiw	r24, 0x17	; 23
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
    1fd0:	e3 ee       	ldi	r30, 0xE3	; 227
    1fd2:	f1 e0       	ldi	r31, 0x01	; 1
    1fd4:	fc a3       	std	Y+36, r31	; 0x24
    1fd6:	eb a3       	std	Y+35, r30	; 0x23
    1fd8:	fa e0       	ldi	r31, 0x0A	; 10
    1fda:	fd a3       	std	Y+37, r31	; 0x25
    1fdc:	eb a1       	ldd	r30, Y+35	; 0x23
    1fde:	fc a1       	ldd	r31, Y+36	; 0x24
    1fe0:	00 80       	ld	r0, Z
    1fe2:	8b a1       	ldd	r24, Y+35	; 0x23
    1fe4:	9c a1       	ldd	r25, Y+36	; 0x24
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	9c a3       	std	Y+36, r25	; 0x24
    1fea:	8b a3       	std	Y+35, r24	; 0x23
    1fec:	e9 a1       	ldd	r30, Y+33	; 0x21
    1fee:	fa a1       	ldd	r31, Y+34	; 0x22
    1ff0:	00 82       	st	Z, r0
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	9d a1       	ldd	r25, Y+37	; 0x25
    1ffe:	91 50       	subi	r25, 0x01	; 1
    2000:	9d a3       	std	Y+37, r25	; 0x25
    2002:	ed a1       	ldd	r30, Y+37	; 0x25
    2004:	ee 23       	and	r30, r30
    2006:	51 f7       	brne	.-44     	; 0x1fdc <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2008:	1b 8a       	std	Y+19, r1	; 0x13
    200a:	1c 8a       	std	Y+20, r1	; 0x14
    200c:	1d 8a       	std	Y+21, r1	; 0x15
    200e:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    2010:	1f 86       	std	Y+15, r1	; 0x0f
    2012:	18 8a       	std	Y+16, r1	; 0x10
    2014:	19 8a       	std	Y+17, r1	; 0x11
    2016:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    2018:	1b 8a       	std	Y+19, r1	; 0x13
    201a:	1c 8a       	std	Y+20, r1	; 0x14
    201c:	1d 8a       	std	Y+21, r1	; 0x15
    201e:	1e 8a       	std	Y+22, r1	; 0x16
    2020:	b7 c0       	rjmp	.+366    	; 0x2190 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    2022:	8b 89       	ldd	r24, Y+19	; 0x13
    2024:	9c 89       	ldd	r25, Y+20	; 0x14
    2026:	ad 89       	ldd	r26, Y+21	; 0x15
    2028:	be 89       	ldd	r27, Y+22	; 0x16
    202a:	9e 01       	movw	r18, r28
    202c:	29 5e       	subi	r18, 0xE9	; 233
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	f9 01       	movw	r30, r18
    2032:	e8 0f       	add	r30, r24
    2034:	f9 1f       	adc	r31, r25
    2036:	80 81       	ld	r24, Z
    2038:	98 2f       	mov	r25, r24
    203a:	84 e0       	ldi	r24, 0x04	; 4
    203c:	69 2f       	mov	r22, r25
    203e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    2042:	1f 86       	std	Y+15, r1	; 0x0f
    2044:	18 8a       	std	Y+16, r1	; 0x10
    2046:	19 8a       	std	Y+17, r1	; 0x11
    2048:	1a 8a       	std	Y+18, r1	; 0x12
    204a:	8d c0       	rjmp	.+282    	; 0x2166 <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    204c:	8f 85       	ldd	r24, Y+15	; 0x0f
    204e:	98 89       	ldd	r25, Y+16	; 0x10
    2050:	a9 89       	ldd	r26, Y+17	; 0x11
    2052:	ba 89       	ldd	r27, Y+18	; 0x12
    2054:	9e 01       	movw	r18, r28
    2056:	29 5e       	subi	r18, 0xE9	; 233
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	f9 01       	movw	r30, r18
    205c:	e8 0f       	add	r30, r24
    205e:	f9 1f       	adc	r31, r25
    2060:	80 81       	ld	r24, Z
    2062:	98 2f       	mov	r25, r24
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	69 2f       	mov	r22, r25
    2068:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e2       	ldi	r26, 0x20	; 32
    2072:	b1 e4       	ldi	r27, 0x41	; 65
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	ad 87       	std	Y+13, r26	; 0x0d
    207a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8f 83       	std	Y+7, r24	; 0x07
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	a9 87       	std	Y+9, r26	; 0x09
    209a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <SevSeg_voidDoubleAutoCounter+0x16a>
    2100:	80 e9       	ldi	r24, 0x90	; 144
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <SevSeg_voidDoubleAutoCounter+0x158>
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <SevSeg_voidDoubleAutoCounter+0x14c>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <SevSeg_voidDoubleAutoCounter+0x194>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    2150:	8f 85       	ldd	r24, Y+15	; 0x0f
    2152:	98 89       	ldd	r25, Y+16	; 0x10
    2154:	a9 89       	ldd	r26, Y+17	; 0x11
    2156:	ba 89       	ldd	r27, Y+18	; 0x12
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	a1 1d       	adc	r26, r1
    215c:	b1 1d       	adc	r27, r1
    215e:	8f 87       	std	Y+15, r24	; 0x0f
    2160:	98 8b       	std	Y+16, r25	; 0x10
    2162:	a9 8b       	std	Y+17, r26	; 0x11
    2164:	ba 8b       	std	Y+18, r27	; 0x12
    2166:	8f 85       	ldd	r24, Y+15	; 0x0f
    2168:	98 89       	ldd	r25, Y+16	; 0x10
    216a:	a9 89       	ldd	r26, Y+17	; 0x11
    216c:	ba 89       	ldd	r27, Y+18	; 0x12
    216e:	8a 30       	cpi	r24, 0x0A	; 10
    2170:	91 05       	cpc	r25, r1
    2172:	a1 05       	cpc	r26, r1
    2174:	b1 05       	cpc	r27, r1
    2176:	0c f4       	brge	.+2      	; 0x217a <SevSeg_voidDoubleAutoCounter+0x1c6>
    2178:	69 cf       	rjmp	.-302    	; 0x204c <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    217a:	8b 89       	ldd	r24, Y+19	; 0x13
    217c:	9c 89       	ldd	r25, Y+20	; 0x14
    217e:	ad 89       	ldd	r26, Y+21	; 0x15
    2180:	be 89       	ldd	r27, Y+22	; 0x16
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	a1 1d       	adc	r26, r1
    2186:	b1 1d       	adc	r27, r1
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	ad 8b       	std	Y+21, r26	; 0x15
    218e:	be 8b       	std	Y+22, r27	; 0x16
    2190:	8b 89       	ldd	r24, Y+19	; 0x13
    2192:	9c 89       	ldd	r25, Y+20	; 0x14
    2194:	ad 89       	ldd	r26, Y+21	; 0x15
    2196:	be 89       	ldd	r27, Y+22	; 0x16
    2198:	8a 30       	cpi	r24, 0x0A	; 10
    219a:	91 05       	cpc	r25, r1
    219c:	a1 05       	cpc	r26, r1
    219e:	b1 05       	cpc	r27, r1
    21a0:	0c f4       	brge	.+2      	; 0x21a4 <SevSeg_voidDoubleAutoCounter+0x1f0>
    21a2:	3f cf       	rjmp	.-386    	; 0x2022 <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    21a4:	a5 96       	adiw	r28, 0x25	; 37
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	e1 97       	sbiw	r28, 0x31	; 49
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	8b a7       	std	Y+43, r24	; 0x2b
    21cc:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    21ce:	ce 01       	movw	r24, r28
    21d0:	81 96       	adiw	r24, 0x21	; 33
    21d2:	9e a7       	std	Y+46, r25	; 0x2e
    21d4:	8d a7       	std	Y+45, r24	; 0x2d
    21d6:	ed ee       	ldi	r30, 0xED	; 237
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	f8 ab       	std	Y+48, r31	; 0x30
    21dc:	ef a7       	std	Y+47, r30	; 0x2f
    21de:	fa e0       	ldi	r31, 0x0A	; 10
    21e0:	f9 ab       	std	Y+49, r31	; 0x31
    21e2:	ef a5       	ldd	r30, Y+47	; 0x2f
    21e4:	f8 a9       	ldd	r31, Y+48	; 0x30
    21e6:	00 80       	ld	r0, Z
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	ed a5       	ldd	r30, Y+45	; 0x2d
    21f4:	fe a5       	ldd	r31, Y+46	; 0x2e
    21f6:	00 82       	st	Z, r0
    21f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	9e a7       	std	Y+46, r25	; 0x2e
    2200:	8d a7       	std	Y+45, r24	; 0x2d
    2202:	99 a9       	ldd	r25, Y+49	; 0x31
    2204:	91 50       	subi	r25, 0x01	; 1
    2206:	99 ab       	std	Y+49, r25	; 0x31
    2208:	e9 a9       	ldd	r30, Y+49	; 0x31
    220a:	ee 23       	and	r30, r30
    220c:	51 f7       	brne	.-44     	; 0x21e2 <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    220e:	1d 8e       	std	Y+29, r1	; 0x1d
    2210:	1e 8e       	std	Y+30, r1	; 0x1e
    2212:	1f 8e       	std	Y+31, r1	; 0x1f
    2214:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    2216:	8b a5       	ldd	r24, Y+43	; 0x2b
    2218:	88 23       	and	r24, r24
    221a:	0c f4       	brge	.+2      	; 0x221e <SevSeg_voidSingleRangeCounter+0x68>
    221c:	64 c1       	rjmp	.+712    	; 0x24e6 <SevSeg_voidSingleRangeCounter+0x330>
    221e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2220:	8a 30       	cpi	r24, 0x0A	; 10
    2222:	0c f0       	brlt	.+2      	; 0x2226 <SevSeg_voidSingleRangeCounter+0x70>
    2224:	60 c1       	rjmp	.+704    	; 0x24e6 <SevSeg_voidSingleRangeCounter+0x330>
    2226:	8c a5       	ldd	r24, Y+44	; 0x2c
    2228:	8a 30       	cpi	r24, 0x0A	; 10
    222a:	0c f0       	brlt	.+2      	; 0x222e <SevSeg_voidSingleRangeCounter+0x78>
    222c:	5c c1       	rjmp	.+696    	; 0x24e6 <SevSeg_voidSingleRangeCounter+0x330>
    222e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2230:	88 23       	and	r24, r24
    2232:	0c f4       	brge	.+2      	; 0x2236 <SevSeg_voidSingleRangeCounter+0x80>
    2234:	58 c1       	rjmp	.+688    	; 0x24e6 <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    2236:	9b a5       	ldd	r25, Y+43	; 0x2b
    2238:	8c a5       	ldd	r24, Y+44	; 0x2c
    223a:	98 17       	cp	r25, r24
    223c:	0c f0       	brlt	.+2      	; 0x2240 <SevSeg_voidSingleRangeCounter+0x8a>
    223e:	aa c0       	rjmp	.+340    	; 0x2394 <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    2240:	8b a5       	ldd	r24, Y+43	; 0x2b
    2242:	99 27       	eor	r25, r25
    2244:	87 fd       	sbrc	r24, 7
    2246:	90 95       	com	r25
    2248:	a9 2f       	mov	r26, r25
    224a:	b9 2f       	mov	r27, r25
    224c:	8d 8f       	std	Y+29, r24	; 0x1d
    224e:	9e 8f       	std	Y+30, r25	; 0x1e
    2250:	af 8f       	std	Y+31, r26	; 0x1f
    2252:	b8 a3       	std	Y+32, r27	; 0x20
    2254:	8d c0       	rjmp	.+282    	; 0x2370 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2256:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2258:	9e 8d       	ldd	r25, Y+30	; 0x1e
    225a:	af 8d       	ldd	r26, Y+31	; 0x1f
    225c:	b8 a1       	ldd	r27, Y+32	; 0x20
    225e:	9e 01       	movw	r18, r28
    2260:	2f 5d       	subi	r18, 0xDF	; 223
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	f9 01       	movw	r30, r18
    2266:	e8 0f       	add	r30, r24
    2268:	f9 1f       	adc	r31, r25
    226a:	80 81       	ld	r24, Z
    226c:	98 2f       	mov	r25, r24
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	69 2f       	mov	r22, r25
    2272:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e2       	ldi	r26, 0x20	; 32
    227c:	b1 e4       	ldi	r27, 0x41	; 65
    227e:	89 8f       	std	Y+25, r24	; 0x19
    2280:	9a 8f       	std	Y+26, r25	; 0x1a
    2282:	ab 8f       	std	Y+27, r26	; 0x1b
    2284:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	69 8d       	ldd	r22, Y+25	; 0x19
    2288:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a e7       	ldi	r20, 0x7A	; 122
    2294:	55 e4       	ldi	r21, 0x45	; 69
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8d 8b       	std	Y+21, r24	; 0x15
    22a0:	9e 8b       	std	Y+22, r25	; 0x16
    22a2:	af 8b       	std	Y+23, r26	; 0x17
    22a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a6:	6d 89       	ldd	r22, Y+21	; 0x15
    22a8:	7e 89       	ldd	r23, Y+22	; 0x16
    22aa:	8f 89       	ldd	r24, Y+23	; 0x17
    22ac:	98 8d       	ldd	r25, Y+24	; 0x18
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    22c8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ca:	7e 89       	ldd	r23, Y+22	; 0x16
    22cc:	8f 89       	ldd	r24, Y+23	; 0x17
    22ce:	98 8d       	ldd	r25, Y+24	; 0x18
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	69 8d       	ldd	r22, Y+25	; 0x19
    22e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <SevSeg_voidSingleRangeCounter+0x172>
    230a:	80 e9       	ldi	r24, 0x90	; 144
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	9a 8b       	std	Y+18, r25	; 0x12
    2310:	89 8b       	std	Y+17, r24	; 0x11
    2312:	89 89       	ldd	r24, Y+17	; 0x11
    2314:	9a 89       	ldd	r25, Y+18	; 0x12
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <SevSeg_voidSingleRangeCounter+0x160>
    231a:	9a 8b       	std	Y+18, r25	; 0x12
    231c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	8b 89       	ldd	r24, Y+19	; 0x13
    2320:	9c 89       	ldd	r25, Y+20	; 0x14
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9c 8b       	std	Y+20, r25	; 0x14
    2326:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <SevSeg_voidSingleRangeCounter+0x154>
    2330:	14 c0       	rjmp	.+40     	; 0x235a <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	6d 89       	ldd	r22, Y+21	; 0x15
    2334:	7e 89       	ldd	r23, Y+22	; 0x16
    2336:	8f 89       	ldd	r24, Y+23	; 0x17
    2338:	98 8d       	ldd	r25, Y+24	; 0x18
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9c 8b       	std	Y+20, r25	; 0x14
    2344:	8b 8b       	std	Y+19, r24	; 0x13
    2346:	8b 89       	ldd	r24, Y+19	; 0x13
    2348:	9c 89       	ldd	r25, Y+20	; 0x14
    234a:	98 8b       	std	Y+16, r25	; 0x10
    234c:	8f 87       	std	Y+15, r24	; 0x0f
    234e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2350:	98 89       	ldd	r25, Y+16	; 0x10
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <SevSeg_voidSingleRangeCounter+0x19c>
    2356:	98 8b       	std	Y+16, r25	; 0x10
    2358:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    235a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    235c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    235e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2360:	b8 a1       	ldd	r27, Y+32	; 0x20
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	a1 1d       	adc	r26, r1
    2366:	b1 1d       	adc	r27, r1
    2368:	8d 8f       	std	Y+29, r24	; 0x1d
    236a:	9e 8f       	std	Y+30, r25	; 0x1e
    236c:	af 8f       	std	Y+31, r26	; 0x1f
    236e:	b8 a3       	std	Y+32, r27	; 0x20
    2370:	8c a5       	ldd	r24, Y+44	; 0x2c
    2372:	28 2f       	mov	r18, r24
    2374:	33 27       	eor	r19, r19
    2376:	27 fd       	sbrc	r18, 7
    2378:	30 95       	com	r19
    237a:	43 2f       	mov	r20, r19
    237c:	53 2f       	mov	r21, r19
    237e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2382:	af 8d       	ldd	r26, Y+31	; 0x1f
    2384:	b8 a1       	ldd	r27, Y+32	; 0x20
    2386:	82 17       	cp	r24, r18
    2388:	93 07       	cpc	r25, r19
    238a:	a4 07       	cpc	r26, r20
    238c:	b5 07       	cpc	r27, r21
    238e:	0c f4       	brge	.+2      	; 0x2392 <SevSeg_voidSingleRangeCounter+0x1dc>
    2390:	62 cf       	rjmp	.-316    	; 0x2256 <SevSeg_voidSingleRangeCounter+0xa0>
    2392:	a9 c0       	rjmp	.+338    	; 0x24e6 <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    2394:	8b a5       	ldd	r24, Y+43	; 0x2b
    2396:	99 27       	eor	r25, r25
    2398:	87 fd       	sbrc	r24, 7
    239a:	90 95       	com	r25
    239c:	a9 2f       	mov	r26, r25
    239e:	b9 2f       	mov	r27, r25
    23a0:	8d 8f       	std	Y+29, r24	; 0x1d
    23a2:	9e 8f       	std	Y+30, r25	; 0x1e
    23a4:	af 8f       	std	Y+31, r26	; 0x1f
    23a6:	b8 a3       	std	Y+32, r27	; 0x20
    23a8:	8d c0       	rjmp	.+282    	; 0x24c4 <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    23aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ae:	af 8d       	ldd	r26, Y+31	; 0x1f
    23b0:	b8 a1       	ldd	r27, Y+32	; 0x20
    23b2:	9e 01       	movw	r18, r28
    23b4:	2f 5d       	subi	r18, 0xDF	; 223
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
    23b8:	f9 01       	movw	r30, r18
    23ba:	e8 0f       	add	r30, r24
    23bc:	f9 1f       	adc	r31, r25
    23be:	80 81       	ld	r24, Z
    23c0:	98 2f       	mov	r25, r24
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	69 2f       	mov	r22, r25
    23c6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e2       	ldi	r26, 0x20	; 32
    23d0:	b1 e4       	ldi	r27, 0x41	; 65
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a e7       	ldi	r20, 0x7A	; 122
    23e8:	55 e4       	ldi	r21, 0x45	; 69
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <SevSeg_voidSingleRangeCounter+0x2c6>
    245e:	80 e9       	ldi	r24, 0x90	; 144
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <SevSeg_voidSingleRangeCounter+0x2b4>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <SevSeg_voidSingleRangeCounter+0x2a8>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <SevSeg_voidSingleRangeCounter+0x2f0>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    24ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b2:	af 8d       	ldd	r26, Y+31	; 0x1f
    24b4:	b8 a1       	ldd	r27, Y+32	; 0x20
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	a1 09       	sbc	r26, r1
    24ba:	b1 09       	sbc	r27, r1
    24bc:	8d 8f       	std	Y+29, r24	; 0x1d
    24be:	9e 8f       	std	Y+30, r25	; 0x1e
    24c0:	af 8f       	std	Y+31, r26	; 0x1f
    24c2:	b8 a3       	std	Y+32, r27	; 0x20
    24c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    24c6:	28 2f       	mov	r18, r24
    24c8:	33 27       	eor	r19, r19
    24ca:	27 fd       	sbrc	r18, 7
    24cc:	30 95       	com	r19
    24ce:	43 2f       	mov	r20, r19
    24d0:	53 2f       	mov	r21, r19
    24d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    24d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    24da:	82 17       	cp	r24, r18
    24dc:	93 07       	cpc	r25, r19
    24de:	a4 07       	cpc	r26, r20
    24e0:	b5 07       	cpc	r27, r21
    24e2:	0c f0       	brlt	.+2      	; 0x24e6 <SevSeg_voidSingleRangeCounter+0x330>
    24e4:	62 cf       	rjmp	.-316    	; 0x23aa <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    24e6:	e1 96       	adiw	r28, 0x31	; 49
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	e9 97       	sbiw	r28, 0x39	; 57
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	8b ab       	std	Y+51, r24	; 0x33
    250e:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    2510:	ce 01       	movw	r24, r28
    2512:	89 96       	adiw	r24, 0x29	; 41
    2514:	9e ab       	std	Y+54, r25	; 0x36
    2516:	8d ab       	std	Y+53, r24	; 0x35
    2518:	e7 ef       	ldi	r30, 0xF7	; 247
    251a:	f1 e0       	ldi	r31, 0x01	; 1
    251c:	f8 af       	std	Y+56, r31	; 0x38
    251e:	ef ab       	std	Y+55, r30	; 0x37
    2520:	fa e0       	ldi	r31, 0x0A	; 10
    2522:	f9 af       	std	Y+57, r31	; 0x39
    2524:	ef a9       	ldd	r30, Y+55	; 0x37
    2526:	f8 ad       	ldd	r31, Y+56	; 0x38
    2528:	00 80       	ld	r0, Z
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	98 af       	std	Y+56, r25	; 0x38
    2532:	8f ab       	std	Y+55, r24	; 0x37
    2534:	ed a9       	ldd	r30, Y+53	; 0x35
    2536:	fe a9       	ldd	r31, Y+54	; 0x36
    2538:	00 82       	st	Z, r0
    253a:	8d a9       	ldd	r24, Y+53	; 0x35
    253c:	9e a9       	ldd	r25, Y+54	; 0x36
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	9e ab       	std	Y+54, r25	; 0x36
    2542:	8d ab       	std	Y+53, r24	; 0x35
    2544:	99 ad       	ldd	r25, Y+57	; 0x39
    2546:	91 50       	subi	r25, 0x01	; 1
    2548:	99 af       	std	Y+57, r25	; 0x39
    254a:	e9 ad       	ldd	r30, Y+57	; 0x39
    254c:	ee 23       	and	r30, r30
    254e:	51 f7       	brne	.-44     	; 0x2524 <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    2550:	8b a9       	ldd	r24, Y+51	; 0x33
    2552:	9a e0       	ldi	r25, 0x0A	; 10
    2554:	69 2f       	mov	r22, r25
    2556:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    255a:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    255c:	8b a9       	ldd	r24, Y+51	; 0x33
    255e:	9a e0       	ldi	r25, 0x0A	; 10
    2560:	69 2f       	mov	r22, r25
    2562:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2566:	89 2f       	mov	r24, r25
    2568:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    256a:	8c a9       	ldd	r24, Y+52	; 0x34
    256c:	9a e0       	ldi	r25, 0x0A	; 10
    256e:	69 2f       	mov	r22, r25
    2570:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2574:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    2576:	8c a9       	ldd	r24, Y+52	; 0x34
    2578:	9a e0       	ldi	r25, 0x0A	; 10
    257a:	69 2f       	mov	r22, r25
    257c:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2580:	89 2f       	mov	r24, r25
    2582:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    2584:	19 a2       	std	Y+33, r1	; 0x21
    2586:	1a a2       	std	Y+34, r1	; 0x22
    2588:	1b a2       	std	Y+35, r1	; 0x23
    258a:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    258c:	1d 8e       	std	Y+29, r1	; 0x1d
    258e:	1e 8e       	std	Y+30, r1	; 0x1e
    2590:	1f 8e       	std	Y+31, r1	; 0x1f
    2592:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    2594:	88 a5       	ldd	r24, Y+40	; 0x28
    2596:	88 23       	and	r24, r24
    2598:	0c f4       	brge	.+2      	; 0x259c <SevSeg_voidDoubleRangeCounter+0xa4>
    259a:	05 c2       	rjmp	.+1034   	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>
    259c:	88 a5       	ldd	r24, Y+40	; 0x28
    259e:	8a 30       	cpi	r24, 0x0A	; 10
    25a0:	0c f0       	brlt	.+2      	; 0x25a4 <SevSeg_voidDoubleRangeCounter+0xac>
    25a2:	01 c2       	rjmp	.+1026   	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>
    25a4:	8e a1       	ldd	r24, Y+38	; 0x26
    25a6:	8a 30       	cpi	r24, 0x0A	; 10
    25a8:	0c f0       	brlt	.+2      	; 0x25ac <SevSeg_voidDoubleRangeCounter+0xb4>
    25aa:	fd c1       	rjmp	.+1018   	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>
    25ac:	8e a1       	ldd	r24, Y+38	; 0x26
    25ae:	88 23       	and	r24, r24
    25b0:	0c f4       	brge	.+2      	; 0x25b4 <SevSeg_voidDoubleRangeCounter+0xbc>
    25b2:	f9 c1       	rjmp	.+1010   	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    25b4:	9b a9       	ldd	r25, Y+51	; 0x33
    25b6:	8c a9       	ldd	r24, Y+52	; 0x34
    25b8:	98 17       	cp	r25, r24
    25ba:	0c f0       	brlt	.+2      	; 0x25be <SevSeg_voidDoubleRangeCounter+0xc6>
    25bc:	fc c0       	rjmp	.+504    	; 0x27b6 <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    25be:	88 a5       	ldd	r24, Y+40	; 0x28
    25c0:	99 27       	eor	r25, r25
    25c2:	87 fd       	sbrc	r24, 7
    25c4:	90 95       	com	r25
    25c6:	a9 2f       	mov	r26, r25
    25c8:	b9 2f       	mov	r27, r25
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	9a a3       	std	Y+34, r25	; 0x22
    25ce:	ab a3       	std	Y+35, r26	; 0x23
    25d0:	bc a3       	std	Y+36, r27	; 0x24
    25d2:	df c0       	rjmp	.+446    	; 0x2792 <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    25d4:	89 a1       	ldd	r24, Y+33	; 0x21
    25d6:	9a a1       	ldd	r25, Y+34	; 0x22
    25d8:	ab a1       	ldd	r26, Y+35	; 0x23
    25da:	bc a1       	ldd	r27, Y+36	; 0x24
    25dc:	9e 01       	movw	r18, r28
    25de:	27 5d       	subi	r18, 0xD7	; 215
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	f9 01       	movw	r30, r18
    25e4:	e8 0f       	add	r30, r24
    25e6:	f9 1f       	adc	r31, r25
    25e8:	80 81       	ld	r24, Z
    25ea:	98 2f       	mov	r25, r24
    25ec:	84 e0       	ldi	r24, 0x04	; 4
    25ee:	69 2f       	mov	r22, r25
    25f0:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    25f4:	8f a1       	ldd	r24, Y+39	; 0x27
    25f6:	99 27       	eor	r25, r25
    25f8:	87 fd       	sbrc	r24, 7
    25fa:	90 95       	com	r25
    25fc:	a9 2f       	mov	r26, r25
    25fe:	b9 2f       	mov	r27, r25
    2600:	8d 8f       	std	Y+29, r24	; 0x1d
    2602:	9e 8f       	std	Y+30, r25	; 0x1e
    2604:	af 8f       	std	Y+31, r26	; 0x1f
    2606:	b8 a3       	std	Y+32, r27	; 0x20
    2608:	ae c0       	rjmp	.+348    	; 0x2766 <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    260a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2610:	b8 a1       	ldd	r27, Y+32	; 0x20
    2612:	9e 01       	movw	r18, r28
    2614:	27 5d       	subi	r18, 0xD7	; 215
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
    2618:	f9 01       	movw	r30, r18
    261a:	e8 0f       	add	r30, r24
    261c:	f9 1f       	adc	r31, r25
    261e:	80 81       	ld	r24, Z
    2620:	98 2f       	mov	r25, r24
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	69 2f       	mov	r22, r25
    2626:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	a0 e2       	ldi	r26, 0x20	; 32
    2630:	b1 e4       	ldi	r27, 0x41	; 65
    2632:	89 8f       	std	Y+25, r24	; 0x19
    2634:	9a 8f       	std	Y+26, r25	; 0x1a
    2636:	ab 8f       	std	Y+27, r26	; 0x1b
    2638:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	69 8d       	ldd	r22, Y+25	; 0x19
    263c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	55 e4       	ldi	r21, 0x45	; 69
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8d 8b       	std	Y+21, r24	; 0x15
    2654:	9e 8b       	std	Y+22, r25	; 0x16
    2656:	af 8b       	std	Y+23, r26	; 0x17
    2658:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    267c:	6d 89       	ldd	r22, Y+21	; 0x15
    267e:	7e 89       	ldd	r23, Y+22	; 0x16
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	98 8d       	ldd	r25, Y+24	; 0x18
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	4c f5       	brge	.+82     	; 0x26e6 <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	69 8d       	ldd	r22, Y+25	; 0x19
    2696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <SevSeg_voidDoubleRangeCounter+0x1e4>
    26be:	80 e9       	ldi	r24, 0x90	; 144
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	9a 8b       	std	Y+18, r25	; 0x12
    26c4:	89 8b       	std	Y+17, r24	; 0x11
    26c6:	89 89       	ldd	r24, Y+17	; 0x11
    26c8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <SevSeg_voidDoubleRangeCounter+0x1d2>
    26ce:	9a 8b       	std	Y+18, r25	; 0x12
    26d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8b 89       	ldd	r24, Y+19	; 0x13
    26d4:	9c 89       	ldd	r25, Y+20	; 0x14
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8b 89       	ldd	r24, Y+19	; 0x13
    26de:	9c 89       	ldd	r25, Y+20	; 0x14
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <SevSeg_voidDoubleRangeCounter+0x1c6>
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	6d 89       	ldd	r22, Y+21	; 0x15
    26e8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9c 8b       	std	Y+20, r25	; 0x14
    26f8:	8b 8b       	std	Y+19, r24	; 0x13
    26fa:	8b 89       	ldd	r24, Y+19	; 0x13
    26fc:	9c 89       	ldd	r25, Y+20	; 0x14
    26fe:	98 8b       	std	Y+16, r25	; 0x10
    2700:	8f 87       	std	Y+15, r24	; 0x0f
    2702:	8f 85       	ldd	r24, Y+15	; 0x0f
    2704:	98 89       	ldd	r25, Y+16	; 0x10
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <SevSeg_voidDoubleRangeCounter+0x20e>
    270a:	98 8b       	std	Y+16, r25	; 0x10
    270c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    270e:	8d a1       	ldd	r24, Y+37	; 0x25
    2710:	28 2f       	mov	r18, r24
    2712:	33 27       	eor	r19, r19
    2714:	27 fd       	sbrc	r18, 7
    2716:	30 95       	com	r19
    2718:	43 2f       	mov	r20, r19
    271a:	53 2f       	mov	r21, r19
    271c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    271e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2720:	af 8d       	ldd	r26, Y+31	; 0x1f
    2722:	b8 a1       	ldd	r27, Y+32	; 0x20
    2724:	28 17       	cp	r18, r24
    2726:	39 07       	cpc	r19, r25
    2728:	4a 07       	cpc	r20, r26
    272a:	5b 07       	cpc	r21, r27
    272c:	89 f4       	brne	.+34     	; 0x2750 <SevSeg_voidDoubleRangeCounter+0x258>
    272e:	8e a1       	ldd	r24, Y+38	; 0x26
    2730:	28 2f       	mov	r18, r24
    2732:	33 27       	eor	r19, r19
    2734:	27 fd       	sbrc	r18, 7
    2736:	30 95       	com	r19
    2738:	43 2f       	mov	r20, r19
    273a:	53 2f       	mov	r21, r19
    273c:	89 a1       	ldd	r24, Y+33	; 0x21
    273e:	9a a1       	ldd	r25, Y+34	; 0x22
    2740:	ab a1       	ldd	r26, Y+35	; 0x23
    2742:	bc a1       	ldd	r27, Y+36	; 0x24
    2744:	28 17       	cp	r18, r24
    2746:	39 07       	cpc	r19, r25
    2748:	4a 07       	cpc	r20, r26
    274a:	5b 07       	cpc	r21, r27
    274c:	09 f4       	brne	.+2      	; 0x2750 <SevSeg_voidDoubleRangeCounter+0x258>
    274e:	2b c1       	rjmp	.+598    	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2754:	af 8d       	ldd	r26, Y+31	; 0x1f
    2756:	b8 a1       	ldd	r27, Y+32	; 0x20
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	a1 1d       	adc	r26, r1
    275c:	b1 1d       	adc	r27, r1
    275e:	8d 8f       	std	Y+29, r24	; 0x1d
    2760:	9e 8f       	std	Y+30, r25	; 0x1e
    2762:	af 8f       	std	Y+31, r26	; 0x1f
    2764:	b8 a3       	std	Y+32, r27	; 0x20
    2766:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2768:	9e 8d       	ldd	r25, Y+30	; 0x1e
    276a:	af 8d       	ldd	r26, Y+31	; 0x1f
    276c:	b8 a1       	ldd	r27, Y+32	; 0x20
    276e:	8a 30       	cpi	r24, 0x0A	; 10
    2770:	91 05       	cpc	r25, r1
    2772:	a1 05       	cpc	r26, r1
    2774:	b1 05       	cpc	r27, r1
    2776:	0c f4       	brge	.+2      	; 0x277a <SevSeg_voidDoubleRangeCounter+0x282>
    2778:	48 cf       	rjmp	.-368    	; 0x260a <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    277a:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    277c:	89 a1       	ldd	r24, Y+33	; 0x21
    277e:	9a a1       	ldd	r25, Y+34	; 0x22
    2780:	ab a1       	ldd	r26, Y+35	; 0x23
    2782:	bc a1       	ldd	r27, Y+36	; 0x24
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	a1 1d       	adc	r26, r1
    2788:	b1 1d       	adc	r27, r1
    278a:	89 a3       	std	Y+33, r24	; 0x21
    278c:	9a a3       	std	Y+34, r25	; 0x22
    278e:	ab a3       	std	Y+35, r26	; 0x23
    2790:	bc a3       	std	Y+36, r27	; 0x24
    2792:	8e a1       	ldd	r24, Y+38	; 0x26
    2794:	28 2f       	mov	r18, r24
    2796:	33 27       	eor	r19, r19
    2798:	27 fd       	sbrc	r18, 7
    279a:	30 95       	com	r19
    279c:	43 2f       	mov	r20, r19
    279e:	53 2f       	mov	r21, r19
    27a0:	89 a1       	ldd	r24, Y+33	; 0x21
    27a2:	9a a1       	ldd	r25, Y+34	; 0x22
    27a4:	ab a1       	ldd	r26, Y+35	; 0x23
    27a6:	bc a1       	ldd	r27, Y+36	; 0x24
    27a8:	28 17       	cp	r18, r24
    27aa:	39 07       	cpc	r19, r25
    27ac:	4a 07       	cpc	r20, r26
    27ae:	5b 07       	cpc	r21, r27
    27b0:	0c f0       	brlt	.+2      	; 0x27b4 <SevSeg_voidDoubleRangeCounter+0x2bc>
    27b2:	10 cf       	rjmp	.-480    	; 0x25d4 <SevSeg_voidDoubleRangeCounter+0xdc>
    27b4:	f8 c0       	rjmp	.+496    	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    27b6:	88 a5       	ldd	r24, Y+40	; 0x28
    27b8:	99 27       	eor	r25, r25
    27ba:	87 fd       	sbrc	r24, 7
    27bc:	90 95       	com	r25
    27be:	a9 2f       	mov	r26, r25
    27c0:	b9 2f       	mov	r27, r25
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	ab a3       	std	Y+35, r26	; 0x23
    27c8:	bc a3       	std	Y+36, r27	; 0x24
    27ca:	dc c0       	rjmp	.+440    	; 0x2984 <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    27cc:	89 a1       	ldd	r24, Y+33	; 0x21
    27ce:	9a a1       	ldd	r25, Y+34	; 0x22
    27d0:	ab a1       	ldd	r26, Y+35	; 0x23
    27d2:	bc a1       	ldd	r27, Y+36	; 0x24
    27d4:	9e 01       	movw	r18, r28
    27d6:	27 5d       	subi	r18, 0xD7	; 215
    27d8:	3f 4f       	sbci	r19, 0xFF	; 255
    27da:	f9 01       	movw	r30, r18
    27dc:	e8 0f       	add	r30, r24
    27de:	f9 1f       	adc	r31, r25
    27e0:	80 81       	ld	r24, Z
    27e2:	98 2f       	mov	r25, r24
    27e4:	84 e0       	ldi	r24, 0x04	; 4
    27e6:	69 2f       	mov	r22, r25
    27e8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    27ec:	8f a1       	ldd	r24, Y+39	; 0x27
    27ee:	99 27       	eor	r25, r25
    27f0:	87 fd       	sbrc	r24, 7
    27f2:	90 95       	com	r25
    27f4:	a9 2f       	mov	r26, r25
    27f6:	b9 2f       	mov	r27, r25
    27f8:	8d 8f       	std	Y+29, r24	; 0x1d
    27fa:	9e 8f       	std	Y+30, r25	; 0x1e
    27fc:	af 8f       	std	Y+31, r26	; 0x1f
    27fe:	b8 a3       	std	Y+32, r27	; 0x20
    2800:	ad c0       	rjmp	.+346    	; 0x295c <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    2802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2804:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2806:	af 8d       	ldd	r26, Y+31	; 0x1f
    2808:	b8 a1       	ldd	r27, Y+32	; 0x20
    280a:	9e 01       	movw	r18, r28
    280c:	27 5d       	subi	r18, 0xD7	; 215
    280e:	3f 4f       	sbci	r19, 0xFF	; 255
    2810:	f9 01       	movw	r30, r18
    2812:	e8 0f       	add	r30, r24
    2814:	f9 1f       	adc	r31, r25
    2816:	80 81       	ld	r24, Z
    2818:	98 2f       	mov	r25, r24
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	69 2f       	mov	r22, r25
    281e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e2       	ldi	r26, 0x20	; 32
    2828:	b1 e4       	ldi	r27, 0x41	; 65
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a e7       	ldi	r20, 0x7A	; 122
    2840:	55 e4       	ldi	r21, 0x45	; 69
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <SevSeg_voidDoubleRangeCounter+0x3dc>
    28b6:	80 e9       	ldi	r24, 0x90	; 144
    28b8:	91 e0       	ldi	r25, 0x01	; 1
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <SevSeg_voidDoubleRangeCounter+0x3ca>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <SevSeg_voidDoubleRangeCounter+0x3be>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <SevSeg_voidDoubleRangeCounter+0x406>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2906:	8d a1       	ldd	r24, Y+37	; 0x25
    2908:	28 2f       	mov	r18, r24
    290a:	33 27       	eor	r19, r19
    290c:	27 fd       	sbrc	r18, 7
    290e:	30 95       	com	r19
    2910:	43 2f       	mov	r20, r19
    2912:	53 2f       	mov	r21, r19
    2914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2916:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2918:	af 8d       	ldd	r26, Y+31	; 0x1f
    291a:	b8 a1       	ldd	r27, Y+32	; 0x20
    291c:	28 17       	cp	r18, r24
    291e:	39 07       	cpc	r19, r25
    2920:	4a 07       	cpc	r20, r26
    2922:	5b 07       	cpc	r21, r27
    2924:	81 f4       	brne	.+32     	; 0x2946 <SevSeg_voidDoubleRangeCounter+0x44e>
    2926:	8e a1       	ldd	r24, Y+38	; 0x26
    2928:	28 2f       	mov	r18, r24
    292a:	33 27       	eor	r19, r19
    292c:	27 fd       	sbrc	r18, 7
    292e:	30 95       	com	r19
    2930:	43 2f       	mov	r20, r19
    2932:	53 2f       	mov	r21, r19
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	ab a1       	ldd	r26, Y+35	; 0x23
    293a:	bc a1       	ldd	r27, Y+36	; 0x24
    293c:	28 17       	cp	r18, r24
    293e:	39 07       	cpc	r19, r25
    2940:	4a 07       	cpc	r20, r26
    2942:	5b 07       	cpc	r21, r27
    2944:	81 f1       	breq	.+96     	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2946:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2948:	9e 8d       	ldd	r25, Y+30	; 0x1e
    294a:	af 8d       	ldd	r26, Y+31	; 0x1f
    294c:	b8 a1       	ldd	r27, Y+32	; 0x20
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	a1 09       	sbc	r26, r1
    2952:	b1 09       	sbc	r27, r1
    2954:	8d 8f       	std	Y+29, r24	; 0x1d
    2956:	9e 8f       	std	Y+30, r25	; 0x1e
    2958:	af 8f       	std	Y+31, r26	; 0x1f
    295a:	b8 a3       	std	Y+32, r27	; 0x20
    295c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2960:	af 8d       	ldd	r26, Y+31	; 0x1f
    2962:	b8 a1       	ldd	r27, Y+32	; 0x20
    2964:	bb 23       	and	r27, r27
    2966:	0c f0       	brlt	.+2      	; 0x296a <SevSeg_voidDoubleRangeCounter+0x472>
    2968:	4c cf       	rjmp	.-360    	; 0x2802 <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    296a:	89 e0       	ldi	r24, 0x09	; 9
    296c:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    296e:	89 a1       	ldd	r24, Y+33	; 0x21
    2970:	9a a1       	ldd	r25, Y+34	; 0x22
    2972:	ab a1       	ldd	r26, Y+35	; 0x23
    2974:	bc a1       	ldd	r27, Y+36	; 0x24
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	a1 09       	sbc	r26, r1
    297a:	b1 09       	sbc	r27, r1
    297c:	89 a3       	std	Y+33, r24	; 0x21
    297e:	9a a3       	std	Y+34, r25	; 0x22
    2980:	ab a3       	std	Y+35, r26	; 0x23
    2982:	bc a3       	std	Y+36, r27	; 0x24
    2984:	8e a1       	ldd	r24, Y+38	; 0x26
    2986:	28 2f       	mov	r18, r24
    2988:	33 27       	eor	r19, r19
    298a:	27 fd       	sbrc	r18, 7
    298c:	30 95       	com	r19
    298e:	43 2f       	mov	r20, r19
    2990:	53 2f       	mov	r21, r19
    2992:	89 a1       	ldd	r24, Y+33	; 0x21
    2994:	9a a1       	ldd	r25, Y+34	; 0x22
    2996:	ab a1       	ldd	r26, Y+35	; 0x23
    2998:	bc a1       	ldd	r27, Y+36	; 0x24
    299a:	82 17       	cp	r24, r18
    299c:	93 07       	cpc	r25, r19
    299e:	a4 07       	cpc	r26, r20
    29a0:	b5 07       	cpc	r27, r21
    29a2:	0c f0       	brlt	.+2      	; 0x29a6 <SevSeg_voidDoubleRangeCounter+0x4ae>
    29a4:	13 cf       	rjmp	.-474    	; 0x27cc <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    29a6:	e9 96       	adiw	r28, 0x39	; 57
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	00 d0       	rcall	.+0      	; 0x29be <SevSeg_voidBCDDisplay+0x6>
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	6a 81       	ldd	r22, Y+2	; 0x02
    29ca:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	ab 97       	sbiw	r28, 0x2b	; 43
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	8a a7       	std	Y+42, r24	; 0x2a
    29ee:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    29f0:	8a a5       	ldd	r24, Y+42	; 0x2a
    29f2:	9a e0       	ldi	r25, 0x0A	; 10
    29f4:	69 2f       	mov	r22, r25
    29f6:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    29fa:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    29fc:	8a a5       	ldd	r24, Y+42	; 0x2a
    29fe:	9a e0       	ldi	r25, 0x0A	; 10
    2a00:	69 2f       	mov	r22, r25
    2a02:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2a06:	89 2f       	mov	r24, r25
    2a08:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    2a0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a0c:	9a e0       	ldi	r25, 0x0A	; 10
    2a0e:	69 2f       	mov	r22, r25
    2a10:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2a14:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    2a16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a18:	9a e0       	ldi	r25, 0x0A	; 10
    2a1a:	69 2f       	mov	r22, r25
    2a1c:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2a20:	89 2f       	mov	r24, r25
    2a22:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    2a24:	1a a2       	std	Y+34, r1	; 0x22
    2a26:	1b a2       	std	Y+35, r1	; 0x23
    2a28:	1c a2       	std	Y+36, r1	; 0x24
    2a2a:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    2a2c:	1e 8e       	std	Y+30, r1	; 0x1e
    2a2e:	1f 8e       	std	Y+31, r1	; 0x1f
    2a30:	18 a2       	std	Y+32, r1	; 0x20
    2a32:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    2a34:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    2a36:	89 a5       	ldd	r24, Y+41	; 0x29
    2a38:	88 23       	and	r24, r24
    2a3a:	0c f4       	brge	.+2      	; 0x2a3e <SevSeg_voidBCDDoubleDisplay+0x66>
    2a3c:	11 c2       	rjmp	.+1058   	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>
    2a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a40:	8a 30       	cpi	r24, 0x0A	; 10
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <SevSeg_voidBCDDoubleDisplay+0x6e>
    2a44:	0d c2       	rjmp	.+1050   	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>
    2a46:	8f a1       	ldd	r24, Y+39	; 0x27
    2a48:	8a 30       	cpi	r24, 0x0A	; 10
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <SevSeg_voidBCDDoubleDisplay+0x76>
    2a4c:	09 c2       	rjmp	.+1042   	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>
    2a4e:	8f a1       	ldd	r24, Y+39	; 0x27
    2a50:	88 23       	and	r24, r24
    2a52:	0c f4       	brge	.+2      	; 0x2a56 <SevSeg_voidBCDDoubleDisplay+0x7e>
    2a54:	05 c2       	rjmp	.+1034   	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    2a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a5a:	98 17       	cp	r25, r24
    2a5c:	0c f0       	brlt	.+2      	; 0x2a60 <SevSeg_voidBCDDoubleDisplay+0x88>
    2a5e:	02 c1       	rjmp	.+516    	; 0x2c64 <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2a60:	89 a5       	ldd	r24, Y+41	; 0x29
    2a62:	99 27       	eor	r25, r25
    2a64:	87 fd       	sbrc	r24, 7
    2a66:	90 95       	com	r25
    2a68:	a9 2f       	mov	r26, r25
    2a6a:	b9 2f       	mov	r27, r25
    2a6c:	8a a3       	std	Y+34, r24	; 0x22
    2a6e:	9b a3       	std	Y+35, r25	; 0x23
    2a70:	ac a3       	std	Y+36, r26	; 0x24
    2a72:	bd a3       	std	Y+37, r27	; 0x25
    2a74:	e5 c0       	rjmp	.+458    	; 0x2c40 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    2a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a78:	8f 70       	andi	r24, 0x0F	; 15
    2a7a:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2a7c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a7e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a80:	ac a1       	ldd	r26, Y+36	; 0x24
    2a82:	bd a1       	ldd	r27, Y+37	; 0x25
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	aa 1f       	adc	r26, r26
    2a92:	bb 1f       	adc	r27, r27
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	aa 1f       	adc	r26, r26
    2aa2:	bb 1f       	adc	r27, r27
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa8:	89 2b       	or	r24, r25
    2aaa:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2aac:	88 a5       	ldd	r24, Y+40	; 0x28
    2aae:	99 27       	eor	r25, r25
    2ab0:	87 fd       	sbrc	r24, 7
    2ab2:	90 95       	com	r25
    2ab4:	a9 2f       	mov	r26, r25
    2ab6:	b9 2f       	mov	r27, r25
    2ab8:	8e 8f       	std	Y+30, r24	; 0x1e
    2aba:	9f 8f       	std	Y+31, r25	; 0x1f
    2abc:	a8 a3       	std	Y+32, r26	; 0x20
    2abe:	b9 a3       	std	Y+33, r27	; 0x21
    2ac0:	a9 c0       	rjmp	.+338    	; 0x2c14 <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    2ac2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac4:	80 7f       	andi	r24, 0xF0	; 240
    2ac6:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2ac8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2acc:	89 2b       	or	r24, r25
    2ace:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e2       	ldi	r26, 0x20	; 32
    2ad6:	b1 e4       	ldi	r27, 0x41	; 65
    2ad8:	89 8f       	std	Y+25, r24	; 0x19
    2ada:	9a 8f       	std	Y+26, r25	; 0x1a
    2adc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a e7       	ldi	r20, 0x7A	; 122
    2aee:	55 e4       	ldi	r21, 0x45	; 69
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8d 8b       	std	Y+21, r24	; 0x15
    2afa:	9e 8b       	std	Y+22, r25	; 0x16
    2afc:	af 8b       	std	Y+23, r26	; 0x17
    2afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b00:	6d 89       	ldd	r22, Y+21	; 0x15
    2b02:	7e 89       	ldd	r23, Y+22	; 0x16
    2b04:	8f 89       	ldd	r24, Y+23	; 0x17
    2b06:	98 8d       	ldd	r25, Y+24	; 0x18
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    2b22:	6d 89       	ldd	r22, Y+21	; 0x15
    2b24:	7e 89       	ldd	r23, Y+22	; 0x16
    2b26:	8f 89       	ldd	r24, Y+23	; 0x17
    2b28:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	4c f5       	brge	.+82     	; 0x2b8c <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <SevSeg_voidBCDDoubleDisplay+0x1aa>
    2b64:	80 e9       	ldi	r24, 0x90	; 144
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
    2b6c:	89 89       	ldd	r24, Y+17	; 0x11
    2b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <SevSeg_voidBCDDoubleDisplay+0x198>
    2b74:	9a 8b       	std	Y+18, r25	; 0x12
    2b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <SevSeg_voidBCDDoubleDisplay+0x18c>
    2b8a:	14 c0       	rjmp	.+40     	; 0x2bb4 <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
    2ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2baa:	98 89       	ldd	r25, Y+16	; 0x10
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <SevSeg_voidBCDDoubleDisplay+0x1d4>
    2bb0:	98 8b       	std	Y+16, r25	; 0x10
    2bb2:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2bb8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2bbc:	8e a1       	ldd	r24, Y+38	; 0x26
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	33 27       	eor	r19, r19
    2bc2:	27 fd       	sbrc	r18, 7
    2bc4:	30 95       	com	r19
    2bc6:	43 2f       	mov	r20, r19
    2bc8:	53 2f       	mov	r21, r19
    2bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bce:	a8 a1       	ldd	r26, Y+32	; 0x20
    2bd0:	b9 a1       	ldd	r27, Y+33	; 0x21
    2bd2:	28 17       	cp	r18, r24
    2bd4:	39 07       	cpc	r19, r25
    2bd6:	4a 07       	cpc	r20, r26
    2bd8:	5b 07       	cpc	r21, r27
    2bda:	89 f4       	brne	.+34     	; 0x2bfe <SevSeg_voidBCDDoubleDisplay+0x226>
    2bdc:	8f a1       	ldd	r24, Y+39	; 0x27
    2bde:	28 2f       	mov	r18, r24
    2be0:	33 27       	eor	r19, r19
    2be2:	27 fd       	sbrc	r18, 7
    2be4:	30 95       	com	r19
    2be6:	43 2f       	mov	r20, r19
    2be8:	53 2f       	mov	r21, r19
    2bea:	8a a1       	ldd	r24, Y+34	; 0x22
    2bec:	9b a1       	ldd	r25, Y+35	; 0x23
    2bee:	ac a1       	ldd	r26, Y+36	; 0x24
    2bf0:	bd a1       	ldd	r27, Y+37	; 0x25
    2bf2:	28 17       	cp	r18, r24
    2bf4:	39 07       	cpc	r19, r25
    2bf6:	4a 07       	cpc	r20, r26
    2bf8:	5b 07       	cpc	r21, r27
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <SevSeg_voidBCDDoubleDisplay+0x226>
    2bfc:	31 c1       	rjmp	.+610    	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2bfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c02:	a8 a1       	ldd	r26, Y+32	; 0x20
    2c04:	b9 a1       	ldd	r27, Y+33	; 0x21
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	a1 1d       	adc	r26, r1
    2c0a:	b1 1d       	adc	r27, r1
    2c0c:	8e 8f       	std	Y+30, r24	; 0x1e
    2c0e:	9f 8f       	std	Y+31, r25	; 0x1f
    2c10:	a8 a3       	std	Y+32, r26	; 0x20
    2c12:	b9 a3       	std	Y+33, r27	; 0x21
    2c14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c18:	a8 a1       	ldd	r26, Y+32	; 0x20
    2c1a:	b9 a1       	ldd	r27, Y+33	; 0x21
    2c1c:	8a 30       	cpi	r24, 0x0A	; 10
    2c1e:	91 05       	cpc	r25, r1
    2c20:	a1 05       	cpc	r26, r1
    2c22:	b1 05       	cpc	r27, r1
    2c24:	0c f4       	brge	.+2      	; 0x2c28 <SevSeg_voidBCDDoubleDisplay+0x250>
    2c26:	4d cf       	rjmp	.-358    	; 0x2ac2 <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2c28:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2c2a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c2c:	9b a1       	ldd	r25, Y+35	; 0x23
    2c2e:	ac a1       	ldd	r26, Y+36	; 0x24
    2c30:	bd a1       	ldd	r27, Y+37	; 0x25
    2c32:	01 96       	adiw	r24, 0x01	; 1
    2c34:	a1 1d       	adc	r26, r1
    2c36:	b1 1d       	adc	r27, r1
    2c38:	8a a3       	std	Y+34, r24	; 0x22
    2c3a:	9b a3       	std	Y+35, r25	; 0x23
    2c3c:	ac a3       	std	Y+36, r26	; 0x24
    2c3e:	bd a3       	std	Y+37, r27	; 0x25
    2c40:	8f a1       	ldd	r24, Y+39	; 0x27
    2c42:	28 2f       	mov	r18, r24
    2c44:	33 27       	eor	r19, r19
    2c46:	27 fd       	sbrc	r18, 7
    2c48:	30 95       	com	r19
    2c4a:	43 2f       	mov	r20, r19
    2c4c:	53 2f       	mov	r21, r19
    2c4e:	8a a1       	ldd	r24, Y+34	; 0x22
    2c50:	9b a1       	ldd	r25, Y+35	; 0x23
    2c52:	ac a1       	ldd	r26, Y+36	; 0x24
    2c54:	bd a1       	ldd	r27, Y+37	; 0x25
    2c56:	28 17       	cp	r18, r24
    2c58:	39 07       	cpc	r19, r25
    2c5a:	4a 07       	cpc	r20, r26
    2c5c:	5b 07       	cpc	r21, r27
    2c5e:	0c f0       	brlt	.+2      	; 0x2c62 <SevSeg_voidBCDDoubleDisplay+0x28a>
    2c60:	0a cf       	rjmp	.-492    	; 0x2a76 <SevSeg_voidBCDDoubleDisplay+0x9e>
    2c62:	fe c0       	rjmp	.+508    	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2c64:	89 a5       	ldd	r24, Y+41	; 0x29
    2c66:	99 27       	eor	r25, r25
    2c68:	87 fd       	sbrc	r24, 7
    2c6a:	90 95       	com	r25
    2c6c:	a9 2f       	mov	r26, r25
    2c6e:	b9 2f       	mov	r27, r25
    2c70:	8a a3       	std	Y+34, r24	; 0x22
    2c72:	9b a3       	std	Y+35, r25	; 0x23
    2c74:	ac a3       	std	Y+36, r26	; 0x24
    2c76:	bd a3       	std	Y+37, r27	; 0x25
    2c78:	e2 c0       	rjmp	.+452    	; 0x2e3e <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2c7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c7c:	8f 70       	andi	r24, 0x0F	; 15
    2c7e:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2c80:	8a a1       	ldd	r24, Y+34	; 0x22
    2c82:	9b a1       	ldd	r25, Y+35	; 0x23
    2c84:	ac a1       	ldd	r26, Y+36	; 0x24
    2c86:	bd a1       	ldd	r27, Y+37	; 0x25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	aa 1f       	adc	r26, r26
    2c8e:	bb 1f       	adc	r27, r27
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	aa 1f       	adc	r26, r26
    2c96:	bb 1f       	adc	r27, r27
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	aa 1f       	adc	r26, r26
    2c9e:	bb 1f       	adc	r27, r27
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	aa 1f       	adc	r26, r26
    2ca6:	bb 1f       	adc	r27, r27
    2ca8:	98 2f       	mov	r25, r24
    2caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cac:	89 2b       	or	r24, r25
    2cae:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2cb0:	88 a5       	ldd	r24, Y+40	; 0x28
    2cb2:	99 27       	eor	r25, r25
    2cb4:	87 fd       	sbrc	r24, 7
    2cb6:	90 95       	com	r25
    2cb8:	a9 2f       	mov	r26, r25
    2cba:	b9 2f       	mov	r27, r25
    2cbc:	8e 8f       	std	Y+30, r24	; 0x1e
    2cbe:	9f 8f       	std	Y+31, r25	; 0x1f
    2cc0:	a8 a3       	std	Y+32, r26	; 0x20
    2cc2:	b9 a3       	std	Y+33, r27	; 0x21
    2cc4:	a8 c0       	rjmp	.+336    	; 0x2e16 <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    2cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc8:	80 7f       	andi	r24, 0xF0	; 240
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd0:	89 2b       	or	r24, r25
    2cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 e2       	ldi	r26, 0x20	; 32
    2cda:	b1 e4       	ldi	r27, 0x41	; 65
    2cdc:	8b 87       	std	Y+11, r24	; 0x0b
    2cde:	9c 87       	std	Y+12, r25	; 0x0c
    2ce0:	ad 87       	std	Y+13, r26	; 0x0d
    2ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a e7       	ldi	r20, 0x7A	; 122
    2cf2:	55 e4       	ldi	r21, 0x45	; 69
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8f 83       	std	Y+7, r24	; 0x07
    2cfe:	98 87       	std	Y+8, r25	; 0x08
    2d00:	a9 87       	std	Y+9, r26	; 0x09
    2d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <SevSeg_voidBCDDoubleDisplay+0x3ae>
    2d68:	80 e9       	ldi	r24, 0x90	; 144
    2d6a:	91 e0       	ldi	r25, 0x01	; 1
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <SevSeg_voidBCDDoubleDisplay+0x39c>
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <SevSeg_voidBCDDoubleDisplay+0x390>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2dbc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2dc0:	8e a1       	ldd	r24, Y+38	; 0x26
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	33 27       	eor	r19, r19
    2dc6:	27 fd       	sbrc	r18, 7
    2dc8:	30 95       	com	r19
    2dca:	43 2f       	mov	r20, r19
    2dcc:	53 2f       	mov	r21, r19
    2dce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dd2:	a8 a1       	ldd	r26, Y+32	; 0x20
    2dd4:	b9 a1       	ldd	r27, Y+33	; 0x21
    2dd6:	28 17       	cp	r18, r24
    2dd8:	39 07       	cpc	r19, r25
    2dda:	4a 07       	cpc	r20, r26
    2ddc:	5b 07       	cpc	r21, r27
    2dde:	81 f4       	brne	.+32     	; 0x2e00 <SevSeg_voidBCDDoubleDisplay+0x428>
    2de0:	8f a1       	ldd	r24, Y+39	; 0x27
    2de2:	28 2f       	mov	r18, r24
    2de4:	33 27       	eor	r19, r19
    2de6:	27 fd       	sbrc	r18, 7
    2de8:	30 95       	com	r19
    2dea:	43 2f       	mov	r20, r19
    2dec:	53 2f       	mov	r21, r19
    2dee:	8a a1       	ldd	r24, Y+34	; 0x22
    2df0:	9b a1       	ldd	r25, Y+35	; 0x23
    2df2:	ac a1       	ldd	r26, Y+36	; 0x24
    2df4:	bd a1       	ldd	r27, Y+37	; 0x25
    2df6:	28 17       	cp	r18, r24
    2df8:	39 07       	cpc	r19, r25
    2dfa:	4a 07       	cpc	r20, r26
    2dfc:	5b 07       	cpc	r21, r27
    2dfe:	81 f1       	breq	.+96     	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2e00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e04:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e06:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	a1 09       	sbc	r26, r1
    2e0c:	b1 09       	sbc	r27, r1
    2e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2e10:	9f 8f       	std	Y+31, r25	; 0x1f
    2e12:	a8 a3       	std	Y+32, r26	; 0x20
    2e14:	b9 a3       	std	Y+33, r27	; 0x21
    2e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e1a:	a8 a1       	ldd	r26, Y+32	; 0x20
    2e1c:	b9 a1       	ldd	r27, Y+33	; 0x21
    2e1e:	bb 23       	and	r27, r27
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <SevSeg_voidBCDDoubleDisplay+0x44c>
    2e22:	51 cf       	rjmp	.-350    	; 0x2cc6 <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    2e24:	89 e0       	ldi	r24, 0x09	; 9
    2e26:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2e28:	8a a1       	ldd	r24, Y+34	; 0x22
    2e2a:	9b a1       	ldd	r25, Y+35	; 0x23
    2e2c:	ac a1       	ldd	r26, Y+36	; 0x24
    2e2e:	bd a1       	ldd	r27, Y+37	; 0x25
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	a1 09       	sbc	r26, r1
    2e34:	b1 09       	sbc	r27, r1
    2e36:	8a a3       	std	Y+34, r24	; 0x22
    2e38:	9b a3       	std	Y+35, r25	; 0x23
    2e3a:	ac a3       	std	Y+36, r26	; 0x24
    2e3c:	bd a3       	std	Y+37, r27	; 0x25
    2e3e:	8f a1       	ldd	r24, Y+39	; 0x27
    2e40:	28 2f       	mov	r18, r24
    2e42:	33 27       	eor	r19, r19
    2e44:	27 fd       	sbrc	r18, 7
    2e46:	30 95       	com	r19
    2e48:	43 2f       	mov	r20, r19
    2e4a:	53 2f       	mov	r21, r19
    2e4c:	8a a1       	ldd	r24, Y+34	; 0x22
    2e4e:	9b a1       	ldd	r25, Y+35	; 0x23
    2e50:	ac a1       	ldd	r26, Y+36	; 0x24
    2e52:	bd a1       	ldd	r27, Y+37	; 0x25
    2e54:	82 17       	cp	r24, r18
    2e56:	93 07       	cpc	r25, r19
    2e58:	a4 07       	cpc	r26, r20
    2e5a:	b5 07       	cpc	r27, r21
    2e5c:	0c f0       	brlt	.+2      	; 0x2e60 <SevSeg_voidBCDDoubleDisplay+0x488>
    2e5e:	0d cf       	rjmp	.-486    	; 0x2c7a <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2e60:	ab 96       	adiw	r28, 0x2b	; 43
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	c1 54       	subi	r28, 0x41	; 65
    2e7c:	d0 40       	sbci	r29, 0x00	; 0
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e0 5c       	subi	r30, 0xC0	; 192
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 83       	st	Z, r24
    2e90:	fe 01       	movw	r30, r28
    2e92:	ef 5b       	subi	r30, 0xBF	; 191
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e0 5c       	subi	r30, 0xC0	; 192
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	9a e0       	ldi	r25, 0x0A	; 10
    2ea2:	69 2f       	mov	r22, r25
    2ea4:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2ea8:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e0 5c       	subi	r30, 0xC0	; 192
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	9a e0       	ldi	r25, 0x0A	; 10
    2eb4:	69 2f       	mov	r22, r25
    2eb6:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2eba:	89 2f       	mov	r24, r25
    2ebc:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ef 5b       	subi	r30, 0xBF	; 191
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	9a e0       	ldi	r25, 0x0A	; 10
    2ec8:	69 2f       	mov	r22, r25
    2eca:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2ece:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ef 5b       	subi	r30, 0xBF	; 191
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 81       	ld	r24, Z
    2ed8:	9a e0       	ldi	r25, 0x0A	; 10
    2eda:	69 2f       	mov	r22, r25
    2edc:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divmodqi4>
    2ee0:	89 2f       	mov	r24, r25
    2ee2:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    2ee4:	18 ae       	std	Y+56, r1	; 0x38
    2ee6:	19 ae       	std	Y+57, r1	; 0x39
    2ee8:	1a ae       	std	Y+58, r1	; 0x3a
    2eea:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    2eec:	1c aa       	std	Y+52, r1	; 0x34
    2eee:	1d aa       	std	Y+53, r1	; 0x35
    2ef0:	1e aa       	std	Y+54, r1	; 0x36
    2ef2:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    2ef4:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    2ef6:	1f a6       	std	Y+47, r1	; 0x2f
    2ef8:	18 aa       	std	Y+48, r1	; 0x30
    2efa:	19 aa       	std	Y+49, r1	; 0x31
    2efc:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    2efe:	82 e3       	ldi	r24, 0x32	; 50
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	a0 e0       	ldi	r26, 0x00	; 0
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	8b a7       	std	Y+43, r24	; 0x2b
    2f08:	9c a7       	std	Y+44, r25	; 0x2c
    2f0a:	ad a7       	std	Y+45, r26	; 0x2d
    2f0c:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    2f0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f10:	88 23       	and	r24, r24
    2f12:	0c f4       	brge	.+2      	; 0x2f16 <SevSeg_voidMulBCD+0xa4>
    2f14:	ad c2       	rjmp	.+1370   	; 0x3470 <SevSeg_voidMulBCD+0x5fe>
    2f16:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f18:	8a 30       	cpi	r24, 0x0A	; 10
    2f1a:	0c f0       	brlt	.+2      	; 0x2f1e <SevSeg_voidMulBCD+0xac>
    2f1c:	a9 c2       	rjmp	.+1362   	; 0x3470 <SevSeg_voidMulBCD+0x5fe>
    2f1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f20:	8a 30       	cpi	r24, 0x0A	; 10
    2f22:	0c f0       	brlt	.+2      	; 0x2f26 <SevSeg_voidMulBCD+0xb4>
    2f24:	a5 c2       	rjmp	.+1354   	; 0x3470 <SevSeg_voidMulBCD+0x5fe>
    2f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f28:	88 23       	and	r24, r24
    2f2a:	0c f4       	brge	.+2      	; 0x2f2e <SevSeg_voidMulBCD+0xbc>
    2f2c:	a1 c2       	rjmp	.+1346   	; 0x3470 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    2f2e:	de 01       	movw	r26, r28
    2f30:	af 5b       	subi	r26, 0xBF	; 191
    2f32:	bf 4f       	sbci	r27, 0xFF	; 255
    2f34:	fe 01       	movw	r30, r28
    2f36:	e0 5c       	subi	r30, 0xC0	; 192
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	90 81       	ld	r25, Z
    2f3c:	8c 91       	ld	r24, X
    2f3e:	98 17       	cp	r25, r24
    2f40:	0c f0       	brlt	.+2      	; 0x2f44 <SevSeg_voidMulBCD+0xd2>
    2f42:	98 c1       	rjmp	.+816    	; 0x3274 <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2f44:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f46:	99 27       	eor	r25, r25
    2f48:	87 fd       	sbrc	r24, 7
    2f4a:	90 95       	com	r25
    2f4c:	a9 2f       	mov	r26, r25
    2f4e:	b9 2f       	mov	r27, r25
    2f50:	88 af       	std	Y+56, r24	; 0x38
    2f52:	99 af       	std	Y+57, r25	; 0x39
    2f54:	aa af       	std	Y+58, r26	; 0x3a
    2f56:	bb af       	std	Y+59, r27	; 0x3b
    2f58:	7b c1       	rjmp	.+758    	; 0x3250 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2f5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f5c:	99 27       	eor	r25, r25
    2f5e:	87 fd       	sbrc	r24, 7
    2f60:	90 95       	com	r25
    2f62:	a9 2f       	mov	r26, r25
    2f64:	b9 2f       	mov	r27, r25
    2f66:	8c ab       	std	Y+52, r24	; 0x34
    2f68:	9d ab       	std	Y+53, r25	; 0x35
    2f6a:	ae ab       	std	Y+54, r26	; 0x36
    2f6c:	bf ab       	std	Y+55, r27	; 0x37
    2f6e:	5a c1       	rjmp	.+692    	; 0x3224 <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    2f70:	1f a6       	std	Y+47, r1	; 0x2f
    2f72:	18 aa       	std	Y+48, r1	; 0x30
    2f74:	19 aa       	std	Y+49, r1	; 0x31
    2f76:	1a aa       	std	Y+50, r1	; 0x32
    2f78:	1b c1       	rjmp	.+566    	; 0x31b0 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    2f7a:	88 ad       	ldd	r24, Y+56	; 0x38
    2f7c:	99 ad       	ldd	r25, Y+57	; 0x39
    2f7e:	aa ad       	ldd	r26, Y+58	; 0x3a
    2f80:	bb ad       	ldd	r27, Y+59	; 0x3b
    2f82:	fc 01       	movw	r30, r24
    2f84:	ed 57       	subi	r30, 0x7D	; 125
    2f86:	fe 4f       	sbci	r31, 0xFE	; 254
    2f88:	90 81       	ld	r25, Z
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	69 2f       	mov	r22, r25
    2f8e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	66 e0       	ldi	r22, 0x06	; 6
    2f96:	40 e0       	ldi	r20, 0x00	; 0
    2f98:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	65 e0       	ldi	r22, 0x05	; 5
    2fa0:	41 e0       	ldi	r20, 0x01	; 1
    2fa2:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a0 e2       	ldi	r26, 0x20	; 32
    2fac:	b1 e4       	ldi	r27, 0x41	; 65
    2fae:	8f a3       	std	Y+39, r24	; 0x27
    2fb0:	98 a7       	std	Y+40, r25	; 0x28
    2fb2:	a9 a7       	std	Y+41, r26	; 0x29
    2fb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	6f a1       	ldd	r22, Y+39	; 0x27
    2fb8:	78 a5       	ldd	r23, Y+40	; 0x28
    2fba:	89 a5       	ldd	r24, Y+41	; 0x29
    2fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4a e7       	ldi	r20, 0x7A	; 122
    2fc4:	55 e4       	ldi	r21, 0x45	; 69
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	8b a3       	std	Y+35, r24	; 0x23
    2fd0:	9c a3       	std	Y+36, r25	; 0x24
    2fd2:	ad a3       	std	Y+37, r26	; 0x25
    2fd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fda:	8d a1       	ldd	r24, Y+37	; 0x25
    2fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	40 e8       	ldi	r20, 0x80	; 128
    2fe4:	5f e3       	ldi	r21, 0x3F	; 63
    2fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fea:	88 23       	and	r24, r24
    2fec:	2c f4       	brge	.+10     	; 0x2ff8 <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	9a a3       	std	Y+34, r25	; 0x22
    2ff4:	89 a3       	std	Y+33, r24	; 0x21
    2ff6:	3f c0       	rjmp	.+126    	; 0x3076 <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    2ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    2ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	3f ef       	ldi	r19, 0xFF	; 255
    3004:	4f e7       	ldi	r20, 0x7F	; 127
    3006:	57 e4       	ldi	r21, 0x47	; 71
    3008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    300c:	18 16       	cp	r1, r24
    300e:	4c f5       	brge	.+82     	; 0x3062 <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3010:	6f a1       	ldd	r22, Y+39	; 0x27
    3012:	78 a5       	ldd	r23, Y+40	; 0x28
    3014:	89 a5       	ldd	r24, Y+41	; 0x29
    3016:	9a a5       	ldd	r25, Y+42	; 0x2a
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e2       	ldi	r20, 0x20	; 32
    301e:	51 e4       	ldi	r21, 0x41	; 65
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9a a3       	std	Y+34, r25	; 0x22
    3036:	89 a3       	std	Y+33, r24	; 0x21
    3038:	0f c0       	rjmp	.+30     	; 0x3058 <SevSeg_voidMulBCD+0x1e6>
    303a:	80 e9       	ldi	r24, 0x90	; 144
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	98 a3       	std	Y+32, r25	; 0x20
    3040:	8f 8f       	std	Y+31, r24	; 0x1f
    3042:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3044:	98 a1       	ldd	r25, Y+32	; 0x20
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	f1 f7       	brne	.-4      	; 0x3046 <SevSeg_voidMulBCD+0x1d4>
    304a:	98 a3       	std	Y+32, r25	; 0x20
    304c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304e:	89 a1       	ldd	r24, Y+33	; 0x21
    3050:	9a a1       	ldd	r25, Y+34	; 0x22
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	9a a3       	std	Y+34, r25	; 0x22
    3056:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3058:	89 a1       	ldd	r24, Y+33	; 0x21
    305a:	9a a1       	ldd	r25, Y+34	; 0x22
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	69 f7       	brne	.-38     	; 0x303a <SevSeg_voidMulBCD+0x1c8>
    3060:	14 c0       	rjmp	.+40     	; 0x308a <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3062:	6b a1       	ldd	r22, Y+35	; 0x23
    3064:	7c a1       	ldd	r23, Y+36	; 0x24
    3066:	8d a1       	ldd	r24, Y+37	; 0x25
    3068:	9e a1       	ldd	r25, Y+38	; 0x26
    306a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9a a3       	std	Y+34, r25	; 0x22
    3074:	89 a3       	std	Y+33, r24	; 0x21
    3076:	89 a1       	ldd	r24, Y+33	; 0x21
    3078:	9a a1       	ldd	r25, Y+34	; 0x22
    307a:	9e 8f       	std	Y+30, r25	; 0x1e
    307c:	8d 8f       	std	Y+29, r24	; 0x1d
    307e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3080:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <SevSeg_voidMulBCD+0x210>
    3086:	9e 8f       	std	Y+30, r25	; 0x1e
    3088:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    308a:	8c a9       	ldd	r24, Y+52	; 0x34
    308c:	9d a9       	ldd	r25, Y+53	; 0x35
    308e:	ae a9       	ldd	r26, Y+54	; 0x36
    3090:	bf a9       	ldd	r27, Y+55	; 0x37
    3092:	fc 01       	movw	r30, r24
    3094:	ed 57       	subi	r30, 0x7D	; 125
    3096:	fe 4f       	sbci	r31, 0xFE	; 254
    3098:	90 81       	ld	r25, Z
    309a:	82 e0       	ldi	r24, 0x02	; 2
    309c:	69 2f       	mov	r22, r25
    309e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    30a2:	82 e0       	ldi	r24, 0x02	; 2
    30a4:	66 e0       	ldi	r22, 0x06	; 6
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	65 e0       	ldi	r22, 0x05	; 5
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	a0 e2       	ldi	r26, 0x20	; 32
    30bc:	b1 e4       	ldi	r27, 0x41	; 65
    30be:	89 8f       	std	Y+25, r24	; 0x19
    30c0:	9a 8f       	std	Y+26, r25	; 0x1a
    30c2:	ab 8f       	std	Y+27, r26	; 0x1b
    30c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c6:	69 8d       	ldd	r22, Y+25	; 0x19
    30c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4a e7       	ldi	r20, 0x7A	; 122
    30d4:	55 e4       	ldi	r21, 0x45	; 69
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8d 8b       	std	Y+21, r24	; 0x15
    30e0:	9e 8b       	std	Y+22, r25	; 0x16
    30e2:	af 8b       	std	Y+23, r26	; 0x17
    30e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e6:	6d 89       	ldd	r22, Y+21	; 0x15
    30e8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ea:	8f 89       	ldd	r24, Y+23	; 0x17
    30ec:	98 8d       	ldd	r25, Y+24	; 0x18
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e8       	ldi	r20, 0x80	; 128
    30f4:	5f e3       	ldi	r21, 0x3F	; 63
    30f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30fa:	88 23       	and	r24, r24
    30fc:	2c f4       	brge	.+10     	; 0x3108 <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 8b       	std	Y+20, r25	; 0x14
    3104:	8b 8b       	std	Y+19, r24	; 0x13
    3106:	3f c0       	rjmp	.+126    	; 0x3186 <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	4c f5       	brge	.+82     	; 0x3172 <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3120:	69 8d       	ldd	r22, Y+25	; 0x19
    3122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
    3148:	0f c0       	rjmp	.+30     	; 0x3168 <SevSeg_voidMulBCD+0x2f6>
    314a:	80 e9       	ldi	r24, 0x90	; 144
    314c:	91 e0       	ldi	r25, 0x01	; 1
    314e:	9a 8b       	std	Y+18, r25	; 0x12
    3150:	89 8b       	std	Y+17, r24	; 0x11
    3152:	89 89       	ldd	r24, Y+17	; 0x11
    3154:	9a 89       	ldd	r25, Y+18	; 0x12
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <SevSeg_voidMulBCD+0x2e4>
    315a:	9a 8b       	std	Y+18, r25	; 0x12
    315c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	8b 89       	ldd	r24, Y+19	; 0x13
    3160:	9c 89       	ldd	r25, Y+20	; 0x14
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	9c 8b       	std	Y+20, r25	; 0x14
    3166:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3168:	8b 89       	ldd	r24, Y+19	; 0x13
    316a:	9c 89       	ldd	r25, Y+20	; 0x14
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	69 f7       	brne	.-38     	; 0x314a <SevSeg_voidMulBCD+0x2d8>
    3170:	14 c0       	rjmp	.+40     	; 0x319a <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3172:	6d 89       	ldd	r22, Y+21	; 0x15
    3174:	7e 89       	ldd	r23, Y+22	; 0x16
    3176:	8f 89       	ldd	r24, Y+23	; 0x17
    3178:	98 8d       	ldd	r25, Y+24	; 0x18
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9c 8b       	std	Y+20, r25	; 0x14
    3184:	8b 8b       	std	Y+19, r24	; 0x13
    3186:	8b 89       	ldd	r24, Y+19	; 0x13
    3188:	9c 89       	ldd	r25, Y+20	; 0x14
    318a:	98 8b       	std	Y+16, r25	; 0x10
    318c:	8f 87       	std	Y+15, r24	; 0x0f
    318e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3190:	98 89       	ldd	r25, Y+16	; 0x10
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <SevSeg_voidMulBCD+0x320>
    3196:	98 8b       	std	Y+16, r25	; 0x10
    3198:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    319a:	8f a5       	ldd	r24, Y+47	; 0x2f
    319c:	98 a9       	ldd	r25, Y+48	; 0x30
    319e:	a9 a9       	ldd	r26, Y+49	; 0x31
    31a0:	ba a9       	ldd	r27, Y+50	; 0x32
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	a1 1d       	adc	r26, r1
    31a6:	b1 1d       	adc	r27, r1
    31a8:	8f a7       	std	Y+47, r24	; 0x2f
    31aa:	98 ab       	std	Y+48, r25	; 0x30
    31ac:	a9 ab       	std	Y+49, r26	; 0x31
    31ae:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    31b0:	2f a5       	ldd	r18, Y+47	; 0x2f
    31b2:	38 a9       	ldd	r19, Y+48	; 0x30
    31b4:	49 a9       	ldd	r20, Y+49	; 0x31
    31b6:	5a a9       	ldd	r21, Y+50	; 0x32
    31b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    31bc:	ad a5       	ldd	r26, Y+45	; 0x2d
    31be:	be a5       	ldd	r27, Y+46	; 0x2e
    31c0:	28 17       	cp	r18, r24
    31c2:	39 07       	cpc	r19, r25
    31c4:	4a 07       	cpc	r20, r26
    31c6:	5b 07       	cpc	r21, r27
    31c8:	08 f4       	brcc	.+2      	; 0x31cc <SevSeg_voidMulBCD+0x35a>
    31ca:	d7 ce       	rjmp	.-594    	; 0x2f7a <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    31cc:	8c ad       	ldd	r24, Y+60	; 0x3c
    31ce:	28 2f       	mov	r18, r24
    31d0:	33 27       	eor	r19, r19
    31d2:	27 fd       	sbrc	r18, 7
    31d4:	30 95       	com	r19
    31d6:	43 2f       	mov	r20, r19
    31d8:	53 2f       	mov	r21, r19
    31da:	8c a9       	ldd	r24, Y+52	; 0x34
    31dc:	9d a9       	ldd	r25, Y+53	; 0x35
    31de:	ae a9       	ldd	r26, Y+54	; 0x36
    31e0:	bf a9       	ldd	r27, Y+55	; 0x37
    31e2:	28 17       	cp	r18, r24
    31e4:	39 07       	cpc	r19, r25
    31e6:	4a 07       	cpc	r20, r26
    31e8:	5b 07       	cpc	r21, r27
    31ea:	89 f4       	brne	.+34     	; 0x320e <SevSeg_voidMulBCD+0x39c>
    31ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ee:	28 2f       	mov	r18, r24
    31f0:	33 27       	eor	r19, r19
    31f2:	27 fd       	sbrc	r18, 7
    31f4:	30 95       	com	r19
    31f6:	43 2f       	mov	r20, r19
    31f8:	53 2f       	mov	r21, r19
    31fa:	88 ad       	ldd	r24, Y+56	; 0x38
    31fc:	99 ad       	ldd	r25, Y+57	; 0x39
    31fe:	aa ad       	ldd	r26, Y+58	; 0x3a
    3200:	bb ad       	ldd	r27, Y+59	; 0x3b
    3202:	28 17       	cp	r18, r24
    3204:	39 07       	cpc	r19, r25
    3206:	4a 07       	cpc	r20, r26
    3208:	5b 07       	cpc	r21, r27
    320a:	09 f4       	brne	.+2      	; 0x320e <SevSeg_voidMulBCD+0x39c>
    320c:	31 c1       	rjmp	.+610    	; 0x3470 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    320e:	8c a9       	ldd	r24, Y+52	; 0x34
    3210:	9d a9       	ldd	r25, Y+53	; 0x35
    3212:	ae a9       	ldd	r26, Y+54	; 0x36
    3214:	bf a9       	ldd	r27, Y+55	; 0x37
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	a1 1d       	adc	r26, r1
    321a:	b1 1d       	adc	r27, r1
    321c:	8c ab       	std	Y+52, r24	; 0x34
    321e:	9d ab       	std	Y+53, r25	; 0x35
    3220:	ae ab       	std	Y+54, r26	; 0x36
    3222:	bf ab       	std	Y+55, r27	; 0x37
    3224:	8c a9       	ldd	r24, Y+52	; 0x34
    3226:	9d a9       	ldd	r25, Y+53	; 0x35
    3228:	ae a9       	ldd	r26, Y+54	; 0x36
    322a:	bf a9       	ldd	r27, Y+55	; 0x37
    322c:	8a 30       	cpi	r24, 0x0A	; 10
    322e:	91 05       	cpc	r25, r1
    3230:	a1 05       	cpc	r26, r1
    3232:	b1 05       	cpc	r27, r1
    3234:	0c f4       	brge	.+2      	; 0x3238 <SevSeg_voidMulBCD+0x3c6>
    3236:	9c ce       	rjmp	.-712    	; 0x2f70 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    3238:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    323a:	88 ad       	ldd	r24, Y+56	; 0x38
    323c:	99 ad       	ldd	r25, Y+57	; 0x39
    323e:	aa ad       	ldd	r26, Y+58	; 0x3a
    3240:	bb ad       	ldd	r27, Y+59	; 0x3b
    3242:	01 96       	adiw	r24, 0x01	; 1
    3244:	a1 1d       	adc	r26, r1
    3246:	b1 1d       	adc	r27, r1
    3248:	88 af       	std	Y+56, r24	; 0x38
    324a:	99 af       	std	Y+57, r25	; 0x39
    324c:	aa af       	std	Y+58, r26	; 0x3a
    324e:	bb af       	std	Y+59, r27	; 0x3b
    3250:	8d ad       	ldd	r24, Y+61	; 0x3d
    3252:	28 2f       	mov	r18, r24
    3254:	33 27       	eor	r19, r19
    3256:	27 fd       	sbrc	r18, 7
    3258:	30 95       	com	r19
    325a:	43 2f       	mov	r20, r19
    325c:	53 2f       	mov	r21, r19
    325e:	88 ad       	ldd	r24, Y+56	; 0x38
    3260:	99 ad       	ldd	r25, Y+57	; 0x39
    3262:	aa ad       	ldd	r26, Y+58	; 0x3a
    3264:	bb ad       	ldd	r27, Y+59	; 0x3b
    3266:	28 17       	cp	r18, r24
    3268:	39 07       	cpc	r19, r25
    326a:	4a 07       	cpc	r20, r26
    326c:	5b 07       	cpc	r21, r27
    326e:	0c f0       	brlt	.+2      	; 0x3272 <SevSeg_voidMulBCD+0x400>
    3270:	74 ce       	rjmp	.-792    	; 0x2f5a <SevSeg_voidMulBCD+0xe8>
    3272:	fe c0       	rjmp	.+508    	; 0x3470 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3274:	8f ad       	ldd	r24, Y+63	; 0x3f
    3276:	99 27       	eor	r25, r25
    3278:	87 fd       	sbrc	r24, 7
    327a:	90 95       	com	r25
    327c:	a9 2f       	mov	r26, r25
    327e:	b9 2f       	mov	r27, r25
    3280:	88 af       	std	Y+56, r24	; 0x38
    3282:	99 af       	std	Y+57, r25	; 0x39
    3284:	aa af       	std	Y+58, r26	; 0x3a
    3286:	bb af       	std	Y+59, r27	; 0x3b
    3288:	e2 c0       	rjmp	.+452    	; 0x344e <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    328a:	8b a9       	ldd	r24, Y+51	; 0x33
    328c:	8f 70       	andi	r24, 0x0F	; 15
    328e:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    3290:	88 ad       	ldd	r24, Y+56	; 0x38
    3292:	99 ad       	ldd	r25, Y+57	; 0x39
    3294:	aa ad       	ldd	r26, Y+58	; 0x3a
    3296:	bb ad       	ldd	r27, Y+59	; 0x3b
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	aa 1f       	adc	r26, r26
    329e:	bb 1f       	adc	r27, r27
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	aa 1f       	adc	r26, r26
    32a6:	bb 1f       	adc	r27, r27
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	aa 1f       	adc	r26, r26
    32ae:	bb 1f       	adc	r27, r27
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	aa 1f       	adc	r26, r26
    32b6:	bb 1f       	adc	r27, r27
    32b8:	98 2f       	mov	r25, r24
    32ba:	8b a9       	ldd	r24, Y+51	; 0x33
    32bc:	89 2b       	or	r24, r25
    32be:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    32c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    32c2:	99 27       	eor	r25, r25
    32c4:	87 fd       	sbrc	r24, 7
    32c6:	90 95       	com	r25
    32c8:	a9 2f       	mov	r26, r25
    32ca:	b9 2f       	mov	r27, r25
    32cc:	8c ab       	std	Y+52, r24	; 0x34
    32ce:	9d ab       	std	Y+53, r25	; 0x35
    32d0:	ae ab       	std	Y+54, r26	; 0x36
    32d2:	bf ab       	std	Y+55, r27	; 0x37
    32d4:	a8 c0       	rjmp	.+336    	; 0x3426 <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    32d6:	8b a9       	ldd	r24, Y+51	; 0x33
    32d8:	80 7f       	andi	r24, 0xF0	; 240
    32da:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    32dc:	9c a9       	ldd	r25, Y+52	; 0x34
    32de:	8b a9       	ldd	r24, Y+51	; 0x33
    32e0:	89 2b       	or	r24, r25
    32e2:	8b ab       	std	Y+51, r24	; 0x33
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a0 e2       	ldi	r26, 0x20	; 32
    32ea:	b1 e4       	ldi	r27, 0x41	; 65
    32ec:	8b 87       	std	Y+11, r24	; 0x0b
    32ee:	9c 87       	std	Y+12, r25	; 0x0c
    32f0:	ad 87       	std	Y+13, r26	; 0x0d
    32f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4a e7       	ldi	r20, 0x7A	; 122
    3302:	55 e4       	ldi	r21, 0x45	; 69
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	8f 83       	std	Y+7, r24	; 0x07
    330e:	98 87       	std	Y+8, r25	; 0x08
    3310:	a9 87       	std	Y+9, r26	; 0x09
    3312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3314:	6f 81       	ldd	r22, Y+7	; 0x07
    3316:	78 85       	ldd	r23, Y+8	; 0x08
    3318:	89 85       	ldd	r24, Y+9	; 0x09
    331a:	9a 85       	ldd	r25, Y+10	; 0x0a
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	2c f4       	brge	.+10     	; 0x3336 <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9e 83       	std	Y+6, r25	; 0x06
    3332:	8d 83       	std	Y+5, r24	; 0x05
    3334:	3f c0       	rjmp	.+126    	; 0x33b4 <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    3336:	6f 81       	ldd	r22, Y+7	; 0x07
    3338:	78 85       	ldd	r23, Y+8	; 0x08
    333a:	89 85       	ldd	r24, Y+9	; 0x09
    333c:	9a 85       	ldd	r25, Y+10	; 0x0a
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	4f e7       	ldi	r20, 0x7F	; 127
    3344:	57 e4       	ldi	r21, 0x47	; 71
    3346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334a:	18 16       	cp	r1, r24
    334c:	4c f5       	brge	.+82     	; 0x33a0 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3350:	7c 85       	ldd	r23, Y+12	; 0x0c
    3352:	8d 85       	ldd	r24, Y+13	; 0x0d
    3354:	9e 85       	ldd	r25, Y+14	; 0x0e
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e2       	ldi	r20, 0x20	; 32
    335c:	51 e4       	ldi	r21, 0x41	; 65
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	8d 83       	std	Y+5, r24	; 0x05
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <SevSeg_voidMulBCD+0x524>
    3378:	80 e9       	ldi	r24, 0x90	; 144
    337a:	91 e0       	ldi	r25, 0x01	; 1
    337c:	9c 83       	std	Y+4, r25	; 0x04
    337e:	8b 83       	std	Y+3, r24	; 0x03
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <SevSeg_voidMulBCD+0x512>
    3388:	9c 83       	std	Y+4, r25	; 0x04
    338a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9e 83       	std	Y+6, r25	; 0x06
    3394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	69 f7       	brne	.-38     	; 0x3378 <SevSeg_voidMulBCD+0x506>
    339e:	14 c0       	rjmp	.+40     	; 0x33c8 <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	6f 81       	ldd	r22, Y+7	; 0x07
    33a2:	78 85       	ldd	r23, Y+8	; 0x08
    33a4:	89 85       	ldd	r24, Y+9	; 0x09
    33a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9e 83       	std	Y+6, r25	; 0x06
    33b2:	8d 83       	std	Y+5, r24	; 0x05
    33b4:	8d 81       	ldd	r24, Y+5	; 0x05
    33b6:	9e 81       	ldd	r25, Y+6	; 0x06
    33b8:	9a 83       	std	Y+2, r25	; 0x02
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <SevSeg_voidMulBCD+0x54e>
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	6b a9       	ldd	r22, Y+51	; 0x33
    33cc:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    33d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    33d2:	28 2f       	mov	r18, r24
    33d4:	33 27       	eor	r19, r19
    33d6:	27 fd       	sbrc	r18, 7
    33d8:	30 95       	com	r19
    33da:	43 2f       	mov	r20, r19
    33dc:	53 2f       	mov	r21, r19
    33de:	8c a9       	ldd	r24, Y+52	; 0x34
    33e0:	9d a9       	ldd	r25, Y+53	; 0x35
    33e2:	ae a9       	ldd	r26, Y+54	; 0x36
    33e4:	bf a9       	ldd	r27, Y+55	; 0x37
    33e6:	28 17       	cp	r18, r24
    33e8:	39 07       	cpc	r19, r25
    33ea:	4a 07       	cpc	r20, r26
    33ec:	5b 07       	cpc	r21, r27
    33ee:	81 f4       	brne	.+32     	; 0x3410 <SevSeg_voidMulBCD+0x59e>
    33f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    33f2:	28 2f       	mov	r18, r24
    33f4:	33 27       	eor	r19, r19
    33f6:	27 fd       	sbrc	r18, 7
    33f8:	30 95       	com	r19
    33fa:	43 2f       	mov	r20, r19
    33fc:	53 2f       	mov	r21, r19
    33fe:	88 ad       	ldd	r24, Y+56	; 0x38
    3400:	99 ad       	ldd	r25, Y+57	; 0x39
    3402:	aa ad       	ldd	r26, Y+58	; 0x3a
    3404:	bb ad       	ldd	r27, Y+59	; 0x3b
    3406:	28 17       	cp	r18, r24
    3408:	39 07       	cpc	r19, r25
    340a:	4a 07       	cpc	r20, r26
    340c:	5b 07       	cpc	r21, r27
    340e:	81 f1       	breq	.+96     	; 0x3470 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3410:	8c a9       	ldd	r24, Y+52	; 0x34
    3412:	9d a9       	ldd	r25, Y+53	; 0x35
    3414:	ae a9       	ldd	r26, Y+54	; 0x36
    3416:	bf a9       	ldd	r27, Y+55	; 0x37
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	a1 09       	sbc	r26, r1
    341c:	b1 09       	sbc	r27, r1
    341e:	8c ab       	std	Y+52, r24	; 0x34
    3420:	9d ab       	std	Y+53, r25	; 0x35
    3422:	ae ab       	std	Y+54, r26	; 0x36
    3424:	bf ab       	std	Y+55, r27	; 0x37
    3426:	8c a9       	ldd	r24, Y+52	; 0x34
    3428:	9d a9       	ldd	r25, Y+53	; 0x35
    342a:	ae a9       	ldd	r26, Y+54	; 0x36
    342c:	bf a9       	ldd	r27, Y+55	; 0x37
    342e:	bb 23       	and	r27, r27
    3430:	0c f0       	brlt	.+2      	; 0x3434 <SevSeg_voidMulBCD+0x5c2>
    3432:	51 cf       	rjmp	.-350    	; 0x32d6 <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3434:	89 e0       	ldi	r24, 0x09	; 9
    3436:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3438:	88 ad       	ldd	r24, Y+56	; 0x38
    343a:	99 ad       	ldd	r25, Y+57	; 0x39
    343c:	aa ad       	ldd	r26, Y+58	; 0x3a
    343e:	bb ad       	ldd	r27, Y+59	; 0x3b
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	a1 09       	sbc	r26, r1
    3444:	b1 09       	sbc	r27, r1
    3446:	88 af       	std	Y+56, r24	; 0x38
    3448:	99 af       	std	Y+57, r25	; 0x39
    344a:	aa af       	std	Y+58, r26	; 0x3a
    344c:	bb af       	std	Y+59, r27	; 0x3b
    344e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3450:	28 2f       	mov	r18, r24
    3452:	33 27       	eor	r19, r19
    3454:	27 fd       	sbrc	r18, 7
    3456:	30 95       	com	r19
    3458:	43 2f       	mov	r20, r19
    345a:	53 2f       	mov	r21, r19
    345c:	88 ad       	ldd	r24, Y+56	; 0x38
    345e:	99 ad       	ldd	r25, Y+57	; 0x39
    3460:	aa ad       	ldd	r26, Y+58	; 0x3a
    3462:	bb ad       	ldd	r27, Y+59	; 0x3b
    3464:	82 17       	cp	r24, r18
    3466:	93 07       	cpc	r25, r19
    3468:	a4 07       	cpc	r26, r20
    346a:	b5 07       	cpc	r27, r21
    346c:	0c f0       	brlt	.+2      	; 0x3470 <SevSeg_voidMulBCD+0x5fe>
    346e:	0d cf       	rjmp	.-486    	; 0x328a <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    3470:	cf 5b       	subi	r28, 0xBF	; 191
    3472:	df 4f       	sbci	r29, 0xFF	; 255
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	08 95       	ret

00003484 <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	cc 58       	subi	r28, 0x8C	; 140
    3492:	d0 40       	sbci	r29, 0x00	; 0
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	fe 01       	movw	r30, r28
    34a0:	e7 57       	subi	r30, 0x77	; 119
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	ac e0       	ldi	r26, 0x0C	; 12
    34aa:	b2 e4       	ldi	r27, 0x42	; 66
    34ac:	80 83       	st	Z, r24
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	a2 83       	std	Z+2, r26	; 0x02
    34b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b4:	8e 01       	movw	r16, r28
    34b6:	0b 57       	subi	r16, 0x7B	; 123
    34b8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ba:	fe 01       	movw	r30, r28
    34bc:	e7 57       	subi	r30, 0x77	; 119
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	4a e7       	ldi	r20, 0x7A	; 122
    34ce:	55 e4       	ldi	r21, 0x45	; 69
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	f8 01       	movw	r30, r16
    34da:	80 83       	st	Z, r24
    34dc:	91 83       	std	Z+1, r25	; 0x01
    34de:	a2 83       	std	Z+2, r26	; 0x02
    34e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e2:	fe 01       	movw	r30, r28
    34e4:	eb 57       	subi	r30, 0x7B	; 123
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e8       	ldi	r20, 0x80	; 128
    34f6:	5f e3       	ldi	r21, 0x3F	; 63
    34f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fc:	88 23       	and	r24, r24
    34fe:	44 f4       	brge	.+16     	; 0x3510 <LCD_voidInit+0x8c>
		__ticks = 1;
    3500:	fe 01       	movw	r30, r28
    3502:	ed 57       	subi	r30, 0x7D	; 125
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	80 83       	st	Z, r24
    350e:	64 c0       	rjmp	.+200    	; 0x35d8 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    3510:	fe 01       	movw	r30, r28
    3512:	eb 57       	subi	r30, 0x7B	; 123
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	60 81       	ld	r22, Z
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	93 81       	ldd	r25, Z+3	; 0x03
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	0c f0       	brlt	.+2      	; 0x3530 <LCD_voidInit+0xac>
    352e:	43 c0       	rjmp	.+134    	; 0x35b6 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3530:	fe 01       	movw	r30, r28
    3532:	e7 57       	subi	r30, 0x77	; 119
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8e 01       	movw	r16, r28
    3550:	0d 57       	subi	r16, 0x7D	; 125
    3552:	1f 4f       	sbci	r17, 0xFF	; 255
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	f8 01       	movw	r30, r16
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	1f c0       	rjmp	.+62     	; 0x35a6 <LCD_voidInit+0x122>
    3568:	fe 01       	movw	r30, r28
    356a:	ef 57       	subi	r30, 0x7F	; 127
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 e9       	ldi	r24, 0x90	; 144
    3570:	91 e0       	ldi	r25, 0x01	; 1
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24
    3576:	fe 01       	movw	r30, r28
    3578:	ef 57       	subi	r30, 0x7F	; 127
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <LCD_voidInit+0xfc>
    3584:	fe 01       	movw	r30, r28
    3586:	ef 57       	subi	r30, 0x7F	; 127
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358e:	de 01       	movw	r26, r28
    3590:	ad 57       	subi	r26, 0x7D	; 125
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	ed 57       	subi	r30, 0x7D	; 125
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	11 96       	adiw	r26, 0x01	; 1
    35a2:	9c 93       	st	X, r25
    35a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	fe 01       	movw	r30, r28
    35a8:	ed 57       	subi	r30, 0x7D	; 125
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	80 81       	ld	r24, Z
    35ae:	91 81       	ldd	r25, Z+1	; 0x01
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	d1 f6       	brne	.-76     	; 0x3568 <LCD_voidInit+0xe4>
    35b4:	27 c0       	rjmp	.+78     	; 0x3604 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b6:	8e 01       	movw	r16, r28
    35b8:	0d 57       	subi	r16, 0x7D	; 125
    35ba:	1f 4f       	sbci	r17, 0xFF	; 255
    35bc:	fe 01       	movw	r30, r28
    35be:	eb 57       	subi	r30, 0x7B	; 123
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	f8 01       	movw	r30, r16
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
    35d8:	de 01       	movw	r26, r28
    35da:	a1 58       	subi	r26, 0x81	; 129
    35dc:	bf 4f       	sbci	r27, 0xFF	; 255
    35de:	fe 01       	movw	r30, r28
    35e0:	ed 57       	subi	r30, 0x7D	; 125
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	8d 93       	st	X+, r24
    35ea:	9c 93       	st	X, r25
    35ec:	fe 01       	movw	r30, r28
    35ee:	e1 58       	subi	r30, 0x81	; 129
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <LCD_voidInit+0x172>
    35fa:	fe 01       	movw	r30, r28
    35fc:	e1 58       	subi	r30, 0x81	; 129
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	91 83       	std	Z+1, r25	; 0x01
    3602:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3604:	80 e3       	ldi	r24, 0x30	; 48
    3606:	0e 94 32 21 	call	0x4264	; 0x4264 <LCD_voidSendInitCommand>
    360a:	fe 01       	movw	r30, r28
    360c:	e5 58       	subi	r30, 0x85	; 133
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	a0 ea       	ldi	r26, 0xA0	; 160
    3616:	b0 e4       	ldi	r27, 0x40	; 64
    3618:	80 83       	st	Z, r24
    361a:	91 83       	std	Z+1, r25	; 0x01
    361c:	a2 83       	std	Z+2, r26	; 0x02
    361e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3620:	8e 01       	movw	r16, r28
    3622:	09 58       	subi	r16, 0x89	; 137
    3624:	1f 4f       	sbci	r17, 0xFF	; 255
    3626:	fe 01       	movw	r30, r28
    3628:	e5 58       	subi	r30, 0x85	; 133
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	60 81       	ld	r22, Z
    362e:	71 81       	ldd	r23, Z+1	; 0x01
    3630:	82 81       	ldd	r24, Z+2	; 0x02
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4a e7       	ldi	r20, 0x7A	; 122
    363a:	55 e4       	ldi	r21, 0x45	; 69
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	f8 01       	movw	r30, r16
    3646:	80 83       	st	Z, r24
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	a2 83       	std	Z+2, r26	; 0x02
    364c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    364e:	fe 01       	movw	r30, r28
    3650:	e9 58       	subi	r30, 0x89	; 137
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	60 81       	ld	r22, Z
    3656:	71 81       	ldd	r23, Z+1	; 0x01
    3658:	82 81       	ldd	r24, Z+2	; 0x02
    365a:	93 81       	ldd	r25, Z+3	; 0x03
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e8       	ldi	r20, 0x80	; 128
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3668:	88 23       	and	r24, r24
    366a:	44 f4       	brge	.+16     	; 0x367c <LCD_voidInit+0x1f8>
		__ticks = 1;
    366c:	fe 01       	movw	r30, r28
    366e:	eb 58       	subi	r30, 0x8B	; 139
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	80 83       	st	Z, r24
    367a:	64 c0       	rjmp	.+200    	; 0x3744 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    367c:	fe 01       	movw	r30, r28
    367e:	e9 58       	subi	r30, 0x89	; 137
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	60 81       	ld	r22, Z
    3684:	71 81       	ldd	r23, Z+1	; 0x01
    3686:	82 81       	ldd	r24, Z+2	; 0x02
    3688:	93 81       	ldd	r25, Z+3	; 0x03
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	3f ef       	ldi	r19, 0xFF	; 255
    368e:	4f e7       	ldi	r20, 0x7F	; 127
    3690:	57 e4       	ldi	r21, 0x47	; 71
    3692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3696:	18 16       	cp	r1, r24
    3698:	0c f0       	brlt	.+2      	; 0x369c <LCD_voidInit+0x218>
    369a:	43 c0       	rjmp	.+134    	; 0x3722 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369c:	fe 01       	movw	r30, r28
    369e:	e5 58       	subi	r30, 0x85	; 133
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	60 81       	ld	r22, Z
    36a4:	71 81       	ldd	r23, Z+1	; 0x01
    36a6:	82 81       	ldd	r24, Z+2	; 0x02
    36a8:	93 81       	ldd	r25, Z+3	; 0x03
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e2       	ldi	r20, 0x20	; 32
    36b0:	51 e4       	ldi	r21, 0x41	; 65
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	8e 01       	movw	r16, r28
    36bc:	0b 58       	subi	r16, 0x8B	; 139
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	bc 01       	movw	r22, r24
    36c2:	cd 01       	movw	r24, r26
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	f8 01       	movw	r30, r16
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
    36d2:	1f c0       	rjmp	.+62     	; 0x3712 <LCD_voidInit+0x28e>
    36d4:	fe 01       	movw	r30, r28
    36d6:	ed 58       	subi	r30, 0x8D	; 141
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 e9       	ldi	r24, 0x90	; 144
    36dc:	91 e0       	ldi	r25, 0x01	; 1
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	80 83       	st	Z, r24
    36e2:	fe 01       	movw	r30, r28
    36e4:	ed 58       	subi	r30, 0x8D	; 141
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 81       	ld	r24, Z
    36ea:	91 81       	ldd	r25, Z+1	; 0x01
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <LCD_voidInit+0x268>
    36f0:	fe 01       	movw	r30, r28
    36f2:	ed 58       	subi	r30, 0x8D	; 141
    36f4:	ff 4f       	sbci	r31, 0xFF	; 255
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fa:	de 01       	movw	r26, r28
    36fc:	ab 58       	subi	r26, 0x8B	; 139
    36fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3700:	fe 01       	movw	r30, r28
    3702:	eb 58       	subi	r30, 0x8B	; 139
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	9c 93       	st	X, r25
    3710:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3712:	fe 01       	movw	r30, r28
    3714:	eb 58       	subi	r30, 0x8B	; 139
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	d1 f6       	brne	.-76     	; 0x36d4 <LCD_voidInit+0x250>
    3720:	27 c0       	rjmp	.+78     	; 0x3770 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3722:	8e 01       	movw	r16, r28
    3724:	0b 58       	subi	r16, 0x8B	; 139
    3726:	1f 4f       	sbci	r17, 0xFF	; 255
    3728:	fe 01       	movw	r30, r28
    372a:	e9 58       	subi	r30, 0x89	; 137
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	60 81       	ld	r22, Z
    3730:	71 81       	ldd	r23, Z+1	; 0x01
    3732:	82 81       	ldd	r24, Z+2	; 0x02
    3734:	93 81       	ldd	r25, Z+3	; 0x03
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	f8 01       	movw	r30, r16
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	80 83       	st	Z, r24
    3744:	de 01       	movw	r26, r28
    3746:	af 58       	subi	r26, 0x8F	; 143
    3748:	bf 4f       	sbci	r27, 0xFF	; 255
    374a:	fe 01       	movw	r30, r28
    374c:	eb 58       	subi	r30, 0x8B	; 139
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	8d 93       	st	X+, r24
    3756:	9c 93       	st	X, r25
    3758:	fe 01       	movw	r30, r28
    375a:	ef 58       	subi	r30, 0x8F	; 143
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	80 81       	ld	r24, Z
    3760:	91 81       	ldd	r25, Z+1	; 0x01
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	f1 f7       	brne	.-4      	; 0x3762 <LCD_voidInit+0x2de>
    3766:	fe 01       	movw	r30, r28
    3768:	ef 58       	subi	r30, 0x8F	; 143
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	91 83       	std	Z+1, r25	; 0x01
    376e:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3770:	80 e3       	ldi	r24, 0x30	; 48
    3772:	0e 94 32 21 	call	0x4264	; 0x4264 <LCD_voidSendInitCommand>
    3776:	fe 01       	movw	r30, r28
    3778:	e3 59       	subi	r30, 0x93	; 147
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	a0 e8       	ldi	r26, 0x80	; 128
    3782:	bf e3       	ldi	r27, 0x3F	; 63
    3784:	80 83       	st	Z, r24
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	a2 83       	std	Z+2, r26	; 0x02
    378a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378c:	8e 01       	movw	r16, r28
    378e:	07 59       	subi	r16, 0x97	; 151
    3790:	1f 4f       	sbci	r17, 0xFF	; 255
    3792:	fe 01       	movw	r30, r28
    3794:	e3 59       	subi	r30, 0x93	; 147
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	4a e7       	ldi	r20, 0x7A	; 122
    37a6:	55 e4       	ldi	r21, 0x45	; 69
    37a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 83       	st	Z, r24
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	a2 83       	std	Z+2, r26	; 0x02
    37b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e7 59       	subi	r30, 0x97	; 151
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	60 81       	ld	r22, Z
    37c2:	71 81       	ldd	r23, Z+1	; 0x01
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	93 81       	ldd	r25, Z+3	; 0x03
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	44 f4       	brge	.+16     	; 0x37e8 <LCD_voidInit+0x364>
		__ticks = 1;
    37d8:	fe 01       	movw	r30, r28
    37da:	e9 59       	subi	r30, 0x99	; 153
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
    37e6:	64 c0       	rjmp	.+200    	; 0x38b0 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    37e8:	fe 01       	movw	r30, r28
    37ea:	e7 59       	subi	r30, 0x97	; 151
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	60 81       	ld	r22, Z
    37f0:	71 81       	ldd	r23, Z+1	; 0x01
    37f2:	82 81       	ldd	r24, Z+2	; 0x02
    37f4:	93 81       	ldd	r25, Z+3	; 0x03
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	3f ef       	ldi	r19, 0xFF	; 255
    37fa:	4f e7       	ldi	r20, 0x7F	; 127
    37fc:	57 e4       	ldi	r21, 0x47	; 71
    37fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3802:	18 16       	cp	r1, r24
    3804:	0c f0       	brlt	.+2      	; 0x3808 <LCD_voidInit+0x384>
    3806:	43 c0       	rjmp	.+134    	; 0x388e <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3808:	fe 01       	movw	r30, r28
    380a:	e3 59       	subi	r30, 0x93	; 147
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e2       	ldi	r20, 0x20	; 32
    381c:	51 e4       	ldi	r21, 0x41	; 65
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	8e 01       	movw	r16, r28
    3828:	09 59       	subi	r16, 0x99	; 153
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	f8 01       	movw	r30, r16
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
    383e:	1f c0       	rjmp	.+62     	; 0x387e <LCD_voidInit+0x3fa>
    3840:	fe 01       	movw	r30, r28
    3842:	eb 59       	subi	r30, 0x9B	; 155
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 e9       	ldi	r24, 0x90	; 144
    3848:	91 e0       	ldi	r25, 0x01	; 1
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
    384e:	fe 01       	movw	r30, r28
    3850:	eb 59       	subi	r30, 0x9B	; 155
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <LCD_voidInit+0x3d4>
    385c:	fe 01       	movw	r30, r28
    385e:	eb 59       	subi	r30, 0x9B	; 155
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	de 01       	movw	r26, r28
    3868:	a9 59       	subi	r26, 0x99	; 153
    386a:	bf 4f       	sbci	r27, 0xFF	; 255
    386c:	fe 01       	movw	r30, r28
    386e:	e9 59       	subi	r30, 0x99	; 153
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	01 97       	sbiw	r24, 0x01	; 1
    3878:	11 96       	adiw	r26, 0x01	; 1
    387a:	9c 93       	st	X, r25
    387c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	fe 01       	movw	r30, r28
    3880:	e9 59       	subi	r30, 0x99	; 153
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	d1 f6       	brne	.-76     	; 0x3840 <LCD_voidInit+0x3bc>
    388c:	27 c0       	rjmp	.+78     	; 0x38dc <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	8e 01       	movw	r16, r28
    3890:	09 59       	subi	r16, 0x99	; 153
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	fe 01       	movw	r30, r28
    3896:	e7 59       	subi	r30, 0x97	; 151
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	f8 01       	movw	r30, r16
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24
    38b0:	de 01       	movw	r26, r28
    38b2:	ad 59       	subi	r26, 0x9D	; 157
    38b4:	bf 4f       	sbci	r27, 0xFF	; 255
    38b6:	fe 01       	movw	r30, r28
    38b8:	e9 59       	subi	r30, 0x99	; 153
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 81       	ld	r24, Z
    38be:	91 81       	ldd	r25, Z+1	; 0x01
    38c0:	8d 93       	st	X+, r24
    38c2:	9c 93       	st	X, r25
    38c4:	fe 01       	movw	r30, r28
    38c6:	ed 59       	subi	r30, 0x9D	; 157
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <LCD_voidInit+0x44a>
    38d2:	fe 01       	movw	r30, r28
    38d4:	ed 59       	subi	r30, 0x9D	; 157
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	91 83       	std	Z+1, r25	; 0x01
    38da:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    38dc:	80 e3       	ldi	r24, 0x30	; 48
    38de:	0e 94 32 21 	call	0x4264	; 0x4264 <LCD_voidSendInitCommand>
    38e2:	fe 01       	movw	r30, r28
    38e4:	e1 5a       	subi	r30, 0xA1	; 161
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	a0 e8       	ldi	r26, 0x80	; 128
    38ee:	bf e3       	ldi	r27, 0x3F	; 63
    38f0:	80 83       	st	Z, r24
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	a2 83       	std	Z+2, r26	; 0x02
    38f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f8:	8e 01       	movw	r16, r28
    38fa:	05 5a       	subi	r16, 0xA5	; 165
    38fc:	1f 4f       	sbci	r17, 0xFF	; 255
    38fe:	fe 01       	movw	r30, r28
    3900:	e1 5a       	subi	r30, 0xA1	; 161
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	60 81       	ld	r22, Z
    3906:	71 81       	ldd	r23, Z+1	; 0x01
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	93 81       	ldd	r25, Z+3	; 0x03
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	4a e7       	ldi	r20, 0x7A	; 122
    3912:	55 e4       	ldi	r21, 0x45	; 69
    3914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	f8 01       	movw	r30, r16
    391e:	80 83       	st	Z, r24
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	a2 83       	std	Z+2, r26	; 0x02
    3924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3926:	fe 01       	movw	r30, r28
    3928:	e5 5a       	subi	r30, 0xA5	; 165
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	60 81       	ld	r22, Z
    392e:	71 81       	ldd	r23, Z+1	; 0x01
    3930:	82 81       	ldd	r24, Z+2	; 0x02
    3932:	93 81       	ldd	r25, Z+3	; 0x03
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e8       	ldi	r20, 0x80	; 128
    393a:	5f e3       	ldi	r21, 0x3F	; 63
    393c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3940:	88 23       	and	r24, r24
    3942:	44 f4       	brge	.+16     	; 0x3954 <LCD_voidInit+0x4d0>
		__ticks = 1;
    3944:	fe 01       	movw	r30, r28
    3946:	e7 5a       	subi	r30, 0xA7	; 167
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	64 c0       	rjmp	.+200    	; 0x3a1c <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    3954:	fe 01       	movw	r30, r28
    3956:	e5 5a       	subi	r30, 0xA5	; 165
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	60 81       	ld	r22, Z
    395c:	71 81       	ldd	r23, Z+1	; 0x01
    395e:	82 81       	ldd	r24, Z+2	; 0x02
    3960:	93 81       	ldd	r25, Z+3	; 0x03
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	3f ef       	ldi	r19, 0xFF	; 255
    3966:	4f e7       	ldi	r20, 0x7F	; 127
    3968:	57 e4       	ldi	r21, 0x47	; 71
    396a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    396e:	18 16       	cp	r1, r24
    3970:	0c f0       	brlt	.+2      	; 0x3974 <LCD_voidInit+0x4f0>
    3972:	43 c0       	rjmp	.+134    	; 0x39fa <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	fe 01       	movw	r30, r28
    3976:	e1 5a       	subi	r30, 0xA1	; 161
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	60 81       	ld	r22, Z
    397c:	71 81       	ldd	r23, Z+1	; 0x01
    397e:	82 81       	ldd	r24, Z+2	; 0x02
    3980:	93 81       	ldd	r25, Z+3	; 0x03
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e2       	ldi	r20, 0x20	; 32
    3988:	51 e4       	ldi	r21, 0x41	; 65
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	8e 01       	movw	r16, r28
    3994:	07 5a       	subi	r16, 0xA7	; 167
    3996:	1f 4f       	sbci	r17, 0xFF	; 255
    3998:	bc 01       	movw	r22, r24
    399a:	cd 01       	movw	r24, r26
    399c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	f8 01       	movw	r30, r16
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
    39aa:	1f c0       	rjmp	.+62     	; 0x39ea <LCD_voidInit+0x566>
    39ac:	fe 01       	movw	r30, r28
    39ae:	e9 5a       	subi	r30, 0xA9	; 169
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 e9       	ldi	r24, 0x90	; 144
    39b4:	91 e0       	ldi	r25, 0x01	; 1
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	80 83       	st	Z, r24
    39ba:	fe 01       	movw	r30, r28
    39bc:	e9 5a       	subi	r30, 0xA9	; 169
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <LCD_voidInit+0x540>
    39c8:	fe 01       	movw	r30, r28
    39ca:	e9 5a       	subi	r30, 0xA9	; 169
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d2:	de 01       	movw	r26, r28
    39d4:	a7 5a       	subi	r26, 0xA7	; 167
    39d6:	bf 4f       	sbci	r27, 0xFF	; 255
    39d8:	fe 01       	movw	r30, r28
    39da:	e7 5a       	subi	r30, 0xA7	; 167
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	80 81       	ld	r24, Z
    39e0:	91 81       	ldd	r25, Z+1	; 0x01
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	11 96       	adiw	r26, 0x01	; 1
    39e6:	9c 93       	st	X, r25
    39e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	fe 01       	movw	r30, r28
    39ec:	e7 5a       	subi	r30, 0xA7	; 167
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	80 81       	ld	r24, Z
    39f2:	91 81       	ldd	r25, Z+1	; 0x01
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	d1 f6       	brne	.-76     	; 0x39ac <LCD_voidInit+0x528>
    39f8:	27 c0       	rjmp	.+78     	; 0x3a48 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fa:	8e 01       	movw	r16, r28
    39fc:	07 5a       	subi	r16, 0xA7	; 167
    39fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3a00:	fe 01       	movw	r30, r28
    3a02:	e5 5a       	subi	r30, 0xA5	; 165
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	60 81       	ld	r22, Z
    3a08:	71 81       	ldd	r23, Z+1	; 0x01
    3a0a:	82 81       	ldd	r24, Z+2	; 0x02
    3a0c:	93 81       	ldd	r25, Z+3	; 0x03
    3a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	f8 01       	movw	r30, r16
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	80 83       	st	Z, r24
    3a1c:	de 01       	movw	r26, r28
    3a1e:	ab 5a       	subi	r26, 0xAB	; 171
    3a20:	bf 4f       	sbci	r27, 0xFF	; 255
    3a22:	fe 01       	movw	r30, r28
    3a24:	e7 5a       	subi	r30, 0xA7	; 167
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 81       	ld	r24, Z
    3a2a:	91 81       	ldd	r25, Z+1	; 0x01
    3a2c:	8d 93       	st	X+, r24
    3a2e:	9c 93       	st	X, r25
    3a30:	fe 01       	movw	r30, r28
    3a32:	eb 5a       	subi	r30, 0xAB	; 171
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	80 81       	ld	r24, Z
    3a38:	91 81       	ldd	r25, Z+1	; 0x01
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <LCD_voidInit+0x5b6>
    3a3e:	fe 01       	movw	r30, r28
    3a40:	eb 5a       	subi	r30, 0xAB	; 171
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    3a48:	80 e2       	ldi	r24, 0x20	; 32
    3a4a:	0e 94 32 21 	call	0x4264	; 0x4264 <LCD_voidSendInitCommand>
    3a4e:	fe 01       	movw	r30, r28
    3a50:	ef 5a       	subi	r30, 0xAF	; 175
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	a0 e8       	ldi	r26, 0x80	; 128
    3a5a:	bf e3       	ldi	r27, 0x3F	; 63
    3a5c:	80 83       	st	Z, r24
    3a5e:	91 83       	std	Z+1, r25	; 0x01
    3a60:	a2 83       	std	Z+2, r26	; 0x02
    3a62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a64:	8e 01       	movw	r16, r28
    3a66:	03 5b       	subi	r16, 0xB3	; 179
    3a68:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ef 5a       	subi	r30, 0xAF	; 175
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	4a e7       	ldi	r20, 0x7A	; 122
    3a7e:	55 e4       	ldi	r21, 0x45	; 69
    3a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	f8 01       	movw	r30, r16
    3a8a:	80 83       	st	Z, r24
    3a8c:	91 83       	std	Z+1, r25	; 0x01
    3a8e:	a2 83       	std	Z+2, r26	; 0x02
    3a90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a92:	fe 01       	movw	r30, r28
    3a94:	e3 5b       	subi	r30, 0xB3	; 179
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 81       	ld	r22, Z
    3a9a:	71 81       	ldd	r23, Z+1	; 0x01
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	93 81       	ldd	r25, Z+3	; 0x03
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	44 f4       	brge	.+16     	; 0x3ac0 <LCD_voidInit+0x63c>
		__ticks = 1;
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e5 5b       	subi	r30, 0xB5	; 181
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	91 83       	std	Z+1, r25	; 0x01
    3abc:	80 83       	st	Z, r24
    3abe:	64 c0       	rjmp	.+200    	; 0x3b88 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e3 5b       	subi	r30, 0xB3	; 179
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	60 81       	ld	r22, Z
    3ac8:	71 81       	ldd	r23, Z+1	; 0x01
    3aca:	82 81       	ldd	r24, Z+2	; 0x02
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	57 e4       	ldi	r21, 0x47	; 71
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	0c f0       	brlt	.+2      	; 0x3ae0 <LCD_voidInit+0x65c>
    3ade:	43 c0       	rjmp	.+134    	; 0x3b66 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	ef 5a       	subi	r30, 0xAF	; 175
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	60 81       	ld	r22, Z
    3ae8:	71 81       	ldd	r23, Z+1	; 0x01
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e2       	ldi	r20, 0x20	; 32
    3af4:	51 e4       	ldi	r21, 0x41	; 65
    3af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	8e 01       	movw	r16, r28
    3b00:	05 5b       	subi	r16, 0xB5	; 181
    3b02:	1f 4f       	sbci	r17, 0xFF	; 255
    3b04:	bc 01       	movw	r22, r24
    3b06:	cd 01       	movw	r24, r26
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	f8 01       	movw	r30, r16
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	1f c0       	rjmp	.+62     	; 0x3b56 <LCD_voidInit+0x6d2>
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e7 5b       	subi	r30, 0xB7	; 183
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 e9       	ldi	r24, 0x90	; 144
    3b20:	91 e0       	ldi	r25, 0x01	; 1
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	80 83       	st	Z, r24
    3b26:	fe 01       	movw	r30, r28
    3b28:	e7 5b       	subi	r30, 0xB7	; 183
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <LCD_voidInit+0x6ac>
    3b34:	fe 01       	movw	r30, r28
    3b36:	e7 5b       	subi	r30, 0xB7	; 183
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3e:	de 01       	movw	r26, r28
    3b40:	a5 5b       	subi	r26, 0xB5	; 181
    3b42:	bf 4f       	sbci	r27, 0xFF	; 255
    3b44:	fe 01       	movw	r30, r28
    3b46:	e5 5b       	subi	r30, 0xB5	; 181
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	11 96       	adiw	r26, 0x01	; 1
    3b52:	9c 93       	st	X, r25
    3b54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b56:	fe 01       	movw	r30, r28
    3b58:	e5 5b       	subi	r30, 0xB5	; 181
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 81       	ld	r24, Z
    3b5e:	91 81       	ldd	r25, Z+1	; 0x01
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	d1 f6       	brne	.-76     	; 0x3b18 <LCD_voidInit+0x694>
    3b64:	27 c0       	rjmp	.+78     	; 0x3bb4 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b66:	8e 01       	movw	r16, r28
    3b68:	05 5b       	subi	r16, 0xB5	; 181
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e3 5b       	subi	r30, 0xB3	; 179
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	60 81       	ld	r22, Z
    3b74:	71 81       	ldd	r23, Z+1	; 0x01
    3b76:	82 81       	ldd	r24, Z+2	; 0x02
    3b78:	93 81       	ldd	r25, Z+3	; 0x03
    3b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	f8 01       	movw	r30, r16
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	de 01       	movw	r26, r28
    3b8a:	a9 5b       	subi	r26, 0xB9	; 185
    3b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e5 5b       	subi	r30, 0xB5	; 181
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	8d 93       	st	X+, r24
    3b9a:	9c 93       	st	X, r25
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 5b       	subi	r30, 0xB9	; 185
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <LCD_voidInit+0x722>
    3baa:	fe 01       	movw	r30, r28
    3bac:	e9 5b       	subi	r30, 0xB9	; 185
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	91 83       	std	Z+1, r25	; 0x01
    3bb2:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    3bb4:	88 e2       	ldi	r24, 0x28	; 40
    3bb6:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ed 5b       	subi	r30, 0xBD	; 189
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	a0 e8       	ldi	r26, 0x80	; 128
    3bc6:	bf e3       	ldi	r27, 0x3F	; 63
    3bc8:	80 83       	st	Z, r24
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	a2 83       	std	Z+2, r26	; 0x02
    3bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd0:	8e 01       	movw	r16, r28
    3bd2:	01 5c       	subi	r16, 0xC1	; 193
    3bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ed 5b       	subi	r30, 0xBD	; 189
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	4a e7       	ldi	r20, 0x7A	; 122
    3bea:	55 e4       	ldi	r21, 0x45	; 69
    3bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	80 83       	st	Z, r24
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	a2 83       	std	Z+2, r26	; 0x02
    3bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ff 96       	adiw	r30, 0x3f	; 63
    3c02:	60 81       	ld	r22, Z
    3c04:	71 81       	ldd	r23, Z+1	; 0x01
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e8       	ldi	r20, 0x80	; 128
    3c10:	5f e3       	ldi	r21, 0x3F	; 63
    3c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c16:	88 23       	and	r24, r24
    3c18:	2c f4       	brge	.+10     	; 0x3c24 <LCD_voidInit+0x7a0>
		__ticks = 1;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	9e af       	std	Y+62, r25	; 0x3e
    3c20:	8d af       	std	Y+61, r24	; 0x3d
    3c22:	46 c0       	rjmp	.+140    	; 0x3cb0 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    3c24:	fe 01       	movw	r30, r28
    3c26:	ff 96       	adiw	r30, 0x3f	; 63
    3c28:	60 81       	ld	r22, Z
    3c2a:	71 81       	ldd	r23, Z+1	; 0x01
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	93 81       	ldd	r25, Z+3	; 0x03
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	3f ef       	ldi	r19, 0xFF	; 255
    3c34:	4f e7       	ldi	r20, 0x7F	; 127
    3c36:	57 e4       	ldi	r21, 0x47	; 71
    3c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c3c:	18 16       	cp	r1, r24
    3c3e:	64 f5       	brge	.+88     	; 0x3c98 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c40:	fe 01       	movw	r30, r28
    3c42:	ed 5b       	subi	r30, 0xBD	; 189
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	40 e2       	ldi	r20, 0x20	; 32
    3c54:	51 e4       	ldi	r21, 0x41	; 65
    3c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	bc 01       	movw	r22, r24
    3c60:	cd 01       	movw	r24, r26
    3c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	9e af       	std	Y+62, r25	; 0x3e
    3c6c:	8d af       	std	Y+61, r24	; 0x3d
    3c6e:	0f c0       	rjmp	.+30     	; 0x3c8e <LCD_voidInit+0x80a>
    3c70:	80 e9       	ldi	r24, 0x90	; 144
    3c72:	91 e0       	ldi	r25, 0x01	; 1
    3c74:	9c af       	std	Y+60, r25	; 0x3c
    3c76:	8b af       	std	Y+59, r24	; 0x3b
    3c78:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <LCD_voidInit+0x7f8>
    3c80:	9c af       	std	Y+60, r25	; 0x3c
    3c82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c88:	01 97       	sbiw	r24, 0x01	; 1
    3c8a:	9e af       	std	Y+62, r25	; 0x3e
    3c8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c90:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c92:	00 97       	sbiw	r24, 0x00	; 0
    3c94:	69 f7       	brne	.-38     	; 0x3c70 <LCD_voidInit+0x7ec>
    3c96:	16 c0       	rjmp	.+44     	; 0x3cc4 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ff 96       	adiw	r30, 0x3f	; 63
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	9e af       	std	Y+62, r25	; 0x3e
    3cae:	8d af       	std	Y+61, r24	; 0x3d
    3cb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cb4:	9a af       	std	Y+58, r25	; 0x3a
    3cb6:	89 af       	std	Y+57, r24	; 0x39
    3cb8:	89 ad       	ldd	r24, Y+57	; 0x39
    3cba:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	f1 f7       	brne	.-4      	; 0x3cbc <LCD_voidInit+0x838>
    3cc0:	9a af       	std	Y+58, r25	; 0x3a
    3cc2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    3cc4:	88 e0       	ldi	r24, 0x08	; 8
    3cc6:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	a0 e8       	ldi	r26, 0x80	; 128
    3cd0:	bf e3       	ldi	r27, 0x3F	; 63
    3cd2:	8d ab       	std	Y+53, r24	; 0x35
    3cd4:	9e ab       	std	Y+54, r25	; 0x36
    3cd6:	af ab       	std	Y+55, r26	; 0x37
    3cd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cda:	6d a9       	ldd	r22, Y+53	; 0x35
    3cdc:	7e a9       	ldd	r23, Y+54	; 0x36
    3cde:	8f a9       	ldd	r24, Y+55	; 0x37
    3ce0:	98 ad       	ldd	r25, Y+56	; 0x38
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	4a e7       	ldi	r20, 0x7A	; 122
    3ce8:	55 e4       	ldi	r21, 0x45	; 69
    3cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	89 ab       	std	Y+49, r24	; 0x31
    3cf4:	9a ab       	std	Y+50, r25	; 0x32
    3cf6:	ab ab       	std	Y+51, r26	; 0x33
    3cf8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cfa:	69 a9       	ldd	r22, Y+49	; 0x31
    3cfc:	7a a9       	ldd	r23, Y+50	; 0x32
    3cfe:	8b a9       	ldd	r24, Y+51	; 0x33
    3d00:	9c a9       	ldd	r25, Y+52	; 0x34
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e8       	ldi	r20, 0x80	; 128
    3d08:	5f e3       	ldi	r21, 0x3F	; 63
    3d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d0e:	88 23       	and	r24, r24
    3d10:	2c f4       	brge	.+10     	; 0x3d1c <LCD_voidInit+0x898>
		__ticks = 1;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	98 ab       	std	Y+48, r25	; 0x30
    3d18:	8f a7       	std	Y+47, r24	; 0x2f
    3d1a:	3f c0       	rjmp	.+126    	; 0x3d9a <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    3d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d20:	8b a9       	ldd	r24, Y+51	; 0x33
    3d22:	9c a9       	ldd	r25, Y+52	; 0x34
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	3f ef       	ldi	r19, 0xFF	; 255
    3d28:	4f e7       	ldi	r20, 0x7F	; 127
    3d2a:	57 e4       	ldi	r21, 0x47	; 71
    3d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	4c f5       	brge	.+82     	; 0x3d86 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d34:	6d a9       	ldd	r22, Y+53	; 0x35
    3d36:	7e a9       	ldd	r23, Y+54	; 0x36
    3d38:	8f a9       	ldd	r24, Y+55	; 0x37
    3d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e2       	ldi	r20, 0x20	; 32
    3d42:	51 e4       	ldi	r21, 0x41	; 65
    3d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	bc 01       	movw	r22, r24
    3d4e:	cd 01       	movw	r24, r26
    3d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	98 ab       	std	Y+48, r25	; 0x30
    3d5a:	8f a7       	std	Y+47, r24	; 0x2f
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <LCD_voidInit+0x8f8>
    3d5e:	80 e9       	ldi	r24, 0x90	; 144
    3d60:	91 e0       	ldi	r25, 0x01	; 1
    3d62:	9e a7       	std	Y+46, r25	; 0x2e
    3d64:	8d a7       	std	Y+45, r24	; 0x2d
    3d66:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d68:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <LCD_voidInit+0x8e6>
    3d6e:	9e a7       	std	Y+46, r25	; 0x2e
    3d70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d74:	98 a9       	ldd	r25, Y+48	; 0x30
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	98 ab       	std	Y+48, r25	; 0x30
    3d7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	69 f7       	brne	.-38     	; 0x3d5e <LCD_voidInit+0x8da>
    3d84:	14 c0       	rjmp	.+40     	; 0x3dae <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d86:	69 a9       	ldd	r22, Y+49	; 0x31
    3d88:	7a a9       	ldd	r23, Y+50	; 0x32
    3d8a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d8c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	98 ab       	std	Y+48, r25	; 0x30
    3d98:	8f a7       	std	Y+47, r24	; 0x2f
    3d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d9c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d9e:	9c a7       	std	Y+44, r25	; 0x2c
    3da0:	8b a7       	std	Y+43, r24	; 0x2b
    3da2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3da4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <LCD_voidInit+0x922>
    3daa:	9c a7       	std	Y+44, r25	; 0x2c
    3dac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	a0 ea       	ldi	r26, 0xA0	; 160
    3dba:	b0 e4       	ldi	r27, 0x40	; 64
    3dbc:	8f a3       	std	Y+39, r24	; 0x27
    3dbe:	98 a7       	std	Y+40, r25	; 0x28
    3dc0:	a9 a7       	std	Y+41, r26	; 0x29
    3dc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc4:	6f a1       	ldd	r22, Y+39	; 0x27
    3dc6:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc8:	89 a5       	ldd	r24, Y+41	; 0x29
    3dca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	4a e7       	ldi	r20, 0x7A	; 122
    3dd2:	55 e4       	ldi	r21, 0x45	; 69
    3dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	8b a3       	std	Y+35, r24	; 0x23
    3dde:	9c a3       	std	Y+36, r25	; 0x24
    3de0:	ad a3       	std	Y+37, r26	; 0x25
    3de2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3de4:	6b a1       	ldd	r22, Y+35	; 0x23
    3de6:	7c a1       	ldd	r23, Y+36	; 0x24
    3de8:	8d a1       	ldd	r24, Y+37	; 0x25
    3dea:	9e a1       	ldd	r25, Y+38	; 0x26
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e8       	ldi	r20, 0x80	; 128
    3df2:	5f e3       	ldi	r21, 0x3F	; 63
    3df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3df8:	88 23       	and	r24, r24
    3dfa:	2c f4       	brge	.+10     	; 0x3e06 <LCD_voidInit+0x982>
		__ticks = 1;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	9a a3       	std	Y+34, r25	; 0x22
    3e02:	89 a3       	std	Y+33, r24	; 0x21
    3e04:	3f c0       	rjmp	.+126    	; 0x3e84 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    3e06:	6b a1       	ldd	r22, Y+35	; 0x23
    3e08:	7c a1       	ldd	r23, Y+36	; 0x24
    3e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	3f ef       	ldi	r19, 0xFF	; 255
    3e12:	4f e7       	ldi	r20, 0x7F	; 127
    3e14:	57 e4       	ldi	r21, 0x47	; 71
    3e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e1a:	18 16       	cp	r1, r24
    3e1c:	4c f5       	brge	.+82     	; 0x3e70 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e20:	78 a5       	ldd	r23, Y+40	; 0x28
    3e22:	89 a5       	ldd	r24, Y+41	; 0x29
    3e24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	40 e2       	ldi	r20, 0x20	; 32
    3e2c:	51 e4       	ldi	r21, 0x41	; 65
    3e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	bc 01       	movw	r22, r24
    3e38:	cd 01       	movw	r24, r26
    3e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	9a a3       	std	Y+34, r25	; 0x22
    3e44:	89 a3       	std	Y+33, r24	; 0x21
    3e46:	0f c0       	rjmp	.+30     	; 0x3e66 <LCD_voidInit+0x9e2>
    3e48:	80 e9       	ldi	r24, 0x90	; 144
    3e4a:	91 e0       	ldi	r25, 0x01	; 1
    3e4c:	98 a3       	std	Y+32, r25	; 0x20
    3e4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3e50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e52:	98 a1       	ldd	r25, Y+32	; 0x20
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	f1 f7       	brne	.-4      	; 0x3e54 <LCD_voidInit+0x9d0>
    3e58:	98 a3       	std	Y+32, r25	; 0x20
    3e5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	9a a3       	std	Y+34, r25	; 0x22
    3e64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e66:	89 a1       	ldd	r24, Y+33	; 0x21
    3e68:	9a a1       	ldd	r25, Y+34	; 0x22
    3e6a:	00 97       	sbiw	r24, 0x00	; 0
    3e6c:	69 f7       	brne	.-38     	; 0x3e48 <LCD_voidInit+0x9c4>
    3e6e:	14 c0       	rjmp	.+40     	; 0x3e98 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e70:	6b a1       	ldd	r22, Y+35	; 0x23
    3e72:	7c a1       	ldd	r23, Y+36	; 0x24
    3e74:	8d a1       	ldd	r24, Y+37	; 0x25
    3e76:	9e a1       	ldd	r25, Y+38	; 0x26
    3e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	9a a3       	std	Y+34, r25	; 0x22
    3e82:	89 a3       	std	Y+33, r24	; 0x21
    3e84:	89 a1       	ldd	r24, Y+33	; 0x21
    3e86:	9a a1       	ldd	r25, Y+34	; 0x22
    3e88:	9e 8f       	std	Y+30, r25	; 0x1e
    3e8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <LCD_voidInit+0xa0c>
    3e94:	9e 8f       	std	Y+30, r25	; 0x1e
    3e96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    3e98:	8c e0       	ldi	r24, 0x0C	; 12
    3e9a:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	a0 e8       	ldi	r26, 0x80	; 128
    3ea4:	bf e3       	ldi	r27, 0x3F	; 63
    3ea6:	89 8f       	std	Y+25, r24	; 0x19
    3ea8:	9a 8f       	std	Y+26, r25	; 0x1a
    3eaa:	ab 8f       	std	Y+27, r26	; 0x1b
    3eac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eae:	69 8d       	ldd	r22, Y+25	; 0x19
    3eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	4a e7       	ldi	r20, 0x7A	; 122
    3ebc:	55 e4       	ldi	r21, 0x45	; 69
    3ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	8d 8b       	std	Y+21, r24	; 0x15
    3ec8:	9e 8b       	std	Y+22, r25	; 0x16
    3eca:	af 8b       	std	Y+23, r26	; 0x17
    3ecc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ece:	6d 89       	ldd	r22, Y+21	; 0x15
    3ed0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e8       	ldi	r20, 0x80	; 128
    3edc:	5f e3       	ldi	r21, 0x3F	; 63
    3ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ee2:	88 23       	and	r24, r24
    3ee4:	2c f4       	brge	.+10     	; 0x3ef0 <LCD_voidInit+0xa6c>
		__ticks = 1;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	9c 8b       	std	Y+20, r25	; 0x14
    3eec:	8b 8b       	std	Y+19, r24	; 0x13
    3eee:	3f c0       	rjmp	.+126    	; 0x3f6e <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    3ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	3f ef       	ldi	r19, 0xFF	; 255
    3efc:	4f e7       	ldi	r20, 0x7F	; 127
    3efe:	57 e4       	ldi	r21, 0x47	; 71
    3f00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f04:	18 16       	cp	r1, r24
    3f06:	4c f5       	brge	.+82     	; 0x3f5a <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f08:	69 8d       	ldd	r22, Y+25	; 0x19
    3f0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e2       	ldi	r20, 0x20	; 32
    3f16:	51 e4       	ldi	r21, 0x41	; 65
    3f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	bc 01       	movw	r22, r24
    3f22:	cd 01       	movw	r24, r26
    3f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	9c 8b       	std	Y+20, r25	; 0x14
    3f2e:	8b 8b       	std	Y+19, r24	; 0x13
    3f30:	0f c0       	rjmp	.+30     	; 0x3f50 <LCD_voidInit+0xacc>
    3f32:	80 e9       	ldi	r24, 0x90	; 144
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	9a 8b       	std	Y+18, r25	; 0x12
    3f38:	89 8b       	std	Y+17, r24	; 0x11
    3f3a:	89 89       	ldd	r24, Y+17	; 0x11
    3f3c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	f1 f7       	brne	.-4      	; 0x3f3e <LCD_voidInit+0xaba>
    3f42:	9a 8b       	std	Y+18, r25	; 0x12
    3f44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f46:	8b 89       	ldd	r24, Y+19	; 0x13
    3f48:	9c 89       	ldd	r25, Y+20	; 0x14
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	9c 8b       	std	Y+20, r25	; 0x14
    3f4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f50:	8b 89       	ldd	r24, Y+19	; 0x13
    3f52:	9c 89       	ldd	r25, Y+20	; 0x14
    3f54:	00 97       	sbiw	r24, 0x00	; 0
    3f56:	69 f7       	brne	.-38     	; 0x3f32 <LCD_voidInit+0xaae>
    3f58:	14 c0       	rjmp	.+40     	; 0x3f82 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f60:	98 8d       	ldd	r25, Y+24	; 0x18
    3f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	9c 8b       	std	Y+20, r25	; 0x14
    3f6c:	8b 8b       	std	Y+19, r24	; 0x13
    3f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3f70:	9c 89       	ldd	r25, Y+20	; 0x14
    3f72:	98 8b       	std	Y+16, r25	; 0x10
    3f74:	8f 87       	std	Y+15, r24	; 0x0f
    3f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f78:	98 89       	ldd	r25, Y+16	; 0x10
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	f1 f7       	brne	.-4      	; 0x3f7a <LCD_voidInit+0xaf6>
    3f7e:	98 8b       	std	Y+16, r25	; 0x10
    3f80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    3f82:	86 e0       	ldi	r24, 0x06	; 6
    3f84:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	a0 e8       	ldi	r26, 0x80	; 128
    3f8e:	bf e3       	ldi	r27, 0x3F	; 63
    3f90:	8b 87       	std	Y+11, r24	; 0x0b
    3f92:	9c 87       	std	Y+12, r25	; 0x0c
    3f94:	ad 87       	std	Y+13, r26	; 0x0d
    3f96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	4a e7       	ldi	r20, 0x7A	; 122
    3fa6:	55 e4       	ldi	r21, 0x45	; 69
    3fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	8f 83       	std	Y+7, r24	; 0x07
    3fb2:	98 87       	std	Y+8, r25	; 0x08
    3fb4:	a9 87       	std	Y+9, r26	; 0x09
    3fb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fba:	78 85       	ldd	r23, Y+8	; 0x08
    3fbc:	89 85       	ldd	r24, Y+9	; 0x09
    3fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e8       	ldi	r20, 0x80	; 128
    3fc6:	5f e3       	ldi	r21, 0x3F	; 63
    3fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fcc:	88 23       	and	r24, r24
    3fce:	2c f4       	brge	.+10     	; 0x3fda <LCD_voidInit+0xb56>
		__ticks = 1;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	9e 83       	std	Y+6, r25	; 0x06
    3fd6:	8d 83       	std	Y+5, r24	; 0x05
    3fd8:	3f c0       	rjmp	.+126    	; 0x4058 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    3fda:	6f 81       	ldd	r22, Y+7	; 0x07
    3fdc:	78 85       	ldd	r23, Y+8	; 0x08
    3fde:	89 85       	ldd	r24, Y+9	; 0x09
    3fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	3f ef       	ldi	r19, 0xFF	; 255
    3fe6:	4f e7       	ldi	r20, 0x7F	; 127
    3fe8:	57 e4       	ldi	r21, 0x47	; 71
    3fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fee:	18 16       	cp	r1, r24
    3ff0:	4c f5       	brge	.+82     	; 0x4044 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	40 e2       	ldi	r20, 0x20	; 32
    4000:	51 e4       	ldi	r21, 0x41	; 65
    4002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	bc 01       	movw	r22, r24
    400c:	cd 01       	movw	r24, r26
    400e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	9e 83       	std	Y+6, r25	; 0x06
    4018:	8d 83       	std	Y+5, r24	; 0x05
    401a:	0f c0       	rjmp	.+30     	; 0x403a <LCD_voidInit+0xbb6>
    401c:	80 e9       	ldi	r24, 0x90	; 144
    401e:	91 e0       	ldi	r25, 0x01	; 1
    4020:	9c 83       	std	Y+4, r25	; 0x04
    4022:	8b 83       	std	Y+3, r24	; 0x03
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	9c 81       	ldd	r25, Y+4	; 0x04
    4028:	01 97       	sbiw	r24, 0x01	; 1
    402a:	f1 f7       	brne	.-4      	; 0x4028 <LCD_voidInit+0xba4>
    402c:	9c 83       	std	Y+4, r25	; 0x04
    402e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4030:	8d 81       	ldd	r24, Y+5	; 0x05
    4032:	9e 81       	ldd	r25, Y+6	; 0x06
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	9e 83       	std	Y+6, r25	; 0x06
    4038:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403a:	8d 81       	ldd	r24, Y+5	; 0x05
    403c:	9e 81       	ldd	r25, Y+6	; 0x06
    403e:	00 97       	sbiw	r24, 0x00	; 0
    4040:	69 f7       	brne	.-38     	; 0x401c <LCD_voidInit+0xb98>
    4042:	14 c0       	rjmp	.+40     	; 0x406c <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4044:	6f 81       	ldd	r22, Y+7	; 0x07
    4046:	78 85       	ldd	r23, Y+8	; 0x08
    4048:	89 85       	ldd	r24, Y+9	; 0x09
    404a:	9a 85       	ldd	r25, Y+10	; 0x0a
    404c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	9e 83       	std	Y+6, r25	; 0x06
    4056:	8d 83       	std	Y+5, r24	; 0x05
    4058:	8d 81       	ldd	r24, Y+5	; 0x05
    405a:	9e 81       	ldd	r25, Y+6	; 0x06
    405c:	9a 83       	std	Y+2, r25	; 0x02
    405e:	89 83       	std	Y+1, r24	; 0x01
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	f1 f7       	brne	.-4      	; 0x4064 <LCD_voidInit+0xbe0>
    4068:	9a 83       	std	Y+2, r25	; 0x02
    406a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    406c:	c4 57       	subi	r28, 0x74	; 116
    406e:	df 4f       	sbci	r29, 0xFF	; 255
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	08 95       	ret

00004084 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    4084:	df 93       	push	r29
    4086:	cf 93       	push	r28
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	2f 97       	sbiw	r28, 0x0f	; 15
    408e:	0f b6       	in	r0, 0x3f	; 63
    4090:	f8 94       	cli
    4092:	de bf       	out	0x3e, r29	; 62
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	cd bf       	out	0x3d, r28	; 61
    4098:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	63 e0       	ldi	r22, 0x03	; 3
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	62 e0       	ldi	r22, 0x02	; 2
    40a8:	41 e0       	ldi	r20, 0x01	; 1
    40aa:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    40ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    40b0:	82 95       	swap	r24
    40b2:	8f 70       	andi	r24, 0x0F	; 15
    40b4:	98 2f       	mov	r25, r24
    40b6:	91 70       	andi	r25, 0x01	; 1
    40b8:	82 e0       	ldi	r24, 0x02	; 2
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	49 2f       	mov	r20, r25
    40be:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    40c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c4:	82 95       	swap	r24
    40c6:	86 95       	lsr	r24
    40c8:	87 70       	andi	r24, 0x07	; 7
    40ca:	98 2f       	mov	r25, r24
    40cc:	91 70       	andi	r25, 0x01	; 1
    40ce:	82 e0       	ldi	r24, 0x02	; 2
    40d0:	61 e0       	ldi	r22, 0x01	; 1
    40d2:	49 2f       	mov	r20, r25
    40d4:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    40d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40da:	82 95       	swap	r24
    40dc:	86 95       	lsr	r24
    40de:	86 95       	lsr	r24
    40e0:	83 70       	andi	r24, 0x03	; 3
    40e2:	98 2f       	mov	r25, r24
    40e4:	91 70       	andi	r25, 0x01	; 1
    40e6:	82 e0       	ldi	r24, 0x02	; 2
    40e8:	62 e0       	ldi	r22, 0x02	; 2
    40ea:	49 2f       	mov	r20, r25
    40ec:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    40f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f2:	98 2f       	mov	r25, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	99 27       	eor	r25, r25
    40f8:	99 1f       	adc	r25, r25
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	64 e0       	ldi	r22, 0x04	; 4
    40fe:	49 2f       	mov	r20, r25
    4100:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	62 e0       	ldi	r22, 0x02	; 2
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	41 e0       	ldi	r20, 0x01	; 1
    4114:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    4118:	8f 85       	ldd	r24, Y+15	; 0x0f
    411a:	98 2f       	mov	r25, r24
    411c:	91 70       	andi	r25, 0x01	; 1
    411e:	82 e0       	ldi	r24, 0x02	; 2
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	49 2f       	mov	r20, r25
    4124:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    4128:	8f 85       	ldd	r24, Y+15	; 0x0f
    412a:	86 95       	lsr	r24
    412c:	98 2f       	mov	r25, r24
    412e:	91 70       	andi	r25, 0x01	; 1
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	61 e0       	ldi	r22, 0x01	; 1
    4134:	49 2f       	mov	r20, r25
    4136:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    413a:	8f 85       	ldd	r24, Y+15	; 0x0f
    413c:	86 95       	lsr	r24
    413e:	86 95       	lsr	r24
    4140:	98 2f       	mov	r25, r24
    4142:	91 70       	andi	r25, 0x01	; 1
    4144:	82 e0       	ldi	r24, 0x02	; 2
    4146:	62 e0       	ldi	r22, 0x02	; 2
    4148:	49 2f       	mov	r20, r25
    414a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    414e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4150:	86 95       	lsr	r24
    4152:	86 95       	lsr	r24
    4154:	86 95       	lsr	r24
    4156:	98 2f       	mov	r25, r24
    4158:	91 70       	andi	r25, 0x01	; 1
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	64 e0       	ldi	r22, 0x04	; 4
    415e:	49 2f       	mov	r20, r25
    4160:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	62 e0       	ldi	r22, 0x02	; 2
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	a0 ea       	ldi	r26, 0xA0	; 160
    4174:	b0 e4       	ldi	r27, 0x40	; 64
    4176:	8b 87       	std	Y+11, r24	; 0x0b
    4178:	9c 87       	std	Y+12, r25	; 0x0c
    417a:	ad 87       	std	Y+13, r26	; 0x0d
    417c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4180:	7c 85       	ldd	r23, Y+12	; 0x0c
    4182:	8d 85       	ldd	r24, Y+13	; 0x0d
    4184:	9e 85       	ldd	r25, Y+14	; 0x0e
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	4a e7       	ldi	r20, 0x7A	; 122
    418c:	55 e4       	ldi	r21, 0x45	; 69
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	8f 83       	std	Y+7, r24	; 0x07
    4198:	98 87       	std	Y+8, r25	; 0x08
    419a:	a9 87       	std	Y+9, r26	; 0x09
    419c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    419e:	6f 81       	ldd	r22, Y+7	; 0x07
    41a0:	78 85       	ldd	r23, Y+8	; 0x08
    41a2:	89 85       	ldd	r24, Y+9	; 0x09
    41a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e8       	ldi	r20, 0x80	; 128
    41ac:	5f e3       	ldi	r21, 0x3F	; 63
    41ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b2:	88 23       	and	r24, r24
    41b4:	2c f4       	brge	.+10     	; 0x41c0 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	9e 83       	std	Y+6, r25	; 0x06
    41bc:	8d 83       	std	Y+5, r24	; 0x05
    41be:	3f c0       	rjmp	.+126    	; 0x423e <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	3f ef       	ldi	r19, 0xFF	; 255
    41cc:	4f e7       	ldi	r20, 0x7F	; 127
    41ce:	57 e4       	ldi	r21, 0x47	; 71
    41d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d4:	18 16       	cp	r1, r24
    41d6:	4c f5       	brge	.+82     	; 0x422a <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41da:	7c 85       	ldd	r23, Y+12	; 0x0c
    41dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41de:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	40 e2       	ldi	r20, 0x20	; 32
    41e6:	51 e4       	ldi	r21, 0x41	; 65
    41e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	bc 01       	movw	r22, r24
    41f2:	cd 01       	movw	r24, r26
    41f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
    4200:	0f c0       	rjmp	.+30     	; 0x4220 <LCD_voidSendCommand+0x19c>
    4202:	80 e9       	ldi	r24, 0x90	; 144
    4204:	91 e0       	ldi	r25, 0x01	; 1
    4206:	9c 83       	std	Y+4, r25	; 0x04
    4208:	8b 83       	std	Y+3, r24	; 0x03
    420a:	8b 81       	ldd	r24, Y+3	; 0x03
    420c:	9c 81       	ldd	r25, Y+4	; 0x04
    420e:	01 97       	sbiw	r24, 0x01	; 1
    4210:	f1 f7       	brne	.-4      	; 0x420e <LCD_voidSendCommand+0x18a>
    4212:	9c 83       	std	Y+4, r25	; 0x04
    4214:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	9e 83       	std	Y+6, r25	; 0x06
    421e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4220:	8d 81       	ldd	r24, Y+5	; 0x05
    4222:	9e 81       	ldd	r25, Y+6	; 0x06
    4224:	00 97       	sbiw	r24, 0x00	; 0
    4226:	69 f7       	brne	.-38     	; 0x4202 <LCD_voidSendCommand+0x17e>
    4228:	14 c0       	rjmp	.+40     	; 0x4252 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422a:	6f 81       	ldd	r22, Y+7	; 0x07
    422c:	78 85       	ldd	r23, Y+8	; 0x08
    422e:	89 85       	ldd	r24, Y+9	; 0x09
    4230:	9a 85       	ldd	r25, Y+10	; 0x0a
    4232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4236:	dc 01       	movw	r26, r24
    4238:	cb 01       	movw	r24, r22
    423a:	9e 83       	std	Y+6, r25	; 0x06
    423c:	8d 83       	std	Y+5, r24	; 0x05
    423e:	8d 81       	ldd	r24, Y+5	; 0x05
    4240:	9e 81       	ldd	r25, Y+6	; 0x06
    4242:	9a 83       	std	Y+2, r25	; 0x02
    4244:	89 83       	std	Y+1, r24	; 0x01
    4246:	89 81       	ldd	r24, Y+1	; 0x01
    4248:	9a 81       	ldd	r25, Y+2	; 0x02
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <LCD_voidSendCommand+0x1c6>
    424e:	9a 83       	std	Y+2, r25	; 0x02
    4250:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    4252:	2f 96       	adiw	r28, 0x0f	; 15
    4254:	0f b6       	in	r0, 0x3f	; 63
    4256:	f8 94       	cli
    4258:	de bf       	out	0x3e, r29	; 62
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	2f 97       	sbiw	r28, 0x0f	; 15
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	f8 94       	cli
    4272:	de bf       	out	0x3e, r29	; 62
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	63 e0       	ldi	r22, 0x03	; 3
    427e:	40 e0       	ldi	r20, 0x00	; 0
    4280:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	62 e0       	ldi	r22, 0x02	; 2
    4288:	41 e0       	ldi	r20, 0x01	; 1
    428a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    428e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4290:	82 95       	swap	r24
    4292:	8f 70       	andi	r24, 0x0F	; 15
    4294:	98 2f       	mov	r25, r24
    4296:	91 70       	andi	r25, 0x01	; 1
    4298:	82 e0       	ldi	r24, 0x02	; 2
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	49 2f       	mov	r20, r25
    429e:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    42a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42a4:	82 95       	swap	r24
    42a6:	86 95       	lsr	r24
    42a8:	87 70       	andi	r24, 0x07	; 7
    42aa:	98 2f       	mov	r25, r24
    42ac:	91 70       	andi	r25, 0x01	; 1
    42ae:	82 e0       	ldi	r24, 0x02	; 2
    42b0:	61 e0       	ldi	r22, 0x01	; 1
    42b2:	49 2f       	mov	r20, r25
    42b4:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    42b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    42ba:	82 95       	swap	r24
    42bc:	86 95       	lsr	r24
    42be:	86 95       	lsr	r24
    42c0:	83 70       	andi	r24, 0x03	; 3
    42c2:	98 2f       	mov	r25, r24
    42c4:	91 70       	andi	r25, 0x01	; 1
    42c6:	82 e0       	ldi	r24, 0x02	; 2
    42c8:	62 e0       	ldi	r22, 0x02	; 2
    42ca:	49 2f       	mov	r20, r25
    42cc:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    42d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d2:	98 2f       	mov	r25, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	99 27       	eor	r25, r25
    42d8:	99 1f       	adc	r25, r25
    42da:	82 e0       	ldi	r24, 0x02	; 2
    42dc:	64 e0       	ldi	r22, 0x04	; 4
    42de:	49 2f       	mov	r20, r25
    42e0:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	62 e0       	ldi	r22, 0x02	; 2
    42e8:	40 e0       	ldi	r20, 0x00	; 0
    42ea:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	a0 ea       	ldi	r26, 0xA0	; 160
    42f4:	b0 e4       	ldi	r27, 0x40	; 64
    42f6:	8b 87       	std	Y+11, r24	; 0x0b
    42f8:	9c 87       	std	Y+12, r25	; 0x0c
    42fa:	ad 87       	std	Y+13, r26	; 0x0d
    42fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4300:	7c 85       	ldd	r23, Y+12	; 0x0c
    4302:	8d 85       	ldd	r24, Y+13	; 0x0d
    4304:	9e 85       	ldd	r25, Y+14	; 0x0e
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	4a e7       	ldi	r20, 0x7A	; 122
    430c:	55 e4       	ldi	r21, 0x45	; 69
    430e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	8f 83       	std	Y+7, r24	; 0x07
    4318:	98 87       	std	Y+8, r25	; 0x08
    431a:	a9 87       	std	Y+9, r26	; 0x09
    431c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    431e:	6f 81       	ldd	r22, Y+7	; 0x07
    4320:	78 85       	ldd	r23, Y+8	; 0x08
    4322:	89 85       	ldd	r24, Y+9	; 0x09
    4324:	9a 85       	ldd	r25, Y+10	; 0x0a
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e8       	ldi	r20, 0x80	; 128
    432c:	5f e3       	ldi	r21, 0x3F	; 63
    432e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4332:	88 23       	and	r24, r24
    4334:	2c f4       	brge	.+10     	; 0x4340 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	9e 83       	std	Y+6, r25	; 0x06
    433c:	8d 83       	std	Y+5, r24	; 0x05
    433e:	3f c0       	rjmp	.+126    	; 0x43be <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    4340:	6f 81       	ldd	r22, Y+7	; 0x07
    4342:	78 85       	ldd	r23, Y+8	; 0x08
    4344:	89 85       	ldd	r24, Y+9	; 0x09
    4346:	9a 85       	ldd	r25, Y+10	; 0x0a
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	3f ef       	ldi	r19, 0xFF	; 255
    434c:	4f e7       	ldi	r20, 0x7F	; 127
    434e:	57 e4       	ldi	r21, 0x47	; 71
    4350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4354:	18 16       	cp	r1, r24
    4356:	4c f5       	brge	.+82     	; 0x43aa <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4358:	6b 85       	ldd	r22, Y+11	; 0x0b
    435a:	7c 85       	ldd	r23, Y+12	; 0x0c
    435c:	8d 85       	ldd	r24, Y+13	; 0x0d
    435e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	40 e2       	ldi	r20, 0x20	; 32
    4366:	51 e4       	ldi	r21, 0x41	; 65
    4368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	9e 83       	std	Y+6, r25	; 0x06
    437e:	8d 83       	std	Y+5, r24	; 0x05
    4380:	0f c0       	rjmp	.+30     	; 0x43a0 <LCD_voidSendInitCommand+0x13c>
    4382:	80 e9       	ldi	r24, 0x90	; 144
    4384:	91 e0       	ldi	r25, 0x01	; 1
    4386:	9c 83       	std	Y+4, r25	; 0x04
    4388:	8b 83       	std	Y+3, r24	; 0x03
    438a:	8b 81       	ldd	r24, Y+3	; 0x03
    438c:	9c 81       	ldd	r25, Y+4	; 0x04
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <LCD_voidSendInitCommand+0x12a>
    4392:	9c 83       	std	Y+4, r25	; 0x04
    4394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4396:	8d 81       	ldd	r24, Y+5	; 0x05
    4398:	9e 81       	ldd	r25, Y+6	; 0x06
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	9e 83       	std	Y+6, r25	; 0x06
    439e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a0:	8d 81       	ldd	r24, Y+5	; 0x05
    43a2:	9e 81       	ldd	r25, Y+6	; 0x06
    43a4:	00 97       	sbiw	r24, 0x00	; 0
    43a6:	69 f7       	brne	.-38     	; 0x4382 <LCD_voidSendInitCommand+0x11e>
    43a8:	14 c0       	rjmp	.+40     	; 0x43d2 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43aa:	6f 81       	ldd	r22, Y+7	; 0x07
    43ac:	78 85       	ldd	r23, Y+8	; 0x08
    43ae:	89 85       	ldd	r24, Y+9	; 0x09
    43b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	9e 83       	std	Y+6, r25	; 0x06
    43bc:	8d 83       	std	Y+5, r24	; 0x05
    43be:	8d 81       	ldd	r24, Y+5	; 0x05
    43c0:	9e 81       	ldd	r25, Y+6	; 0x06
    43c2:	9a 83       	std	Y+2, r25	; 0x02
    43c4:	89 83       	std	Y+1, r24	; 0x01
    43c6:	89 81       	ldd	r24, Y+1	; 0x01
    43c8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <LCD_voidSendInitCommand+0x166>
    43ce:	9a 83       	std	Y+2, r25	; 0x02
    43d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    43d2:	2f 96       	adiw	r28, 0x0f	; 15
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	cf 91       	pop	r28
    43e0:	df 91       	pop	r29
    43e2:	08 95       	ret

000043e4 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    43e4:	df 93       	push	r29
    43e6:	cf 93       	push	r28
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
    43ec:	2f 97       	sbiw	r28, 0x0f	; 15
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	63 e0       	ldi	r22, 0x03	; 3
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	62 e0       	ldi	r22, 0x02	; 2
    4408:	41 e0       	ldi	r20, 0x01	; 1
    440a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    440e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4410:	82 95       	swap	r24
    4412:	8f 70       	andi	r24, 0x0F	; 15
    4414:	98 2f       	mov	r25, r24
    4416:	91 70       	andi	r25, 0x01	; 1
    4418:	82 e0       	ldi	r24, 0x02	; 2
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	49 2f       	mov	r20, r25
    441e:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    4422:	8f 85       	ldd	r24, Y+15	; 0x0f
    4424:	82 95       	swap	r24
    4426:	86 95       	lsr	r24
    4428:	87 70       	andi	r24, 0x07	; 7
    442a:	98 2f       	mov	r25, r24
    442c:	91 70       	andi	r25, 0x01	; 1
    442e:	82 e0       	ldi	r24, 0x02	; 2
    4430:	61 e0       	ldi	r22, 0x01	; 1
    4432:	49 2f       	mov	r20, r25
    4434:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    4438:	8f 85       	ldd	r24, Y+15	; 0x0f
    443a:	82 95       	swap	r24
    443c:	86 95       	lsr	r24
    443e:	86 95       	lsr	r24
    4440:	83 70       	andi	r24, 0x03	; 3
    4442:	98 2f       	mov	r25, r24
    4444:	91 70       	andi	r25, 0x01	; 1
    4446:	82 e0       	ldi	r24, 0x02	; 2
    4448:	62 e0       	ldi	r22, 0x02	; 2
    444a:	49 2f       	mov	r20, r25
    444c:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    4450:	8f 85       	ldd	r24, Y+15	; 0x0f
    4452:	98 2f       	mov	r25, r24
    4454:	99 1f       	adc	r25, r25
    4456:	99 27       	eor	r25, r25
    4458:	99 1f       	adc	r25, r25
    445a:	82 e0       	ldi	r24, 0x02	; 2
    445c:	64 e0       	ldi	r22, 0x04	; 4
    445e:	49 2f       	mov	r20, r25
    4460:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	62 e0       	ldi	r22, 0x02	; 2
    4468:	40 e0       	ldi	r20, 0x00	; 0
    446a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    446e:	81 e0       	ldi	r24, 0x01	; 1
    4470:	62 e0       	ldi	r22, 0x02	; 2
    4472:	41 e0       	ldi	r20, 0x01	; 1
    4474:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    4478:	8f 85       	ldd	r24, Y+15	; 0x0f
    447a:	98 2f       	mov	r25, r24
    447c:	91 70       	andi	r25, 0x01	; 1
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	49 2f       	mov	r20, r25
    4484:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    4488:	8f 85       	ldd	r24, Y+15	; 0x0f
    448a:	86 95       	lsr	r24
    448c:	98 2f       	mov	r25, r24
    448e:	91 70       	andi	r25, 0x01	; 1
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	61 e0       	ldi	r22, 0x01	; 1
    4494:	49 2f       	mov	r20, r25
    4496:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    449a:	8f 85       	ldd	r24, Y+15	; 0x0f
    449c:	86 95       	lsr	r24
    449e:	86 95       	lsr	r24
    44a0:	98 2f       	mov	r25, r24
    44a2:	91 70       	andi	r25, 0x01	; 1
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	62 e0       	ldi	r22, 0x02	; 2
    44a8:	49 2f       	mov	r20, r25
    44aa:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    44ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b0:	86 95       	lsr	r24
    44b2:	86 95       	lsr	r24
    44b4:	86 95       	lsr	r24
    44b6:	98 2f       	mov	r25, r24
    44b8:	91 70       	andi	r25, 0x01	; 1
    44ba:	82 e0       	ldi	r24, 0x02	; 2
    44bc:	64 e0       	ldi	r22, 0x04	; 4
    44be:	49 2f       	mov	r20, r25
    44c0:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	62 e0       	ldi	r22, 0x02	; 2
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	a0 ea       	ldi	r26, 0xA0	; 160
    44d4:	b0 e4       	ldi	r27, 0x40	; 64
    44d6:	8b 87       	std	Y+11, r24	; 0x0b
    44d8:	9c 87       	std	Y+12, r25	; 0x0c
    44da:	ad 87       	std	Y+13, r26	; 0x0d
    44dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44de:	6b 85       	ldd	r22, Y+11	; 0x0b
    44e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	4a e7       	ldi	r20, 0x7A	; 122
    44ec:	55 e4       	ldi	r21, 0x45	; 69
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	8f 83       	std	Y+7, r24	; 0x07
    44f8:	98 87       	std	Y+8, r25	; 0x08
    44fa:	a9 87       	std	Y+9, r26	; 0x09
    44fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4500:	78 85       	ldd	r23, Y+8	; 0x08
    4502:	89 85       	ldd	r24, Y+9	; 0x09
    4504:	9a 85       	ldd	r25, Y+10	; 0x0a
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	40 e8       	ldi	r20, 0x80	; 128
    450c:	5f e3       	ldi	r21, 0x3F	; 63
    450e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4512:	88 23       	and	r24, r24
    4514:	2c f4       	brge	.+10     	; 0x4520 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	9e 83       	std	Y+6, r25	; 0x06
    451c:	8d 83       	std	Y+5, r24	; 0x05
    451e:	3f c0       	rjmp	.+126    	; 0x459e <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    4520:	6f 81       	ldd	r22, Y+7	; 0x07
    4522:	78 85       	ldd	r23, Y+8	; 0x08
    4524:	89 85       	ldd	r24, Y+9	; 0x09
    4526:	9a 85       	ldd	r25, Y+10	; 0x0a
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	3f ef       	ldi	r19, 0xFF	; 255
    452c:	4f e7       	ldi	r20, 0x7F	; 127
    452e:	57 e4       	ldi	r21, 0x47	; 71
    4530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4534:	18 16       	cp	r1, r24
    4536:	4c f5       	brge	.+82     	; 0x458a <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4538:	6b 85       	ldd	r22, Y+11	; 0x0b
    453a:	7c 85       	ldd	r23, Y+12	; 0x0c
    453c:	8d 85       	ldd	r24, Y+13	; 0x0d
    453e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e2       	ldi	r20, 0x20	; 32
    4546:	51 e4       	ldi	r21, 0x41	; 65
    4548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	9e 83       	std	Y+6, r25	; 0x06
    455e:	8d 83       	std	Y+5, r24	; 0x05
    4560:	0f c0       	rjmp	.+30     	; 0x4580 <LCD_voidWriteChar+0x19c>
    4562:	80 e9       	ldi	r24, 0x90	; 144
    4564:	91 e0       	ldi	r25, 0x01	; 1
    4566:	9c 83       	std	Y+4, r25	; 0x04
    4568:	8b 83       	std	Y+3, r24	; 0x03
    456a:	8b 81       	ldd	r24, Y+3	; 0x03
    456c:	9c 81       	ldd	r25, Y+4	; 0x04
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <LCD_voidWriteChar+0x18a>
    4572:	9c 83       	std	Y+4, r25	; 0x04
    4574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4576:	8d 81       	ldd	r24, Y+5	; 0x05
    4578:	9e 81       	ldd	r25, Y+6	; 0x06
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	9e 83       	std	Y+6, r25	; 0x06
    457e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4580:	8d 81       	ldd	r24, Y+5	; 0x05
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	69 f7       	brne	.-38     	; 0x4562 <LCD_voidWriteChar+0x17e>
    4588:	14 c0       	rjmp	.+40     	; 0x45b2 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458a:	6f 81       	ldd	r22, Y+7	; 0x07
    458c:	78 85       	ldd	r23, Y+8	; 0x08
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	9e 83       	std	Y+6, r25	; 0x06
    459c:	8d 83       	std	Y+5, r24	; 0x05
    459e:	8d 81       	ldd	r24, Y+5	; 0x05
    45a0:	9e 81       	ldd	r25, Y+6	; 0x06
    45a2:	9a 83       	std	Y+2, r25	; 0x02
    45a4:	89 83       	std	Y+1, r24	; 0x01
    45a6:	89 81       	ldd	r24, Y+1	; 0x01
    45a8:	9a 81       	ldd	r25, Y+2	; 0x02
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <LCD_voidWriteChar+0x1c6>
    45ae:	9a 83       	std	Y+2, r25	; 0x02
    45b0:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    45b2:	2f 96       	adiw	r28, 0x0f	; 15
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	cf 91       	pop	r28
    45c0:	df 91       	pop	r29
    45c2:	08 95       	ret

000045c4 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    45c4:	df 93       	push	r29
    45c6:	cf 93       	push	r28
    45c8:	00 d0       	rcall	.+0      	; 0x45ca <LCD_voidWriteString+0x6>
    45ca:	0f 92       	push	r0
    45cc:	cd b7       	in	r28, 0x3d	; 61
    45ce:	de b7       	in	r29, 0x3e	; 62
    45d0:	9b 83       	std	Y+3, r25	; 0x03
    45d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    45d4:	19 82       	std	Y+1, r1	; 0x01
    45d6:	0e c0       	rjmp	.+28     	; 0x45f4 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    45d8:	89 81       	ldd	r24, Y+1	; 0x01
    45da:	28 2f       	mov	r18, r24
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	8a 81       	ldd	r24, Y+2	; 0x02
    45e0:	9b 81       	ldd	r25, Y+3	; 0x03
    45e2:	fc 01       	movw	r30, r24
    45e4:	e2 0f       	add	r30, r18
    45e6:	f3 1f       	adc	r31, r19
    45e8:	80 81       	ld	r24, Z
    45ea:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
		index++;
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
    45f0:	8f 5f       	subi	r24, 0xFF	; 255
    45f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    45f4:	89 81       	ldd	r24, Y+1	; 0x01
    45f6:	28 2f       	mov	r18, r24
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	8a 81       	ldd	r24, Y+2	; 0x02
    45fc:	9b 81       	ldd	r25, Y+3	; 0x03
    45fe:	fc 01       	movw	r30, r24
    4600:	e2 0f       	add	r30, r18
    4602:	f3 1f       	adc	r31, r19
    4604:	80 81       	ld	r24, Z
    4606:	88 23       	and	r24, r24
    4608:	39 f7       	brne	.-50     	; 0x45d8 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    460a:	0f 90       	pop	r0
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	cf 91       	pop	r28
    4612:	df 91       	pop	r29
    4614:	08 95       	ret

00004616 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	df 93       	push	r29
    461c:	cf 93       	push	r28
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
    4622:	2e 97       	sbiw	r28, 0x0e	; 14
    4624:	0f b6       	in	r0, 0x3f	; 63
    4626:	f8 94       	cli
    4628:	de bf       	out	0x3e, r29	; 62
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	cd bf       	out	0x3d, r28	; 61
    462e:	69 87       	std	Y+9, r22	; 0x09
    4630:	7a 87       	std	Y+10, r23	; 0x0a
    4632:	8b 87       	std	Y+11, r24	; 0x0b
    4634:	9c 87       	std	Y+12, r25	; 0x0c
    4636:	5e 87       	std	Y+14, r21	; 0x0e
    4638:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    463a:	1d 82       	std	Y+5, r1	; 0x05
    463c:	1e 82       	std	Y+6, r1	; 0x06
    463e:	1f 82       	std	Y+7, r1	; 0x07
    4640:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    4642:	83 e1       	ldi	r24, 0x13	; 19
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	a0 e0       	ldi	r26, 0x00	; 0
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	89 83       	std	Y+1, r24	; 0x01
    464c:	9a 83       	std	Y+2, r25	; 0x02
    464e:	ab 83       	std	Y+3, r26	; 0x03
    4650:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    4652:	29 81       	ldd	r18, Y+1	; 0x01
    4654:	3a 81       	ldd	r19, Y+2	; 0x02
    4656:	8d 85       	ldd	r24, Y+13	; 0x0d
    4658:	9e 85       	ldd	r25, Y+14	; 0x0e
    465a:	fc 01       	movw	r30, r24
    465c:	e2 0f       	add	r30, r18
    465e:	f3 1f       	adc	r31, r19
    4660:	10 82       	st	Z, r1
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
    4666:	ab 81       	ldd	r26, Y+3	; 0x03
    4668:	bc 81       	ldd	r27, Y+4	; 0x04
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	a1 09       	sbc	r26, r1
    466e:	b1 09       	sbc	r27, r1
    4670:	89 83       	std	Y+1, r24	; 0x01
    4672:	9a 83       	std	Y+2, r25	; 0x02
    4674:	ab 83       	std	Y+3, r26	; 0x03
    4676:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    4678:	89 85       	ldd	r24, Y+9	; 0x09
    467a:	9a 85       	ldd	r25, Y+10	; 0x0a
    467c:	ab 85       	ldd	r26, Y+11	; 0x0b
    467e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4680:	bb 23       	and	r27, r27
    4682:	0c f0       	brlt	.+2      	; 0x4686 <IntToString+0x70>
    4684:	4d c0       	rjmp	.+154    	; 0x4720 <IntToString+0x10a>
		flag = 1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	a0 e0       	ldi	r26, 0x00	; 0
    468c:	b0 e0       	ldi	r27, 0x00	; 0
    468e:	8d 83       	std	Y+5, r24	; 0x05
    4690:	9e 83       	std	Y+6, r25	; 0x06
    4692:	af 83       	std	Y+7, r26	; 0x07
    4694:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    4696:	89 85       	ldd	r24, Y+9	; 0x09
    4698:	9a 85       	ldd	r25, Y+10	; 0x0a
    469a:	ab 85       	ldd	r26, Y+11	; 0x0b
    469c:	bc 85       	ldd	r27, Y+12	; 0x0c
    469e:	b0 95       	com	r27
    46a0:	a0 95       	com	r26
    46a2:	90 95       	com	r25
    46a4:	81 95       	neg	r24
    46a6:	9f 4f       	sbci	r25, 0xFF	; 255
    46a8:	af 4f       	sbci	r26, 0xFF	; 255
    46aa:	bf 4f       	sbci	r27, 0xFF	; 255
    46ac:	89 87       	std	Y+9, r24	; 0x09
    46ae:	9a 87       	std	Y+10, r25	; 0x0a
    46b0:	ab 87       	std	Y+11, r26	; 0x0b
    46b2:	bc 87       	std	Y+12, r27	; 0x0c
    46b4:	35 c0       	rjmp	.+106    	; 0x4720 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    46b6:	29 81       	ldd	r18, Y+1	; 0x01
    46b8:	3a 81       	ldd	r19, Y+2	; 0x02
    46ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    46bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46be:	8c 01       	movw	r16, r24
    46c0:	02 0f       	add	r16, r18
    46c2:	13 1f       	adc	r17, r19
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	ab 85       	ldd	r26, Y+11	; 0x0b
    46ca:	bc 85       	ldd	r27, Y+12	; 0x0c
    46cc:	2a e0       	ldi	r18, 0x0A	; 10
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	bc 01       	movw	r22, r24
    46d6:	cd 01       	movw	r24, r26
    46d8:	0e 94 1c 30 	call	0x6038	; 0x6038 <__divmodsi4>
    46dc:	dc 01       	movw	r26, r24
    46de:	cb 01       	movw	r24, r22
    46e0:	80 5d       	subi	r24, 0xD0	; 208
    46e2:	f8 01       	movw	r30, r16
    46e4:	80 83       	st	Z, r24
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ea:	ab 81       	ldd	r26, Y+3	; 0x03
    46ec:	bc 81       	ldd	r27, Y+4	; 0x04
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	a1 09       	sbc	r26, r1
    46f2:	b1 09       	sbc	r27, r1
    46f4:	89 83       	std	Y+1, r24	; 0x01
    46f6:	9a 83       	std	Y+2, r25	; 0x02
    46f8:	ab 83       	std	Y+3, r26	; 0x03
    46fa:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    46fc:	89 85       	ldd	r24, Y+9	; 0x09
    46fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4700:	ab 85       	ldd	r26, Y+11	; 0x0b
    4702:	bc 85       	ldd	r27, Y+12	; 0x0c
    4704:	2a e0       	ldi	r18, 0x0A	; 10
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	40 e0       	ldi	r20, 0x00	; 0
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	bc 01       	movw	r22, r24
    470e:	cd 01       	movw	r24, r26
    4710:	0e 94 1c 30 	call	0x6038	; 0x6038 <__divmodsi4>
    4714:	da 01       	movw	r26, r20
    4716:	c9 01       	movw	r24, r18
    4718:	89 87       	std	Y+9, r24	; 0x09
    471a:	9a 87       	std	Y+10, r25	; 0x0a
    471c:	ab 87       	std	Y+11, r26	; 0x0b
    471e:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    4720:	89 85       	ldd	r24, Y+9	; 0x09
    4722:	9a 85       	ldd	r25, Y+10	; 0x0a
    4724:	ab 85       	ldd	r26, Y+11	; 0x0b
    4726:	bc 85       	ldd	r27, Y+12	; 0x0c
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	a1 05       	cpc	r26, r1
    472c:	b1 05       	cpc	r27, r1
    472e:	19 f6       	brne	.-122    	; 0x46b6 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    4730:	8d 81       	ldd	r24, Y+5	; 0x05
    4732:	9e 81       	ldd	r25, Y+6	; 0x06
    4734:	af 81       	ldd	r26, Y+7	; 0x07
    4736:	b8 85       	ldd	r27, Y+8	; 0x08
    4738:	00 97       	sbiw	r24, 0x00	; 0
    473a:	a1 05       	cpc	r26, r1
    473c:	b1 05       	cpc	r27, r1
    473e:	a1 f0       	breq	.+40     	; 0x4768 <IntToString+0x152>
		str[i--] = '-';
    4740:	29 81       	ldd	r18, Y+1	; 0x01
    4742:	3a 81       	ldd	r19, Y+2	; 0x02
    4744:	8d 85       	ldd	r24, Y+13	; 0x0d
    4746:	9e 85       	ldd	r25, Y+14	; 0x0e
    4748:	fc 01       	movw	r30, r24
    474a:	e2 0f       	add	r30, r18
    474c:	f3 1f       	adc	r31, r19
    474e:	8d e2       	ldi	r24, 0x2D	; 45
    4750:	80 83       	st	Z, r24
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	9a 81       	ldd	r25, Y+2	; 0x02
    4756:	ab 81       	ldd	r26, Y+3	; 0x03
    4758:	bc 81       	ldd	r27, Y+4	; 0x04
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	a1 09       	sbc	r26, r1
    475e:	b1 09       	sbc	r27, r1
    4760:	89 83       	std	Y+1, r24	; 0x01
    4762:	9a 83       	std	Y+2, r25	; 0x02
    4764:	ab 83       	std	Y+3, r26	; 0x03
    4766:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    4768:	89 81       	ldd	r24, Y+1	; 0x01
    476a:	9a 81       	ldd	r25, Y+2	; 0x02
    476c:	ab 81       	ldd	r26, Y+3	; 0x03
    476e:	bc 81       	ldd	r27, Y+4	; 0x04
    4770:	01 96       	adiw	r24, 0x01	; 1
    4772:	a1 1d       	adc	r26, r1
    4774:	b1 1d       	adc	r27, r1
    4776:	89 83       	std	Y+1, r24	; 0x01
    4778:	9a 83       	std	Y+2, r25	; 0x02
    477a:	ab 83       	std	Y+3, r26	; 0x03
    477c:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    477e:	29 81       	ldd	r18, Y+1	; 0x01
    4780:	3a 81       	ldd	r19, Y+2	; 0x02
    4782:	8d 85       	ldd	r24, Y+13	; 0x0d
    4784:	9e 85       	ldd	r25, Y+14	; 0x0e
    4786:	82 0f       	add	r24, r18
    4788:	93 1f       	adc	r25, r19

}
    478a:	2e 96       	adiw	r28, 0x0e	; 14
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	1f 91       	pop	r17
    479c:	0f 91       	pop	r16
    479e:	08 95       	ret

000047a0 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    47a0:	df 93       	push	r29
    47a2:	cf 93       	push	r28
    47a4:	cd b7       	in	r28, 0x3d	; 61
    47a6:	de b7       	in	r29, 0x3e	; 62
    47a8:	6a 97       	sbiw	r28, 0x1a	; 26
    47aa:	0f b6       	in	r0, 0x3f	; 63
    47ac:	f8 94       	cli
    47ae:	de bf       	out	0x3e, r29	; 62
    47b0:	0f be       	out	0x3f, r0	; 63
    47b2:	cd bf       	out	0x3d, r28	; 61
    47b4:	6f 8b       	std	Y+23, r22	; 0x17
    47b6:	78 8f       	std	Y+24, r23	; 0x18
    47b8:	89 8f       	std	Y+25, r24	; 0x19
    47ba:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    47bc:	8f 89       	ldd	r24, Y+23	; 0x17
    47be:	98 8d       	ldd	r25, Y+24	; 0x18
    47c0:	a9 8d       	ldd	r26, Y+25	; 0x19
    47c2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    47c4:	00 97       	sbiw	r24, 0x00	; 0
    47c6:	a1 05       	cpc	r26, r1
    47c8:	b1 05       	cpc	r27, r1
    47ca:	99 f0       	breq	.+38     	; 0x47f2 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    47cc:	8f 89       	ldd	r24, Y+23	; 0x17
    47ce:	98 8d       	ldd	r25, Y+24	; 0x18
    47d0:	a9 8d       	ldd	r26, Y+25	; 0x19
    47d2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    47d4:	9e 01       	movw	r18, r28
    47d6:	2d 5f       	subi	r18, 0xFD	; 253
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	bc 01       	movw	r22, r24
    47dc:	cd 01       	movw	r24, r26
    47de:	a9 01       	movw	r20, r18
    47e0:	0e 94 0b 23 	call	0x4616	; 0x4616 <IntToString>
    47e4:	9a 83       	std	Y+2, r25	; 0x02
    47e6:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <LCD_voidWriteString>
    47f0:	03 c0       	rjmp	.+6      	; 0x47f8 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    47f2:	80 e3       	ldi	r24, 0x30	; 48
    47f4:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
	}
}
    47f8:	6a 96       	adiw	r28, 0x1a	; 26
    47fa:	0f b6       	in	r0, 0x3f	; 63
    47fc:	f8 94       	cli
    47fe:	de bf       	out	0x3e, r29	; 62
    4800:	0f be       	out	0x3f, r0	; 63
    4802:	cd bf       	out	0x3d, r28	; 61
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	a6 97       	sbiw	r28, 0x26	; 38
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	de bf       	out	0x3e, r29	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	cd bf       	out	0x3d, r28	; 61
    481e:	6b a3       	std	Y+35, r22	; 0x23
    4820:	7c a3       	std	Y+36, r23	; 0x24
    4822:	8d a3       	std	Y+37, r24	; 0x25
    4824:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    4826:	6b a1       	ldd	r22, Y+35	; 0x23
    4828:	7c a1       	ldd	r23, Y+36	; 0x24
    482a:	8d a1       	ldd	r24, Y+37	; 0x25
    482c:	9e a1       	ldd	r25, Y+38	; 0x26
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	48 ec       	ldi	r20, 0xC8	; 200
    4834:	52 e4       	ldi	r21, 0x42	; 66
    4836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    483a:	dc 01       	movw	r26, r24
    483c:	cb 01       	movw	r24, r22
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	8b 87       	std	Y+11, r24	; 0x0b
    484c:	9c 87       	std	Y+12, r25	; 0x0c
    484e:	ad 87       	std	Y+13, r26	; 0x0d
    4850:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    4852:	8b 85       	ldd	r24, Y+11	; 0x0b
    4854:	9c 85       	ldd	r25, Y+12	; 0x0c
    4856:	ad 85       	ldd	r26, Y+13	; 0x0d
    4858:	be 85       	ldd	r27, Y+14	; 0x0e
    485a:	9e 01       	movw	r18, r28
    485c:	21 5f       	subi	r18, 0xF1	; 241
    485e:	3f 4f       	sbci	r19, 0xFF	; 255
    4860:	bc 01       	movw	r22, r24
    4862:	cd 01       	movw	r24, r26
    4864:	a9 01       	movw	r20, r18
    4866:	0e 94 0b 23 	call	0x4616	; 0x4616 <IntToString>
    486a:	9a 87       	std	Y+10, r25	; 0x0a
    486c:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    486e:	1d 82       	std	Y+5, r1	; 0x05
    4870:	1e 82       	std	Y+6, r1	; 0x06
    4872:	1f 82       	std	Y+7, r1	; 0x07
    4874:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    4876:	19 82       	std	Y+1, r1	; 0x01
    4878:	1a 82       	std	Y+2, r1	; 0x02
    487a:	1b 82       	std	Y+3, r1	; 0x03
    487c:	1c 82       	std	Y+4, r1	; 0x04
    487e:	0b c0       	rjmp	.+22     	; 0x4896 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    4880:	8d 81       	ldd	r24, Y+5	; 0x05
    4882:	9e 81       	ldd	r25, Y+6	; 0x06
    4884:	af 81       	ldd	r26, Y+7	; 0x07
    4886:	b8 85       	ldd	r27, Y+8	; 0x08
    4888:	01 96       	adiw	r24, 0x01	; 1
    488a:	a1 1d       	adc	r26, r1
    488c:	b1 1d       	adc	r27, r1
    488e:	8d 83       	std	Y+5, r24	; 0x05
    4890:	9e 83       	std	Y+6, r25	; 0x06
    4892:	af 83       	std	Y+7, r26	; 0x07
    4894:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    4896:	2d 81       	ldd	r18, Y+5	; 0x05
    4898:	3e 81       	ldd	r19, Y+6	; 0x06
    489a:	89 85       	ldd	r24, Y+9	; 0x09
    489c:	9a 85       	ldd	r25, Y+10	; 0x0a
    489e:	fc 01       	movw	r30, r24
    48a0:	e2 0f       	add	r30, r18
    48a2:	f3 1f       	adc	r31, r19
    48a4:	80 81       	ld	r24, Z
    48a6:	88 23       	and	r24, r24
    48a8:	59 f7       	brne	.-42     	; 0x4880 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    48aa:	8d 81       	ldd	r24, Y+5	; 0x05
    48ac:	9e 81       	ldd	r25, Y+6	; 0x06
    48ae:	af 81       	ldd	r26, Y+7	; 0x07
    48b0:	b8 85       	ldd	r27, Y+8	; 0x08
    48b2:	02 97       	sbiw	r24, 0x02	; 2
    48b4:	a1 09       	sbc	r26, r1
    48b6:	b1 09       	sbc	r27, r1
    48b8:	8d 83       	std	Y+5, r24	; 0x05
    48ba:	9e 83       	std	Y+6, r25	; 0x06
    48bc:	af 83       	std	Y+7, r26	; 0x07
    48be:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    48c0:	8d 81       	ldd	r24, Y+5	; 0x05
    48c2:	9e 81       	ldd	r25, Y+6	; 0x06
    48c4:	af 81       	ldd	r26, Y+7	; 0x07
    48c6:	b8 85       	ldd	r27, Y+8	; 0x08
    48c8:	00 97       	sbiw	r24, 0x00	; 0
    48ca:	a1 05       	cpc	r26, r1
    48cc:	b1 05       	cpc	r27, r1
    48ce:	49 f5       	brne	.+82     	; 0x4922 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    48d0:	80 e3       	ldi	r24, 0x30	; 48
    48d2:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
    48d6:	25 c0       	rjmp	.+74     	; 0x4922 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    48d8:	29 81       	ldd	r18, Y+1	; 0x01
    48da:	3a 81       	ldd	r19, Y+2	; 0x02
    48dc:	4b 81       	ldd	r20, Y+3	; 0x03
    48de:	5c 81       	ldd	r21, Y+4	; 0x04
    48e0:	8d 81       	ldd	r24, Y+5	; 0x05
    48e2:	9e 81       	ldd	r25, Y+6	; 0x06
    48e4:	af 81       	ldd	r26, Y+7	; 0x07
    48e6:	b8 85       	ldd	r27, Y+8	; 0x08
    48e8:	28 17       	cp	r18, r24
    48ea:	39 07       	cpc	r19, r25
    48ec:	4a 07       	cpc	r20, r26
    48ee:	5b 07       	cpc	r21, r27
    48f0:	19 f4       	brne	.+6      	; 0x48f8 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    48f2:	8e e2       	ldi	r24, 0x2E	; 46
    48f4:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    48f8:	29 81       	ldd	r18, Y+1	; 0x01
    48fa:	3a 81       	ldd	r19, Y+2	; 0x02
    48fc:	89 85       	ldd	r24, Y+9	; 0x09
    48fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4900:	fc 01       	movw	r30, r24
    4902:	e2 0f       	add	r30, r18
    4904:	f3 1f       	adc	r31, r19
    4906:	80 81       	ld	r24, Z
    4908:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
		counter2++;
    490c:	89 81       	ldd	r24, Y+1	; 0x01
    490e:	9a 81       	ldd	r25, Y+2	; 0x02
    4910:	ab 81       	ldd	r26, Y+3	; 0x03
    4912:	bc 81       	ldd	r27, Y+4	; 0x04
    4914:	01 96       	adiw	r24, 0x01	; 1
    4916:	a1 1d       	adc	r26, r1
    4918:	b1 1d       	adc	r27, r1
    491a:	89 83       	std	Y+1, r24	; 0x01
    491c:	9a 83       	std	Y+2, r25	; 0x02
    491e:	ab 83       	std	Y+3, r26	; 0x03
    4920:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    4922:	29 81       	ldd	r18, Y+1	; 0x01
    4924:	3a 81       	ldd	r19, Y+2	; 0x02
    4926:	89 85       	ldd	r24, Y+9	; 0x09
    4928:	9a 85       	ldd	r25, Y+10	; 0x0a
    492a:	fc 01       	movw	r30, r24
    492c:	e2 0f       	add	r30, r18
    492e:	f3 1f       	adc	r31, r19
    4930:	80 81       	ld	r24, Z
    4932:	88 23       	and	r24, r24
    4934:	89 f6       	brne	.-94     	; 0x48d8 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    4936:	a6 96       	adiw	r28, 0x26	; 38
    4938:	0f b6       	in	r0, 0x3f	; 63
    493a:	f8 94       	cli
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	0f be       	out	0x3f, r0	; 63
    4940:	cd bf       	out	0x3d, r28	; 61
    4942:	cf 91       	pop	r28
    4944:	df 91       	pop	r29
    4946:	08 95       	ret

00004948 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    4948:	df 93       	push	r29
    494a:	cf 93       	push	r28
    494c:	00 d0       	rcall	.+0      	; 0x494e <LCD_voidGoToPosition+0x6>
    494e:	0f 92       	push	r0
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    4954:	8a 83       	std	Y+2, r24	; 0x02
    4956:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    4958:	80 e8       	ldi	r24, 0x80	; 128
    495a:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    495c:	8a 81       	ldd	r24, Y+2	; 0x02
    495e:	88 23       	and	r24, r24
    4960:	21 f4       	brne	.+8      	; 0x496a <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    4962:	8b 81       	ldd	r24, Y+3	; 0x03
    4964:	80 58       	subi	r24, 0x80	; 128
    4966:	89 83       	std	Y+1, r24	; 0x01
    4968:	14 c0       	rjmp	.+40     	; 0x4992 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	21 f4       	brne	.+8      	; 0x4978 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4970:	8b 81       	ldd	r24, Y+3	; 0x03
    4972:	80 54       	subi	r24, 0x40	; 64
    4974:	89 83       	std	Y+1, r24	; 0x01
    4976:	0d c0       	rjmp	.+26     	; 0x4992 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    4978:	8a 81       	ldd	r24, Y+2	; 0x02
    497a:	82 30       	cpi	r24, 0x02	; 2
    497c:	21 f4       	brne	.+8      	; 0x4986 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    497e:	8b 81       	ldd	r24, Y+3	; 0x03
    4980:	8c 56       	subi	r24, 0x6C	; 108
    4982:	89 83       	std	Y+1, r24	; 0x01
    4984:	06 c0       	rjmp	.+12     	; 0x4992 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    4986:	8a 81       	ldd	r24, Y+2	; 0x02
    4988:	83 30       	cpi	r24, 0x03	; 3
    498a:	19 f4       	brne	.+6      	; 0x4992 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	8c 52       	subi	r24, 0x2C	; 44
    4990:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	80 68       	ori	r24, 0x80	; 128
    4996:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
}
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	0f 90       	pop	r0
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	08 95       	ret

000049aa <LCD_voidClearPosition>:

void LCD_voidClearPosition(u8 X_Position, u8 Y_Position){
    49aa:	df 93       	push	r29
    49ac:	cf 93       	push	r28
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <LCD_voidClearPosition+0x6>
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	89 83       	std	Y+1, r24	; 0x01
    49b6:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position, Y_Position);
    49b8:	89 81       	ldd	r24, Y+1	; 0x01
    49ba:	6a 81       	ldd	r22, Y+2	; 0x02
    49bc:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    49c0:	80 e2       	ldi	r24, 0x20	; 32
    49c2:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
}
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	cf 91       	pop	r28
    49cc:	df 91       	pop	r29
    49ce:	08 95       	ret

000049d0 <LCD_voidClearLine>:

void LCD_voidClearLine(u8 X_Position){
    49d0:	df 93       	push	r29
    49d2:	cf 93       	push	r28
    49d4:	00 d0       	rcall	.+0      	; 0x49d6 <LCD_voidClearLine+0x6>
    49d6:	cd b7       	in	r28, 0x3d	; 61
    49d8:	de b7       	in	r29, 0x3e	; 62
    49da:	8a 83       	std	Y+2, r24	; 0x02
	u8 Y_Position = 0;
    49dc:	19 82       	std	Y+1, r1	; 0x01
    49de:	07 c0       	rjmp	.+14     	; 0x49ee <LCD_voidClearLine+0x1e>
	while(Y_Position <20){
		LCD_voidClearPosition(X_Position,Y_Position);
    49e0:	8a 81       	ldd	r24, Y+2	; 0x02
    49e2:	69 81       	ldd	r22, Y+1	; 0x01
    49e4:	0e 94 d5 24 	call	0x49aa	; 0x49aa <LCD_voidClearPosition>
		Y_Position++;
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	8f 5f       	subi	r24, 0xFF	; 255
    49ec:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteChar(' ');
}

void LCD_voidClearLine(u8 X_Position){
	u8 Y_Position = 0;
	while(Y_Position <20){
    49ee:	89 81       	ldd	r24, Y+1	; 0x01
    49f0:	84 31       	cpi	r24, 0x14	; 20
    49f2:	b0 f3       	brcs	.-20     	; 0x49e0 <LCD_voidClearLine+0x10>
		LCD_voidClearPosition(X_Position,Y_Position);
		Y_Position++;
	}
}
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	cf 91       	pop	r28
    49fa:	df 91       	pop	r29
    49fc:	08 95       	ret

000049fe <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    49fe:	df 93       	push	r29
    4a00:	cf 93       	push	r28
    4a02:	cd b7       	in	r28, 0x3d	; 61
    4a04:	de b7       	in	r29, 0x3e	; 62
    4a06:	27 97       	sbiw	r28, 0x07	; 7
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	f8 94       	cli
    4a0c:	de bf       	out	0x3e, r29	; 62
    4a0e:	0f be       	out	0x3f, r0	; 63
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	9c 83       	std	Y+4, r25	; 0x04
    4a14:	8b 83       	std	Y+3, r24	; 0x03
    4a16:	6d 83       	std	Y+5, r22	; 0x05
    4a18:	4e 83       	std	Y+6, r20	; 0x06
    4a1a:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    4a1c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a20:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    4a24:	8d 81       	ldd	r24, Y+5	; 0x05
    4a26:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
	u8 address = 0;
    4a2a:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    4a2c:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    4a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a30:	88 30       	cpi	r24, 0x08	; 8
    4a32:	30 f5       	brcc	.+76     	; 0x4a80 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    4a34:	8d 81       	ldd	r24, Y+5	; 0x05
    4a36:	88 2f       	mov	r24, r24
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	88 0f       	add	r24, r24
    4a3c:	99 1f       	adc	r25, r25
    4a3e:	88 0f       	add	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	88 0f       	add	r24, r24
    4a44:	99 1f       	adc	r25, r25
    4a46:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    4a48:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4a:	80 64       	ori	r24, 0x40	; 64
    4a4c:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    4a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a50:	8f 77       	andi	r24, 0x7F	; 127
    4a52:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    4a54:	8a 81       	ldd	r24, Y+2	; 0x02
    4a56:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    4a5a:	19 82       	std	Y+1, r1	; 0x01
    4a5c:	0e c0       	rjmp	.+28     	; 0x4a7a <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    4a5e:	89 81       	ldd	r24, Y+1	; 0x01
    4a60:	28 2f       	mov	r18, r24
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	9c 81       	ldd	r25, Y+4	; 0x04
    4a68:	fc 01       	movw	r30, r24
    4a6a:	e2 0f       	add	r30, r18
    4a6c:	f3 1f       	adc	r31, r19
    4a6e:	80 81       	ld	r24, Z
    4a70:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    4a74:	89 81       	ldd	r24, Y+1	; 0x01
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	89 83       	std	Y+1, r24	; 0x01
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	88 30       	cpi	r24, 0x08	; 8
    4a7e:	78 f3       	brcs	.-34     	; 0x4a5e <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
}
    4a86:	27 96       	adiw	r28, 0x07	; 7
    4a88:	0f b6       	in	r0, 0x3f	; 63
    4a8a:	f8 94       	cli
    4a8c:	de bf       	out	0x3e, r29	; 62
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	cd bf       	out	0x3d, r28	; 61
    4a92:	cf 91       	pop	r28
    4a94:	df 91       	pop	r29
    4a96:	08 95       	ret

00004a98 <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    4a98:	df 93       	push	r29
    4a9a:	cf 93       	push	r28
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	a1 97       	sbiw	r28, 0x21	; 33
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    4aac:	8f ef       	ldi	r24, 0xFF	; 255
    4aae:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    4ab0:	ce 01       	movw	r24, r28
    4ab2:	04 96       	adiw	r24, 0x04	; 4
    4ab4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ab6:	8d 8f       	std	Y+29, r24	; 0x1d
    4ab8:	e1 e0       	ldi	r30, 0x01	; 1
    4aba:	f2 e0       	ldi	r31, 0x02	; 2
    4abc:	f8 a3       	std	Y+32, r31	; 0x20
    4abe:	ef 8f       	std	Y+31, r30	; 0x1f
    4ac0:	f0 e1       	ldi	r31, 0x10	; 16
    4ac2:	f9 a3       	std	Y+33, r31	; 0x21
    4ac4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4ac6:	f8 a1       	ldd	r31, Y+32	; 0x20
    4ac8:	00 80       	ld	r0, Z
    4aca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4acc:	98 a1       	ldd	r25, Y+32	; 0x20
    4ace:	01 96       	adiw	r24, 0x01	; 1
    4ad0:	98 a3       	std	Y+32, r25	; 0x20
    4ad2:	8f 8f       	std	Y+31, r24	; 0x1f
    4ad4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4ad6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    4ad8:	00 82       	st	Z, r0
    4ada:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4adc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ade:	01 96       	adiw	r24, 0x01	; 1
    4ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    4ae2:	8d 8f       	std	Y+29, r24	; 0x1d
    4ae4:	99 a1       	ldd	r25, Y+33	; 0x21
    4ae6:	91 50       	subi	r25, 0x01	; 1
    4ae8:	99 a3       	std	Y+33, r25	; 0x21
    4aea:	e9 a1       	ldd	r30, Y+33	; 0x21
    4aec:	ee 23       	and	r30, r30
    4aee:	51 f7       	brne	.-44     	; 0x4ac4 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    4af0:	87 e0       	ldi	r24, 0x07	; 7
    4af2:	8c 8b       	std	Y+20, r24	; 0x14
    4af4:	86 e0       	ldi	r24, 0x06	; 6
    4af6:	8d 8b       	std	Y+21, r24	; 0x15
    4af8:	85 e0       	ldi	r24, 0x05	; 5
    4afa:	8e 8b       	std	Y+22, r24	; 0x16
    4afc:	83 e0       	ldi	r24, 0x03	; 3
    4afe:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    4b00:	85 e0       	ldi	r24, 0x05	; 5
    4b02:	88 8f       	std	Y+24, r24	; 0x18
    4b04:	84 e0       	ldi	r24, 0x04	; 4
    4b06:	89 8f       	std	Y+25, r24	; 0x19
    4b08:	83 e0       	ldi	r24, 0x03	; 3
    4b0a:	8a 8f       	std	Y+26, r24	; 0x1a
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4b10:	1a 82       	std	Y+2, r1	; 0x02
    4b12:	6b c0       	rjmp	.+214    	; 0x4bea <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    4b14:	8a 81       	ldd	r24, Y+2	; 0x02
    4b16:	28 2f       	mov	r18, r24
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	ce 01       	movw	r24, r28
    4b1c:	44 96       	adiw	r24, 0x14	; 20
    4b1e:	fc 01       	movw	r30, r24
    4b20:	e2 0f       	add	r30, r18
    4b22:	f3 1f       	adc	r31, r19
    4b24:	90 81       	ld	r25, Z
    4b26:	84 e0       	ldi	r24, 0x04	; 4
    4b28:	69 2f       	mov	r22, r25
    4b2a:	40 e0       	ldi	r20, 0x00	; 0
    4b2c:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4b30:	19 82       	std	Y+1, r1	; 0x01
    4b32:	46 c0       	rjmp	.+140    	; 0x4bc0 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	28 2f       	mov	r18, r24
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	ce 01       	movw	r24, r28
    4b3c:	48 96       	adiw	r24, 0x18	; 24
    4b3e:	fc 01       	movw	r30, r24
    4b40:	e2 0f       	add	r30, r18
    4b42:	f3 1f       	adc	r31, r19
    4b44:	90 81       	ld	r25, Z
    4b46:	83 e0       	ldi	r24, 0x03	; 3
    4b48:	69 2f       	mov	r22, r25
    4b4a:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8GetPinValue>
    4b4e:	88 23       	and	r24, r24
    4b50:	a1 f5       	brne	.+104    	; 0x4bba <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    4b52:	89 81       	ldd	r24, Y+1	; 0x01
    4b54:	28 2f       	mov	r18, r24
    4b56:	30 e0       	ldi	r19, 0x00	; 0
    4b58:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5a:	48 2f       	mov	r20, r24
    4b5c:	50 e0       	ldi	r21, 0x00	; 0
    4b5e:	22 0f       	add	r18, r18
    4b60:	33 1f       	adc	r19, r19
    4b62:	22 0f       	add	r18, r18
    4b64:	33 1f       	adc	r19, r19
    4b66:	ce 01       	movw	r24, r28
    4b68:	01 96       	adiw	r24, 0x01	; 1
    4b6a:	82 0f       	add	r24, r18
    4b6c:	93 1f       	adc	r25, r19
    4b6e:	84 0f       	add	r24, r20
    4b70:	95 1f       	adc	r25, r21
    4b72:	fc 01       	movw	r30, r24
    4b74:	33 96       	adiw	r30, 0x03	; 3
    4b76:	80 81       	ld	r24, Z
    4b78:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4b7a:	89 81       	ldd	r24, Y+1	; 0x01
    4b7c:	28 2f       	mov	r18, r24
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	ce 01       	movw	r24, r28
    4b82:	48 96       	adiw	r24, 0x18	; 24
    4b84:	fc 01       	movw	r30, r24
    4b86:	e2 0f       	add	r30, r18
    4b88:	f3 1f       	adc	r31, r19
    4b8a:	90 81       	ld	r25, Z
    4b8c:	83 e0       	ldi	r24, 0x03	; 3
    4b8e:	69 2f       	mov	r22, r25
    4b90:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8GetPinValue>
    4b94:	88 23       	and	r24, r24
    4b96:	89 f3       	breq	.-30     	; 0x4b7a <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    4b98:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9a:	28 2f       	mov	r18, r24
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	44 96       	adiw	r24, 0x14	; 20
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	e2 0f       	add	r30, r18
    4ba6:	f3 1f       	adc	r31, r19
    4ba8:	90 81       	ld	r25, Z
    4baa:	84 e0       	ldi	r24, 0x04	; 4
    4bac:	69 2f       	mov	r22, r25
    4bae:	41 e0       	ldi	r20, 0x01	; 1
    4bb0:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    4bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    4bb6:	fc 8f       	std	Y+28, r31	; 0x1c
    4bb8:	1e c0       	rjmp	.+60     	; 0x4bf6 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4bba:	89 81       	ldd	r24, Y+1	; 0x01
    4bbc:	8f 5f       	subi	r24, 0xFF	; 255
    4bbe:	89 83       	std	Y+1, r24	; 0x01
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	84 30       	cpi	r24, 0x04	; 4
    4bc4:	08 f4       	brcc	.+2      	; 0x4bc8 <KPD_u8GetPressedKey+0x130>
    4bc6:	b6 cf       	rjmp	.-148    	; 0x4b34 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    4bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bca:	28 2f       	mov	r18, r24
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	ce 01       	movw	r24, r28
    4bd0:	44 96       	adiw	r24, 0x14	; 20
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	e2 0f       	add	r30, r18
    4bd6:	f3 1f       	adc	r31, r19
    4bd8:	90 81       	ld	r25, Z
    4bda:	84 e0       	ldi	r24, 0x04	; 4
    4bdc:	69 2f       	mov	r22, r25
    4bde:	41 e0       	ldi	r20, 0x01	; 1
    4be0:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4be4:	8a 81       	ldd	r24, Y+2	; 0x02
    4be6:	8f 5f       	subi	r24, 0xFF	; 255
    4be8:	8a 83       	std	Y+2, r24	; 0x02
    4bea:	8a 81       	ldd	r24, Y+2	; 0x02
    4bec:	84 30       	cpi	r24, 0x04	; 4
    4bee:	08 f4       	brcc	.+2      	; 0x4bf2 <KPD_u8GetPressedKey+0x15a>
    4bf0:	91 cf       	rjmp	.-222    	; 0x4b14 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	8c 8f       	std	Y+28, r24	; 0x1c
    4bf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    4bf8:	a1 96       	adiw	r28, 0x21	; 33
    4bfa:	0f b6       	in	r0, 0x3f	; 63
    4bfc:	f8 94       	cli
    4bfe:	de bf       	out	0x3e, r29	; 62
    4c00:	0f be       	out	0x3f, r0	; 63
    4c02:	cd bf       	out	0x3d, r28	; 61
    4c04:	cf 91       	pop	r28
    4c06:	df 91       	pop	r29
    4c08:	08 95       	ret

00004c0a <main>:
		}
};

u8 posArr[4][20] ={{0}};

int main(){
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	df 93       	push	r29
    4c10:	cf 93       	push	r28
    4c12:	cd b7       	in	r28, 0x3d	; 61
    4c14:	de b7       	in	r29, 0x3e	; 62
    4c16:	c4 55       	subi	r28, 0x54	; 84
    4c18:	d0 40       	sbci	r29, 0x00	; 0
    4c1a:	0f b6       	in	r0, 0x3f	; 63
    4c1c:	f8 94       	cli
    4c1e:	de bf       	out	0x3e, r29	; 62
    4c20:	0f be       	out	0x3f, r0	; 63
    4c22:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    4c24:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
    4c28:	83 e0       	ldi	r24, 0x03	; 3
    4c2a:	6f ef       	ldi	r22, 0xFF	; 255
    4c2c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_voidSetPortValue>
	I2C_Master_voidInit();
    4c30:	0e 94 17 07 	call	0xe2e	; 0xe2e <I2C_Master_voidInit>
    4c34:	fe 01       	movw	r30, r28
    4c36:	ef 5a       	subi	r30, 0xAF	; 175
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	a8 e4       	ldi	r26, 0x48	; 72
    4c40:	b3 e4       	ldi	r27, 0x43	; 67
    4c42:	80 83       	st	Z, r24
    4c44:	91 83       	std	Z+1, r25	; 0x01
    4c46:	a2 83       	std	Z+2, r26	; 0x02
    4c48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c4a:	8e 01       	movw	r16, r28
    4c4c:	03 5b       	subi	r16, 0xB3	; 179
    4c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c50:	fe 01       	movw	r30, r28
    4c52:	ef 5a       	subi	r30, 0xAF	; 175
    4c54:	ff 4f       	sbci	r31, 0xFF	; 255
    4c56:	60 81       	ld	r22, Z
    4c58:	71 81       	ldd	r23, Z+1	; 0x01
    4c5a:	82 81       	ldd	r24, Z+2	; 0x02
    4c5c:	93 81       	ldd	r25, Z+3	; 0x03
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	4a e7       	ldi	r20, 0x7A	; 122
    4c64:	55 e4       	ldi	r21, 0x45	; 69
    4c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	f8 01       	movw	r30, r16
    4c70:	80 83       	st	Z, r24
    4c72:	91 83       	std	Z+1, r25	; 0x01
    4c74:	a2 83       	std	Z+2, r26	; 0x02
    4c76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c78:	fe 01       	movw	r30, r28
    4c7a:	e3 5b       	subi	r30, 0xB3	; 179
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	60 81       	ld	r22, Z
    4c80:	71 81       	ldd	r23, Z+1	; 0x01
    4c82:	82 81       	ldd	r24, Z+2	; 0x02
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	40 e8       	ldi	r20, 0x80	; 128
    4c8c:	5f e3       	ldi	r21, 0x3F	; 63
    4c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c92:	88 23       	and	r24, r24
    4c94:	44 f4       	brge	.+16     	; 0x4ca6 <main+0x9c>
		__ticks = 1;
    4c96:	fe 01       	movw	r30, r28
    4c98:	e5 5b       	subi	r30, 0xB5	; 181
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	91 83       	std	Z+1, r25	; 0x01
    4ca2:	80 83       	st	Z, r24
    4ca4:	64 c0       	rjmp	.+200    	; 0x4d6e <main+0x164>
	else if (__tmp > 65535)
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	e3 5b       	subi	r30, 0xB3	; 179
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	60 81       	ld	r22, Z
    4cae:	71 81       	ldd	r23, Z+1	; 0x01
    4cb0:	82 81       	ldd	r24, Z+2	; 0x02
    4cb2:	93 81       	ldd	r25, Z+3	; 0x03
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	3f ef       	ldi	r19, 0xFF	; 255
    4cb8:	4f e7       	ldi	r20, 0x7F	; 127
    4cba:	57 e4       	ldi	r21, 0x47	; 71
    4cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cc0:	18 16       	cp	r1, r24
    4cc2:	0c f0       	brlt	.+2      	; 0x4cc6 <main+0xbc>
    4cc4:	43 c0       	rjmp	.+134    	; 0x4d4c <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc6:	fe 01       	movw	r30, r28
    4cc8:	ef 5a       	subi	r30, 0xAF	; 175
    4cca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ccc:	60 81       	ld	r22, Z
    4cce:	71 81       	ldd	r23, Z+1	; 0x01
    4cd0:	82 81       	ldd	r24, Z+2	; 0x02
    4cd2:	93 81       	ldd	r25, Z+3	; 0x03
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	40 e2       	ldi	r20, 0x20	; 32
    4cda:	51 e4       	ldi	r21, 0x41	; 65
    4cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	8e 01       	movw	r16, r28
    4ce6:	05 5b       	subi	r16, 0xB5	; 181
    4ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cea:	bc 01       	movw	r22, r24
    4cec:	cd 01       	movw	r24, r26
    4cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	f8 01       	movw	r30, r16
    4cf8:	91 83       	std	Z+1, r25	; 0x01
    4cfa:	80 83       	st	Z, r24
    4cfc:	1f c0       	rjmp	.+62     	; 0x4d3c <main+0x132>
    4cfe:	fe 01       	movw	r30, r28
    4d00:	e7 5b       	subi	r30, 0xB7	; 183
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	80 e9       	ldi	r24, 0x90	; 144
    4d06:	91 e0       	ldi	r25, 0x01	; 1
    4d08:	91 83       	std	Z+1, r25	; 0x01
    4d0a:	80 83       	st	Z, r24
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	e7 5b       	subi	r30, 0xB7	; 183
    4d10:	ff 4f       	sbci	r31, 0xFF	; 255
    4d12:	80 81       	ld	r24, Z
    4d14:	91 81       	ldd	r25, Z+1	; 0x01
    4d16:	01 97       	sbiw	r24, 0x01	; 1
    4d18:	f1 f7       	brne	.-4      	; 0x4d16 <main+0x10c>
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	e7 5b       	subi	r30, 0xB7	; 183
    4d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d20:	91 83       	std	Z+1, r25	; 0x01
    4d22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d24:	de 01       	movw	r26, r28
    4d26:	a5 5b       	subi	r26, 0xB5	; 181
    4d28:	bf 4f       	sbci	r27, 0xFF	; 255
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	e5 5b       	subi	r30, 0xB5	; 181
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	80 81       	ld	r24, Z
    4d32:	91 81       	ldd	r25, Z+1	; 0x01
    4d34:	01 97       	sbiw	r24, 0x01	; 1
    4d36:	11 96       	adiw	r26, 0x01	; 1
    4d38:	9c 93       	st	X, r25
    4d3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	e5 5b       	subi	r30, 0xB5	; 181
    4d40:	ff 4f       	sbci	r31, 0xFF	; 255
    4d42:	80 81       	ld	r24, Z
    4d44:	91 81       	ldd	r25, Z+1	; 0x01
    4d46:	00 97       	sbiw	r24, 0x00	; 0
    4d48:	d1 f6       	brne	.-76     	; 0x4cfe <main+0xf4>
    4d4a:	27 c0       	rjmp	.+78     	; 0x4d9a <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d4c:	8e 01       	movw	r16, r28
    4d4e:	05 5b       	subi	r16, 0xB5	; 181
    4d50:	1f 4f       	sbci	r17, 0xFF	; 255
    4d52:	fe 01       	movw	r30, r28
    4d54:	e3 5b       	subi	r30, 0xB3	; 179
    4d56:	ff 4f       	sbci	r31, 0xFF	; 255
    4d58:	60 81       	ld	r22, Z
    4d5a:	71 81       	ldd	r23, Z+1	; 0x01
    4d5c:	82 81       	ldd	r24, Z+2	; 0x02
    4d5e:	93 81       	ldd	r25, Z+3	; 0x03
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	f8 01       	movw	r30, r16
    4d6a:	91 83       	std	Z+1, r25	; 0x01
    4d6c:	80 83       	st	Z, r24
    4d6e:	de 01       	movw	r26, r28
    4d70:	a9 5b       	subi	r26, 0xB9	; 185
    4d72:	bf 4f       	sbci	r27, 0xFF	; 255
    4d74:	fe 01       	movw	r30, r28
    4d76:	e5 5b       	subi	r30, 0xB5	; 181
    4d78:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7a:	80 81       	ld	r24, Z
    4d7c:	91 81       	ldd	r25, Z+1	; 0x01
    4d7e:	8d 93       	st	X+, r24
    4d80:	9c 93       	st	X, r25
    4d82:	fe 01       	movw	r30, r28
    4d84:	e9 5b       	subi	r30, 0xB9	; 185
    4d86:	ff 4f       	sbci	r31, 0xFF	; 255
    4d88:	80 81       	ld	r24, Z
    4d8a:	91 81       	ldd	r25, Z+1	; 0x01
    4d8c:	01 97       	sbiw	r24, 0x01	; 1
    4d8e:	f1 f7       	brne	.-4      	; 0x4d8c <main+0x182>
    4d90:	fe 01       	movw	r30, r28
    4d92:	e9 5b       	subi	r30, 0xB9	; 185
    4d94:	ff 4f       	sbci	r31, 0xFF	; 255
    4d96:	91 83       	std	Z+1, r25	; 0x01
    4d98:	80 83       	st	Z, r24
	_delay_ms(200);
	RTC_Read_Clock();
    4d9a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <RTC_Read_Clock>
	second = ConvertFromRTC(second);
    4d9e:	80 91 18 02 	lds	r24, 0x0218
    4da2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <ConvertFromRTC>
    4da6:	80 93 18 02 	sts	0x0218, r24
	minute = ConvertFromRTC(minute);
    4daa:	80 91 19 02 	lds	r24, 0x0219
    4dae:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <ConvertFromRTC>
    4db2:	80 93 19 02 	sts	0x0219, r24
	hour = ConvertFromRTC(hour);
    4db6:	80 91 1a 02 	lds	r24, 0x021A
    4dba:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <ConvertFromRTC>
    4dbe:	80 93 1a 02 	sts	0x021A, r24
	srand(second^minute^hour);
    4dc2:	90 91 18 02 	lds	r25, 0x0218
    4dc6:	80 91 19 02 	lds	r24, 0x0219
    4dca:	98 27       	eor	r25, r24
    4dcc:	80 91 1a 02 	lds	r24, 0x021A
    4dd0:	89 27       	eor	r24, r25
    4dd2:	88 2f       	mov	r24, r24
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	0e 94 06 31 	call	0x620c	; 0x620c <srand>
	LCD_voidInit();
    4dda:	0e 94 42 1a 	call	0x3484	; 0x3484 <LCD_voidInit>
	LoadSnakeInCGRAM();
    4dde:	0e 94 25 2a 	call	0x544a	; 0x544a <LoadSnakeInCGRAM>
	InitializeSnake();
    4de2:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <InitializeSnake>
	SpawnSnake();
    4de6:	0e 94 ad 2a 	call	0x555a	; 0x555a <SpawnSnake>
    4dea:	fe 01       	movw	r30, r28
    4dec:	ed 5b       	subi	r30, 0xBD	; 189
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	a8 ec       	ldi	r26, 0xC8	; 200
    4df6:	b2 e4       	ldi	r27, 0x42	; 66
    4df8:	80 83       	st	Z, r24
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	a2 83       	std	Z+2, r26	; 0x02
    4dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e00:	8e 01       	movw	r16, r28
    4e02:	01 5c       	subi	r16, 0xC1	; 193
    4e04:	1f 4f       	sbci	r17, 0xFF	; 255
    4e06:	fe 01       	movw	r30, r28
    4e08:	ed 5b       	subi	r30, 0xBD	; 189
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	60 81       	ld	r22, Z
    4e0e:	71 81       	ldd	r23, Z+1	; 0x01
    4e10:	82 81       	ldd	r24, Z+2	; 0x02
    4e12:	93 81       	ldd	r25, Z+3	; 0x03
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	4a e7       	ldi	r20, 0x7A	; 122
    4e1a:	55 e4       	ldi	r21, 0x45	; 69
    4e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e20:	dc 01       	movw	r26, r24
    4e22:	cb 01       	movw	r24, r22
    4e24:	f8 01       	movw	r30, r16
    4e26:	80 83       	st	Z, r24
    4e28:	91 83       	std	Z+1, r25	; 0x01
    4e2a:	a2 83       	std	Z+2, r26	; 0x02
    4e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e2e:	fe 01       	movw	r30, r28
    4e30:	ff 96       	adiw	r30, 0x3f	; 63
    4e32:	60 81       	ld	r22, Z
    4e34:	71 81       	ldd	r23, Z+1	; 0x01
    4e36:	82 81       	ldd	r24, Z+2	; 0x02
    4e38:	93 81       	ldd	r25, Z+3	; 0x03
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	40 e8       	ldi	r20, 0x80	; 128
    4e40:	5f e3       	ldi	r21, 0x3F	; 63
    4e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e46:	88 23       	and	r24, r24
    4e48:	2c f4       	brge	.+10     	; 0x4e54 <main+0x24a>
		__ticks = 1;
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	9e af       	std	Y+62, r25	; 0x3e
    4e50:	8d af       	std	Y+61, r24	; 0x3d
    4e52:	46 c0       	rjmp	.+140    	; 0x4ee0 <main+0x2d6>
	else if (__tmp > 65535)
    4e54:	fe 01       	movw	r30, r28
    4e56:	ff 96       	adiw	r30, 0x3f	; 63
    4e58:	60 81       	ld	r22, Z
    4e5a:	71 81       	ldd	r23, Z+1	; 0x01
    4e5c:	82 81       	ldd	r24, Z+2	; 0x02
    4e5e:	93 81       	ldd	r25, Z+3	; 0x03
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	3f ef       	ldi	r19, 0xFF	; 255
    4e64:	4f e7       	ldi	r20, 0x7F	; 127
    4e66:	57 e4       	ldi	r21, 0x47	; 71
    4e68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e6c:	18 16       	cp	r1, r24
    4e6e:	64 f5       	brge	.+88     	; 0x4ec8 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e70:	fe 01       	movw	r30, r28
    4e72:	ed 5b       	subi	r30, 0xBD	; 189
    4e74:	ff 4f       	sbci	r31, 0xFF	; 255
    4e76:	60 81       	ld	r22, Z
    4e78:	71 81       	ldd	r23, Z+1	; 0x01
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	93 81       	ldd	r25, Z+3	; 0x03
    4e7e:	20 e0       	ldi	r18, 0x00	; 0
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	40 e2       	ldi	r20, 0x20	; 32
    4e84:	51 e4       	ldi	r21, 0x41	; 65
    4e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8a:	dc 01       	movw	r26, r24
    4e8c:	cb 01       	movw	r24, r22
    4e8e:	bc 01       	movw	r22, r24
    4e90:	cd 01       	movw	r24, r26
    4e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	9e af       	std	Y+62, r25	; 0x3e
    4e9c:	8d af       	std	Y+61, r24	; 0x3d
    4e9e:	0f c0       	rjmp	.+30     	; 0x4ebe <main+0x2b4>
    4ea0:	80 e9       	ldi	r24, 0x90	; 144
    4ea2:	91 e0       	ldi	r25, 0x01	; 1
    4ea4:	9c af       	std	Y+60, r25	; 0x3c
    4ea6:	8b af       	std	Y+59, r24	; 0x3b
    4ea8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4eaa:	9c ad       	ldd	r25, Y+60	; 0x3c
    4eac:	01 97       	sbiw	r24, 0x01	; 1
    4eae:	f1 f7       	brne	.-4      	; 0x4eac <main+0x2a2>
    4eb0:	9c af       	std	Y+60, r25	; 0x3c
    4eb2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4eb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	9e af       	std	Y+62, r25	; 0x3e
    4ebc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ebe:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ec0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ec2:	00 97       	sbiw	r24, 0x00	; 0
    4ec4:	69 f7       	brne	.-38     	; 0x4ea0 <main+0x296>
    4ec6:	16 c0       	rjmp	.+44     	; 0x4ef4 <main+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec8:	fe 01       	movw	r30, r28
    4eca:	ff 96       	adiw	r30, 0x3f	; 63
    4ecc:	60 81       	ld	r22, Z
    4ece:	71 81       	ldd	r23, Z+1	; 0x01
    4ed0:	82 81       	ldd	r24, Z+2	; 0x02
    4ed2:	93 81       	ldd	r25, Z+3	; 0x03
    4ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed8:	dc 01       	movw	r26, r24
    4eda:	cb 01       	movw	r24, r22
    4edc:	9e af       	std	Y+62, r25	; 0x3e
    4ede:	8d af       	std	Y+61, r24	; 0x3d
    4ee0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ee2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ee4:	9a af       	std	Y+58, r25	; 0x3a
    4ee6:	89 af       	std	Y+57, r24	; 0x39
    4ee8:	89 ad       	ldd	r24, Y+57	; 0x39
    4eea:	9a ad       	ldd	r25, Y+58	; 0x3a
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <main+0x2e2>
    4ef0:	9a af       	std	Y+58, r25	; 0x3a
    4ef2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);

	while(1){
		LCD_voidGoToPosition(0,0);
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	60 e0       	ldi	r22, 0x00	; 0
    4ef8:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
		LCD_voidWriteIntData(currentSize);
    4efc:	80 91 8d 01 	lds	r24, 0x018D
    4f00:	88 2f       	mov	r24, r24
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	a0 e0       	ldi	r26, 0x00	; 0
    4f06:	b0 e0       	ldi	r27, 0x00	; 0
    4f08:	bc 01       	movw	r22, r24
    4f0a:	cd 01       	movw	r24, r26
    4f0c:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <LCD_voidWriteIntData>
		if(foodAvailable == 0){
    4f10:	80 91 17 02 	lds	r24, 0x0217
    4f14:	88 23       	and	r24, r24
    4f16:	51 f4       	brne	.+20     	; 0x4f2c <main+0x322>
			foodAvailable = 1;
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	80 93 17 02 	sts	0x0217, r24
			SpawnFood();
    4f1e:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <SpawnFood>
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    4f22:	83 e0       	ldi	r24, 0x03	; 3
    4f24:	66 e0       	ldi	r22, 0x06	; 6
    4f26:	41 e0       	ldi	r20, 0x01	; 1
    4f28:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
		}
		key = KPD_u8GetPressedKey();
    4f2c:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <KPD_u8GetPressedKey>
    4f30:	80 93 8e 01 	sts	0x018E, r24
		if(key != NO_PRESSED_KEY){
    4f34:	80 91 8e 01 	lds	r24, 0x018E
    4f38:	8f 3f       	cpi	r24, 0xFF	; 255
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <main+0x334>
    4f3c:	bc c0       	rjmp	.+376    	; 0x50b6 <main+0x4ac>
			if(endGame == 0){
    4f3e:	80 91 14 02 	lds	r24, 0x0214
    4f42:	88 23       	and	r24, r24
    4f44:	71 f5       	brne	.+92     	; 0x4fa2 <main+0x398>
				if(key == 8 && snakeArr[0].currentDirection != Down){
    4f46:	80 91 8e 01 	lds	r24, 0x018E
    4f4a:	88 30       	cpi	r24, 0x08	; 8
    4f4c:	41 f4       	brne	.+16     	; 0x4f5e <main+0x354>
    4f4e:	80 91 6b 02 	lds	r24, 0x026B
    4f52:	83 30       	cpi	r24, 0x03	; 3
    4f54:	21 f0       	breq	.+8      	; 0x4f5e <main+0x354>
					snakeArr[0].nextDirection = Up;
    4f56:	82 e0       	ldi	r24, 0x02	; 2
    4f58:	80 93 6c 02 	sts	0x026C, r24
    4f5c:	22 c0       	rjmp	.+68     	; 0x4fa2 <main+0x398>
				}
				else if(key == 4 && snakeArr[0].currentDirection != Right){
    4f5e:	80 91 8e 01 	lds	r24, 0x018E
    4f62:	84 30       	cpi	r24, 0x04	; 4
    4f64:	41 f4       	brne	.+16     	; 0x4f76 <main+0x36c>
    4f66:	80 91 6b 02 	lds	r24, 0x026B
    4f6a:	88 23       	and	r24, r24
    4f6c:	21 f0       	breq	.+8      	; 0x4f76 <main+0x36c>
					snakeArr[0].nextDirection = Left;
    4f6e:	81 e0       	ldi	r24, 0x01	; 1
    4f70:	80 93 6c 02 	sts	0x026C, r24
    4f74:	16 c0       	rjmp	.+44     	; 0x4fa2 <main+0x398>
				}
				else if(key == 6 && snakeArr[0].currentDirection != Left){
    4f76:	80 91 8e 01 	lds	r24, 0x018E
    4f7a:	86 30       	cpi	r24, 0x06	; 6
    4f7c:	39 f4       	brne	.+14     	; 0x4f8c <main+0x382>
    4f7e:	80 91 6b 02 	lds	r24, 0x026B
    4f82:	81 30       	cpi	r24, 0x01	; 1
    4f84:	19 f0       	breq	.+6      	; 0x4f8c <main+0x382>
					snakeArr[0].nextDirection = Right;
    4f86:	10 92 6c 02 	sts	0x026C, r1
    4f8a:	0b c0       	rjmp	.+22     	; 0x4fa2 <main+0x398>
				}
				else if(key == 2 && snakeArr[0].currentDirection != Up){
    4f8c:	80 91 8e 01 	lds	r24, 0x018E
    4f90:	82 30       	cpi	r24, 0x02	; 2
    4f92:	39 f4       	brne	.+14     	; 0x4fa2 <main+0x398>
    4f94:	80 91 6b 02 	lds	r24, 0x026B
    4f98:	82 30       	cpi	r24, 0x02	; 2
    4f9a:	19 f0       	breq	.+6      	; 0x4fa2 <main+0x398>
					snakeArr[0].nextDirection = Down;
    4f9c:	83 e0       	ldi	r24, 0x03	; 3
    4f9e:	80 93 6c 02 	sts	0x026C, r24
				}
			}
			if(key == 'C'){
    4fa2:	80 91 8e 01 	lds	r24, 0x018E
    4fa6:	83 34       	cpi	r24, 0x43	; 67
    4fa8:	09 f0       	breq	.+2      	; 0x4fac <main+0x3a2>
    4faa:	85 c0       	rjmp	.+266    	; 0x50b6 <main+0x4ac>
				LCD_voidSendCommand(LCD_ClearDisplay);
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
				endGame = 0;
    4fb2:	10 92 14 02 	sts	0x0214, r1
				currentSize = STARTING_SIZE;
    4fb6:	83 e0       	ldi	r24, 0x03	; 3
    4fb8:	80 93 8d 01 	sts	0x018D, r24
				ResetPositionArr();
    4fbc:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <ResetPositionArr>
				InitializeSnake();
    4fc0:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <InitializeSnake>
				SpawnSnake();
    4fc4:	0e 94 ad 2a 	call	0x555a	; 0x555a <SpawnSnake>
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	a6 e9       	ldi	r26, 0x96	; 150
    4fce:	b3 e4       	ldi	r27, 0x43	; 67
    4fd0:	8d ab       	std	Y+53, r24	; 0x35
    4fd2:	9e ab       	std	Y+54, r25	; 0x36
    4fd4:	af ab       	std	Y+55, r26	; 0x37
    4fd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fd8:	6d a9       	ldd	r22, Y+53	; 0x35
    4fda:	7e a9       	ldd	r23, Y+54	; 0x36
    4fdc:	8f a9       	ldd	r24, Y+55	; 0x37
    4fde:	98 ad       	ldd	r25, Y+56	; 0x38
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	4a e7       	ldi	r20, 0x7A	; 122
    4fe6:	55 e4       	ldi	r21, 0x45	; 69
    4fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	89 ab       	std	Y+49, r24	; 0x31
    4ff2:	9a ab       	std	Y+50, r25	; 0x32
    4ff4:	ab ab       	std	Y+51, r26	; 0x33
    4ff6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4ff8:	69 a9       	ldd	r22, Y+49	; 0x31
    4ffa:	7a a9       	ldd	r23, Y+50	; 0x32
    4ffc:	8b a9       	ldd	r24, Y+51	; 0x33
    4ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	40 e8       	ldi	r20, 0x80	; 128
    5006:	5f e3       	ldi	r21, 0x3F	; 63
    5008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    500c:	88 23       	and	r24, r24
    500e:	2c f4       	brge	.+10     	; 0x501a <main+0x410>
		__ticks = 1;
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	98 ab       	std	Y+48, r25	; 0x30
    5016:	8f a7       	std	Y+47, r24	; 0x2f
    5018:	3f c0       	rjmp	.+126    	; 0x5098 <main+0x48e>
	else if (__tmp > 65535)
    501a:	69 a9       	ldd	r22, Y+49	; 0x31
    501c:	7a a9       	ldd	r23, Y+50	; 0x32
    501e:	8b a9       	ldd	r24, Y+51	; 0x33
    5020:	9c a9       	ldd	r25, Y+52	; 0x34
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	3f ef       	ldi	r19, 0xFF	; 255
    5026:	4f e7       	ldi	r20, 0x7F	; 127
    5028:	57 e4       	ldi	r21, 0x47	; 71
    502a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    502e:	18 16       	cp	r1, r24
    5030:	4c f5       	brge	.+82     	; 0x5084 <main+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5032:	6d a9       	ldd	r22, Y+53	; 0x35
    5034:	7e a9       	ldd	r23, Y+54	; 0x36
    5036:	8f a9       	ldd	r24, Y+55	; 0x37
    5038:	98 ad       	ldd	r25, Y+56	; 0x38
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	40 e2       	ldi	r20, 0x20	; 32
    5040:	51 e4       	ldi	r21, 0x41	; 65
    5042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	bc 01       	movw	r22, r24
    504c:	cd 01       	movw	r24, r26
    504e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5052:	dc 01       	movw	r26, r24
    5054:	cb 01       	movw	r24, r22
    5056:	98 ab       	std	Y+48, r25	; 0x30
    5058:	8f a7       	std	Y+47, r24	; 0x2f
    505a:	0f c0       	rjmp	.+30     	; 0x507a <main+0x470>
    505c:	80 e9       	ldi	r24, 0x90	; 144
    505e:	91 e0       	ldi	r25, 0x01	; 1
    5060:	9e a7       	std	Y+46, r25	; 0x2e
    5062:	8d a7       	std	Y+45, r24	; 0x2d
    5064:	8d a5       	ldd	r24, Y+45	; 0x2d
    5066:	9e a5       	ldd	r25, Y+46	; 0x2e
    5068:	01 97       	sbiw	r24, 0x01	; 1
    506a:	f1 f7       	brne	.-4      	; 0x5068 <main+0x45e>
    506c:	9e a7       	std	Y+46, r25	; 0x2e
    506e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5070:	8f a5       	ldd	r24, Y+47	; 0x2f
    5072:	98 a9       	ldd	r25, Y+48	; 0x30
    5074:	01 97       	sbiw	r24, 0x01	; 1
    5076:	98 ab       	std	Y+48, r25	; 0x30
    5078:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507a:	8f a5       	ldd	r24, Y+47	; 0x2f
    507c:	98 a9       	ldd	r25, Y+48	; 0x30
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	69 f7       	brne	.-38     	; 0x505c <main+0x452>
    5082:	14 c0       	rjmp	.+40     	; 0x50ac <main+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5084:	69 a9       	ldd	r22, Y+49	; 0x31
    5086:	7a a9       	ldd	r23, Y+50	; 0x32
    5088:	8b a9       	ldd	r24, Y+51	; 0x33
    508a:	9c a9       	ldd	r25, Y+52	; 0x34
    508c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	98 ab       	std	Y+48, r25	; 0x30
    5096:	8f a7       	std	Y+47, r24	; 0x2f
    5098:	8f a5       	ldd	r24, Y+47	; 0x2f
    509a:	98 a9       	ldd	r25, Y+48	; 0x30
    509c:	9c a7       	std	Y+44, r25	; 0x2c
    509e:	8b a7       	std	Y+43, r24	; 0x2b
    50a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    50a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <main+0x49a>
    50a8:	9c a7       	std	Y+44, r25	; 0x2c
    50aa:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(300);
				DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    50ac:	83 e0       	ldi	r24, 0x03	; 3
    50ae:	66 e0       	ldi	r22, 0x06	; 6
    50b0:	40 e0       	ldi	r20, 0x00	; 0
    50b2:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
			}
		}
		//		LCD_voidSendCommand(LCD_ClearDisplay);
		if(endGame == 0){
    50b6:	80 91 14 02 	lds	r24, 0x0214
    50ba:	88 23       	and	r24, r24
    50bc:	99 f5       	brne	.+102    	; 0x5124 <main+0x51a>
			LCD_voidGoToPosition(foodX,foodY);
    50be:	80 91 15 02 	lds	r24, 0x0215
    50c2:	90 91 16 02 	lds	r25, 0x0216
    50c6:	69 2f       	mov	r22, r25
    50c8:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
			LCD_voidWriteChar('o');
    50cc:	8f e6       	ldi	r24, 0x6F	; 111
    50ce:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
			MoveSnake();
    50d2:	0e 94 25 2b 	call	0x564a	; 0x564a <MoveSnake>
			UpdateSize();
    50d6:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <UpdateSize>
			if(posArr[snakeArr[0].posX][snakeArr[0].posY] == 1){
    50da:	80 91 6d 02 	lds	r24, 0x026D
    50de:	28 2f       	mov	r18, r24
    50e0:	33 27       	eor	r19, r19
    50e2:	27 fd       	sbrc	r18, 7
    50e4:	30 95       	com	r19
    50e6:	80 91 6e 02 	lds	r24, 0x026E
    50ea:	48 2f       	mov	r20, r24
    50ec:	55 27       	eor	r21, r21
    50ee:	47 fd       	sbrc	r20, 7
    50f0:	50 95       	com	r21
    50f2:	c9 01       	movw	r24, r18
    50f4:	88 0f       	add	r24, r24
    50f6:	99 1f       	adc	r25, r25
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	9c 01       	movw	r18, r24
    50fe:	22 0f       	add	r18, r18
    5100:	33 1f       	adc	r19, r19
    5102:	22 0f       	add	r18, r18
    5104:	33 1f       	adc	r19, r19
    5106:	82 0f       	add	r24, r18
    5108:	93 1f       	adc	r25, r19
    510a:	84 0f       	add	r24, r20
    510c:	95 1f       	adc	r25, r21
    510e:	fc 01       	movw	r30, r24
    5110:	e5 5e       	subi	r30, 0xE5	; 229
    5112:	fd 4f       	sbci	r31, 0xFD	; 253
    5114:	80 81       	ld	r24, Z
    5116:	81 30       	cpi	r24, 0x01	; 1
    5118:	09 f0       	breq	.+2      	; 0x511c <main+0x512>
    511a:	1f c1       	rjmp	.+574    	; 0x535a <main+0x750>
				endGame = 1;
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	80 93 14 02 	sts	0x0214, r24
    5122:	e8 ce       	rjmp	.-560    	; 0x4ef4 <main+0x2ea>
				continue;
			}
		}
		else{
			LCD_voidSendCommand(LCD_ClearDisplay);
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
			endGame = 0;
    512a:	10 92 14 02 	sts	0x0214, r1
			LCD_voidGoToPosition(1,5);
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	65 e0       	ldi	r22, 0x05	; 5
    5132:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, High);
    5136:	83 e0       	ldi	r24, 0x03	; 3
    5138:	66 e0       	ldi	r22, 0x06	; 6
    513a:	41 e0       	ldi	r20, 0x01	; 1
    513c:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
			LCD_voidWriteString((u8*)"Game Over!");
    5140:	80 e6       	ldi	r24, 0x60	; 96
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <LCD_voidWriteString>
			LCD_voidGoToPosition(2,5);
    5148:	82 e0       	ldi	r24, 0x02	; 2
    514a:	65 e0       	ldi	r22, 0x05	; 5
    514c:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
			LCD_voidWriteString((u8*)"Score: ");
    5150:	8b e6       	ldi	r24, 0x6B	; 107
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <LCD_voidWriteString>
			LCD_voidWriteIntData(currentSize);
    5158:	80 91 8d 01 	lds	r24, 0x018D
    515c:	88 2f       	mov	r24, r24
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	a0 e0       	ldi	r26, 0x00	; 0
    5162:	b0 e0       	ldi	r27, 0x00	; 0
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <LCD_voidWriteIntData>
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	a6 e9       	ldi	r26, 0x96	; 150
    5172:	b3 e4       	ldi	r27, 0x43	; 67
    5174:	8f a3       	std	Y+39, r24	; 0x27
    5176:	98 a7       	std	Y+40, r25	; 0x28
    5178:	a9 a7       	std	Y+41, r26	; 0x29
    517a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    517c:	6f a1       	ldd	r22, Y+39	; 0x27
    517e:	78 a5       	ldd	r23, Y+40	; 0x28
    5180:	89 a5       	ldd	r24, Y+41	; 0x29
    5182:	9a a5       	ldd	r25, Y+42	; 0x2a
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	4a e7       	ldi	r20, 0x7A	; 122
    518a:	55 e4       	ldi	r21, 0x45	; 69
    518c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	8b a3       	std	Y+35, r24	; 0x23
    5196:	9c a3       	std	Y+36, r25	; 0x24
    5198:	ad a3       	std	Y+37, r26	; 0x25
    519a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    519c:	6b a1       	ldd	r22, Y+35	; 0x23
    519e:	7c a1       	ldd	r23, Y+36	; 0x24
    51a0:	8d a1       	ldd	r24, Y+37	; 0x25
    51a2:	9e a1       	ldd	r25, Y+38	; 0x26
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e8       	ldi	r20, 0x80	; 128
    51aa:	5f e3       	ldi	r21, 0x3F	; 63
    51ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51b0:	88 23       	and	r24, r24
    51b2:	2c f4       	brge	.+10     	; 0x51be <main+0x5b4>
		__ticks = 1;
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	9a a3       	std	Y+34, r25	; 0x22
    51ba:	89 a3       	std	Y+33, r24	; 0x21
    51bc:	3f c0       	rjmp	.+126    	; 0x523c <main+0x632>
	else if (__tmp > 65535)
    51be:	6b a1       	ldd	r22, Y+35	; 0x23
    51c0:	7c a1       	ldd	r23, Y+36	; 0x24
    51c2:	8d a1       	ldd	r24, Y+37	; 0x25
    51c4:	9e a1       	ldd	r25, Y+38	; 0x26
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	3f ef       	ldi	r19, 0xFF	; 255
    51ca:	4f e7       	ldi	r20, 0x7F	; 127
    51cc:	57 e4       	ldi	r21, 0x47	; 71
    51ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51d2:	18 16       	cp	r1, r24
    51d4:	4c f5       	brge	.+82     	; 0x5228 <main+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d6:	6f a1       	ldd	r22, Y+39	; 0x27
    51d8:	78 a5       	ldd	r23, Y+40	; 0x28
    51da:	89 a5       	ldd	r24, Y+41	; 0x29
    51dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	40 e2       	ldi	r20, 0x20	; 32
    51e4:	51 e4       	ldi	r21, 0x41	; 65
    51e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	bc 01       	movw	r22, r24
    51f0:	cd 01       	movw	r24, r26
    51f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f6:	dc 01       	movw	r26, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	9a a3       	std	Y+34, r25	; 0x22
    51fc:	89 a3       	std	Y+33, r24	; 0x21
    51fe:	0f c0       	rjmp	.+30     	; 0x521e <main+0x614>
    5200:	80 e9       	ldi	r24, 0x90	; 144
    5202:	91 e0       	ldi	r25, 0x01	; 1
    5204:	98 a3       	std	Y+32, r25	; 0x20
    5206:	8f 8f       	std	Y+31, r24	; 0x1f
    5208:	8f 8d       	ldd	r24, Y+31	; 0x1f
    520a:	98 a1       	ldd	r25, Y+32	; 0x20
    520c:	01 97       	sbiw	r24, 0x01	; 1
    520e:	f1 f7       	brne	.-4      	; 0x520c <main+0x602>
    5210:	98 a3       	std	Y+32, r25	; 0x20
    5212:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5214:	89 a1       	ldd	r24, Y+33	; 0x21
    5216:	9a a1       	ldd	r25, Y+34	; 0x22
    5218:	01 97       	sbiw	r24, 0x01	; 1
    521a:	9a a3       	std	Y+34, r25	; 0x22
    521c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    521e:	89 a1       	ldd	r24, Y+33	; 0x21
    5220:	9a a1       	ldd	r25, Y+34	; 0x22
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	69 f7       	brne	.-38     	; 0x5200 <main+0x5f6>
    5226:	14 c0       	rjmp	.+40     	; 0x5250 <main+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5228:	6b a1       	ldd	r22, Y+35	; 0x23
    522a:	7c a1       	ldd	r23, Y+36	; 0x24
    522c:	8d a1       	ldd	r24, Y+37	; 0x25
    522e:	9e a1       	ldd	r25, Y+38	; 0x26
    5230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5234:	dc 01       	movw	r26, r24
    5236:	cb 01       	movw	r24, r22
    5238:	9a a3       	std	Y+34, r25	; 0x22
    523a:	89 a3       	std	Y+33, r24	; 0x21
    523c:	89 a1       	ldd	r24, Y+33	; 0x21
    523e:	9a a1       	ldd	r25, Y+34	; 0x22
    5240:	9e 8f       	std	Y+30, r25	; 0x1e
    5242:	8d 8f       	std	Y+29, r24	; 0x1d
    5244:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5246:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	f1 f7       	brne	.-4      	; 0x5248 <main+0x63e>
    524c:	9e 8f       	std	Y+30, r25	; 0x1e
    524e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    5250:	83 e0       	ldi	r24, 0x03	; 3
    5252:	66 e0       	ldi	r22, 0x06	; 6
    5254:	40 e0       	ldi	r20, 0x00	; 0
    5256:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	90 ee       	ldi	r25, 0xE0	; 224
    525e:	a2 e9       	ldi	r26, 0x92	; 146
    5260:	b5 e4       	ldi	r27, 0x45	; 69
    5262:	89 8f       	std	Y+25, r24	; 0x19
    5264:	9a 8f       	std	Y+26, r25	; 0x1a
    5266:	ab 8f       	std	Y+27, r26	; 0x1b
    5268:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    526a:	69 8d       	ldd	r22, Y+25	; 0x19
    526c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    526e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5270:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	4a e7       	ldi	r20, 0x7A	; 122
    5278:	55 e4       	ldi	r21, 0x45	; 69
    527a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	8d 8b       	std	Y+21, r24	; 0x15
    5284:	9e 8b       	std	Y+22, r25	; 0x16
    5286:	af 8b       	std	Y+23, r26	; 0x17
    5288:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    528a:	6d 89       	ldd	r22, Y+21	; 0x15
    528c:	7e 89       	ldd	r23, Y+22	; 0x16
    528e:	8f 89       	ldd	r24, Y+23	; 0x17
    5290:	98 8d       	ldd	r25, Y+24	; 0x18
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	40 e8       	ldi	r20, 0x80	; 128
    5298:	5f e3       	ldi	r21, 0x3F	; 63
    529a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    529e:	88 23       	and	r24, r24
    52a0:	2c f4       	brge	.+10     	; 0x52ac <main+0x6a2>
		__ticks = 1;
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	9c 8b       	std	Y+20, r25	; 0x14
    52a8:	8b 8b       	std	Y+19, r24	; 0x13
    52aa:	3f c0       	rjmp	.+126    	; 0x532a <main+0x720>
	else if (__tmp > 65535)
    52ac:	6d 89       	ldd	r22, Y+21	; 0x15
    52ae:	7e 89       	ldd	r23, Y+22	; 0x16
    52b0:	8f 89       	ldd	r24, Y+23	; 0x17
    52b2:	98 8d       	ldd	r25, Y+24	; 0x18
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	3f ef       	ldi	r19, 0xFF	; 255
    52b8:	4f e7       	ldi	r20, 0x7F	; 127
    52ba:	57 e4       	ldi	r21, 0x47	; 71
    52bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52c0:	18 16       	cp	r1, r24
    52c2:	4c f5       	brge	.+82     	; 0x5316 <main+0x70c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c4:	69 8d       	ldd	r22, Y+25	; 0x19
    52c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	40 e2       	ldi	r20, 0x20	; 32
    52d2:	51 e4       	ldi	r21, 0x41	; 65
    52d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52d8:	dc 01       	movw	r26, r24
    52da:	cb 01       	movw	r24, r22
    52dc:	bc 01       	movw	r22, r24
    52de:	cd 01       	movw	r24, r26
    52e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e4:	dc 01       	movw	r26, r24
    52e6:	cb 01       	movw	r24, r22
    52e8:	9c 8b       	std	Y+20, r25	; 0x14
    52ea:	8b 8b       	std	Y+19, r24	; 0x13
    52ec:	0f c0       	rjmp	.+30     	; 0x530c <main+0x702>
    52ee:	80 e9       	ldi	r24, 0x90	; 144
    52f0:	91 e0       	ldi	r25, 0x01	; 1
    52f2:	9a 8b       	std	Y+18, r25	; 0x12
    52f4:	89 8b       	std	Y+17, r24	; 0x11
    52f6:	89 89       	ldd	r24, Y+17	; 0x11
    52f8:	9a 89       	ldd	r25, Y+18	; 0x12
    52fa:	01 97       	sbiw	r24, 0x01	; 1
    52fc:	f1 f7       	brne	.-4      	; 0x52fa <main+0x6f0>
    52fe:	9a 8b       	std	Y+18, r25	; 0x12
    5300:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5302:	8b 89       	ldd	r24, Y+19	; 0x13
    5304:	9c 89       	ldd	r25, Y+20	; 0x14
    5306:	01 97       	sbiw	r24, 0x01	; 1
    5308:	9c 8b       	std	Y+20, r25	; 0x14
    530a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    530c:	8b 89       	ldd	r24, Y+19	; 0x13
    530e:	9c 89       	ldd	r25, Y+20	; 0x14
    5310:	00 97       	sbiw	r24, 0x00	; 0
    5312:	69 f7       	brne	.-38     	; 0x52ee <main+0x6e4>
    5314:	14 c0       	rjmp	.+40     	; 0x533e <main+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5316:	6d 89       	ldd	r22, Y+21	; 0x15
    5318:	7e 89       	ldd	r23, Y+22	; 0x16
    531a:	8f 89       	ldd	r24, Y+23	; 0x17
    531c:	98 8d       	ldd	r25, Y+24	; 0x18
    531e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5322:	dc 01       	movw	r26, r24
    5324:	cb 01       	movw	r24, r22
    5326:	9c 8b       	std	Y+20, r25	; 0x14
    5328:	8b 8b       	std	Y+19, r24	; 0x13
    532a:	8b 89       	ldd	r24, Y+19	; 0x13
    532c:	9c 89       	ldd	r25, Y+20	; 0x14
    532e:	98 8b       	std	Y+16, r25	; 0x10
    5330:	8f 87       	std	Y+15, r24	; 0x0f
    5332:	8f 85       	ldd	r24, Y+15	; 0x0f
    5334:	98 89       	ldd	r25, Y+16	; 0x10
    5336:	01 97       	sbiw	r24, 0x01	; 1
    5338:	f1 f7       	brne	.-4      	; 0x5336 <main+0x72c>
    533a:	98 8b       	std	Y+16, r25	; 0x10
    533c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(4700);
			LCD_voidSendCommand(LCD_ClearDisplay);
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
			currentSize = STARTING_SIZE;
    5344:	83 e0       	ldi	r24, 0x03	; 3
    5346:	80 93 8d 01 	sts	0x018D, r24
			ResetPositionArr();
    534a:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <ResetPositionArr>
			InitializeSnake();
    534e:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <InitializeSnake>
			SpawnSnake();
    5352:	0e 94 ad 2a 	call	0x555a	; 0x555a <SpawnSnake>
			foodAvailable = 0;
    5356:	10 92 17 02 	sts	0x0217, r1
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	a6 e9       	ldi	r26, 0x96	; 150
    5360:	b3 e4       	ldi	r27, 0x43	; 67
    5362:	8b 87       	std	Y+11, r24	; 0x0b
    5364:	9c 87       	std	Y+12, r25	; 0x0c
    5366:	ad 87       	std	Y+13, r26	; 0x0d
    5368:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    536a:	6b 85       	ldd	r22, Y+11	; 0x0b
    536c:	7c 85       	ldd	r23, Y+12	; 0x0c
    536e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5370:	9e 85       	ldd	r25, Y+14	; 0x0e
    5372:	20 e0       	ldi	r18, 0x00	; 0
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	4a e7       	ldi	r20, 0x7A	; 122
    5378:	55 e4       	ldi	r21, 0x45	; 69
    537a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	8f 83       	std	Y+7, r24	; 0x07
    5384:	98 87       	std	Y+8, r25	; 0x08
    5386:	a9 87       	std	Y+9, r26	; 0x09
    5388:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    538a:	6f 81       	ldd	r22, Y+7	; 0x07
    538c:	78 85       	ldd	r23, Y+8	; 0x08
    538e:	89 85       	ldd	r24, Y+9	; 0x09
    5390:	9a 85       	ldd	r25, Y+10	; 0x0a
    5392:	20 e0       	ldi	r18, 0x00	; 0
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	40 e8       	ldi	r20, 0x80	; 128
    5398:	5f e3       	ldi	r21, 0x3F	; 63
    539a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    539e:	88 23       	and	r24, r24
    53a0:	2c f4       	brge	.+10     	; 0x53ac <main+0x7a2>
		__ticks = 1;
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	9e 83       	std	Y+6, r25	; 0x06
    53a8:	8d 83       	std	Y+5, r24	; 0x05
    53aa:	3f c0       	rjmp	.+126    	; 0x542a <main+0x820>
	else if (__tmp > 65535)
    53ac:	6f 81       	ldd	r22, Y+7	; 0x07
    53ae:	78 85       	ldd	r23, Y+8	; 0x08
    53b0:	89 85       	ldd	r24, Y+9	; 0x09
    53b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	3f ef       	ldi	r19, 0xFF	; 255
    53b8:	4f e7       	ldi	r20, 0x7F	; 127
    53ba:	57 e4       	ldi	r21, 0x47	; 71
    53bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53c0:	18 16       	cp	r1, r24
    53c2:	4c f5       	brge	.+82     	; 0x5416 <main+0x80c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    53c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    53c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    53cc:	20 e0       	ldi	r18, 0x00	; 0
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	40 e2       	ldi	r20, 0x20	; 32
    53d2:	51 e4       	ldi	r21, 0x41	; 65
    53d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d8:	dc 01       	movw	r26, r24
    53da:	cb 01       	movw	r24, r22
    53dc:	bc 01       	movw	r22, r24
    53de:	cd 01       	movw	r24, r26
    53e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53e4:	dc 01       	movw	r26, r24
    53e6:	cb 01       	movw	r24, r22
    53e8:	9e 83       	std	Y+6, r25	; 0x06
    53ea:	8d 83       	std	Y+5, r24	; 0x05
    53ec:	0f c0       	rjmp	.+30     	; 0x540c <main+0x802>
    53ee:	80 e9       	ldi	r24, 0x90	; 144
    53f0:	91 e0       	ldi	r25, 0x01	; 1
    53f2:	9c 83       	std	Y+4, r25	; 0x04
    53f4:	8b 83       	std	Y+3, r24	; 0x03
    53f6:	8b 81       	ldd	r24, Y+3	; 0x03
    53f8:	9c 81       	ldd	r25, Y+4	; 0x04
    53fa:	01 97       	sbiw	r24, 0x01	; 1
    53fc:	f1 f7       	brne	.-4      	; 0x53fa <main+0x7f0>
    53fe:	9c 83       	std	Y+4, r25	; 0x04
    5400:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5402:	8d 81       	ldd	r24, Y+5	; 0x05
    5404:	9e 81       	ldd	r25, Y+6	; 0x06
    5406:	01 97       	sbiw	r24, 0x01	; 1
    5408:	9e 83       	std	Y+6, r25	; 0x06
    540a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    540c:	8d 81       	ldd	r24, Y+5	; 0x05
    540e:	9e 81       	ldd	r25, Y+6	; 0x06
    5410:	00 97       	sbiw	r24, 0x00	; 0
    5412:	69 f7       	brne	.-38     	; 0x53ee <main+0x7e4>
    5414:	14 c0       	rjmp	.+40     	; 0x543e <main+0x834>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5416:	6f 81       	ldd	r22, Y+7	; 0x07
    5418:	78 85       	ldd	r23, Y+8	; 0x08
    541a:	89 85       	ldd	r24, Y+9	; 0x09
    541c:	9a 85       	ldd	r25, Y+10	; 0x0a
    541e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5422:	dc 01       	movw	r26, r24
    5424:	cb 01       	movw	r24, r22
    5426:	9e 83       	std	Y+6, r25	; 0x06
    5428:	8d 83       	std	Y+5, r24	; 0x05
    542a:	8d 81       	ldd	r24, Y+5	; 0x05
    542c:	9e 81       	ldd	r25, Y+6	; 0x06
    542e:	9a 83       	std	Y+2, r25	; 0x02
    5430:	89 83       	std	Y+1, r24	; 0x01
    5432:	89 81       	ldd	r24, Y+1	; 0x01
    5434:	9a 81       	ldd	r25, Y+2	; 0x02
    5436:	01 97       	sbiw	r24, 0x01	; 1
    5438:	f1 f7       	brne	.-4      	; 0x5436 <main+0x82c>
    543a:	9a 83       	std	Y+2, r25	; 0x02
    543c:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(300);
		DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
    543e:	83 e0       	ldi	r24, 0x03	; 3
    5440:	66 e0       	ldi	r22, 0x06	; 6
    5442:	40 e0       	ldi	r20, 0x00	; 0
    5444:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinValue>
    5448:	55 cd       	rjmp	.-1366   	; 0x4ef4 <main+0x2ea>

0000544a <LoadSnakeInCGRAM>:
	}
	return 0;
}

void LoadSnakeInCGRAM(){
    544a:	df 93       	push	r29
    544c:	cf 93       	push	r28
    544e:	0f 92       	push	r0
    5450:	cd b7       	in	r28, 0x3d	; 61
    5452:	de b7       	in	r29, 0x3e	; 62
	u8 cgRamIndex = 0;
    5454:	19 82       	std	Y+1, r1	; 0x01
	for(cgRamIndex = 0; cgRamIndex < 4; cgRamIndex++){
    5456:	19 82       	std	Y+1, r1	; 0x01
    5458:	2b c0       	rjmp	.+86     	; 0x54b0 <LoadSnakeInCGRAM+0x66>
		LCD_voidDisplaySpecialChar(Head[cgRamIndex], cgRamIndex, 0, 0);
    545a:	2f e8       	ldi	r18, 0x8F	; 143
    545c:	31 e0       	ldi	r19, 0x01	; 1
    545e:	89 81       	ldd	r24, Y+1	; 0x01
    5460:	88 2f       	mov	r24, r24
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	88 0f       	add	r24, r24
    5466:	99 1f       	adc	r25, r25
    5468:	88 0f       	add	r24, r24
    546a:	99 1f       	adc	r25, r25
    546c:	88 0f       	add	r24, r24
    546e:	99 1f       	adc	r25, r25
    5470:	82 0f       	add	r24, r18
    5472:	93 1f       	adc	r25, r19
    5474:	69 81       	ldd	r22, Y+1	; 0x01
    5476:	40 e0       	ldi	r20, 0x00	; 0
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	0e 94 ff 24 	call	0x49fe	; 0x49fe <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(Body[cgRamIndex], cgRamIndex + 4, 0, 0);
    547e:	2f ea       	ldi	r18, 0xAF	; 175
    5480:	31 e0       	ldi	r19, 0x01	; 1
    5482:	89 81       	ldd	r24, Y+1	; 0x01
    5484:	88 2f       	mov	r24, r24
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	88 0f       	add	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	88 0f       	add	r24, r24
    548e:	99 1f       	adc	r25, r25
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	28 0f       	add	r18, r24
    5496:	39 1f       	adc	r19, r25
    5498:	89 81       	ldd	r24, Y+1	; 0x01
    549a:	48 2f       	mov	r20, r24
    549c:	4c 5f       	subi	r20, 0xFC	; 252
    549e:	c9 01       	movw	r24, r18
    54a0:	64 2f       	mov	r22, r20
    54a2:	40 e0       	ldi	r20, 0x00	; 0
    54a4:	20 e0       	ldi	r18, 0x00	; 0
    54a6:	0e 94 ff 24 	call	0x49fe	; 0x49fe <LCD_voidDisplaySpecialChar>
	return 0;
}

void LoadSnakeInCGRAM(){
	u8 cgRamIndex = 0;
	for(cgRamIndex = 0; cgRamIndex < 4; cgRamIndex++){
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	8f 5f       	subi	r24, 0xFF	; 255
    54ae:	89 83       	std	Y+1, r24	; 0x01
    54b0:	89 81       	ldd	r24, Y+1	; 0x01
    54b2:	84 30       	cpi	r24, 0x04	; 4
    54b4:	90 f2       	brcs	.-92     	; 0x545a <LoadSnakeInCGRAM+0x10>
		LCD_voidDisplaySpecialChar(Head[cgRamIndex], cgRamIndex, 0, 0);
		LCD_voidDisplaySpecialChar(Body[cgRamIndex], cgRamIndex + 4, 0, 0);
	}
	LCD_voidSendCommand(LCD_ClearDisplay);
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	0e 94 42 20 	call	0x4084	; 0x4084 <LCD_voidSendCommand>
}
    54bc:	0f 90       	pop	r0
    54be:	cf 91       	pop	r28
    54c0:	df 91       	pop	r29
    54c2:	08 95       	ret

000054c4 <InitializeSnake>:
void InitializeSnake(){
    54c4:	df 93       	push	r29
    54c6:	cf 93       	push	r28
    54c8:	0f 92       	push	r0
    54ca:	cd b7       	in	r28, 0x3d	; 61
    54cc:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    54ce:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0; index < currentSize; index++){
    54d0:	19 82       	std	Y+1, r1	; 0x01
    54d2:	33 c0       	rjmp	.+102    	; 0x553a <InitializeSnake+0x76>
		snakeArr[index].currentDirection = Right;
    54d4:	89 81       	ldd	r24, Y+1	; 0x01
    54d6:	28 2f       	mov	r18, r24
    54d8:	33 27       	eor	r19, r19
    54da:	27 fd       	sbrc	r18, 7
    54dc:	30 95       	com	r19
    54de:	c9 01       	movw	r24, r18
    54e0:	88 0f       	add	r24, r24
    54e2:	99 1f       	adc	r25, r25
    54e4:	88 0f       	add	r24, r24
    54e6:	99 1f       	adc	r25, r25
    54e8:	82 0f       	add	r24, r18
    54ea:	93 1f       	adc	r25, r19
    54ec:	fc 01       	movw	r30, r24
    54ee:	e5 59       	subi	r30, 0x95	; 149
    54f0:	fd 4f       	sbci	r31, 0xFD	; 253
    54f2:	10 82       	st	Z, r1
		snakeArr[index].nextDirection = Right;
    54f4:	89 81       	ldd	r24, Y+1	; 0x01
    54f6:	28 2f       	mov	r18, r24
    54f8:	33 27       	eor	r19, r19
    54fa:	27 fd       	sbrc	r18, 7
    54fc:	30 95       	com	r19
    54fe:	c9 01       	movw	r24, r18
    5500:	88 0f       	add	r24, r24
    5502:	99 1f       	adc	r25, r25
    5504:	88 0f       	add	r24, r24
    5506:	99 1f       	adc	r25, r25
    5508:	82 0f       	add	r24, r18
    550a:	93 1f       	adc	r25, r19
    550c:	fc 01       	movw	r30, r24
    550e:	e4 59       	subi	r30, 0x94	; 148
    5510:	fd 4f       	sbci	r31, 0xFD	; 253
    5512:	10 82       	st	Z, r1
		snakeArr[index].shape = Right;
    5514:	89 81       	ldd	r24, Y+1	; 0x01
    5516:	28 2f       	mov	r18, r24
    5518:	33 27       	eor	r19, r19
    551a:	27 fd       	sbrc	r18, 7
    551c:	30 95       	com	r19
    551e:	c9 01       	movw	r24, r18
    5520:	88 0f       	add	r24, r24
    5522:	99 1f       	adc	r25, r25
    5524:	88 0f       	add	r24, r24
    5526:	99 1f       	adc	r25, r25
    5528:	82 0f       	add	r24, r18
    552a:	93 1f       	adc	r25, r19
    552c:	fc 01       	movw	r30, r24
    552e:	e1 59       	subi	r30, 0x91	; 145
    5530:	fd 4f       	sbci	r31, 0xFD	; 253
    5532:	10 82       	st	Z, r1
	}
	LCD_voidSendCommand(LCD_ClearDisplay);
}
void InitializeSnake(){
	s8 index = 0;
	for(index = 0; index < currentSize; index++){
    5534:	89 81       	ldd	r24, Y+1	; 0x01
    5536:	8f 5f       	subi	r24, 0xFF	; 255
    5538:	89 83       	std	Y+1, r24	; 0x01
    553a:	89 81       	ldd	r24, Y+1	; 0x01
    553c:	28 2f       	mov	r18, r24
    553e:	33 27       	eor	r19, r19
    5540:	27 fd       	sbrc	r18, 7
    5542:	30 95       	com	r19
    5544:	80 91 8d 01 	lds	r24, 0x018D
    5548:	88 2f       	mov	r24, r24
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	28 17       	cp	r18, r24
    554e:	39 07       	cpc	r19, r25
    5550:	0c f2       	brlt	.-126    	; 0x54d4 <InitializeSnake+0x10>
		snakeArr[index].currentDirection = Right;
		snakeArr[index].nextDirection = Right;
		snakeArr[index].shape = Right;
	}
}
    5552:	0f 90       	pop	r0
    5554:	cf 91       	pop	r28
    5556:	df 91       	pop	r29
    5558:	08 95       	ret

0000555a <SpawnSnake>:

void SpawnSnake(){
    555a:	df 93       	push	r29
    555c:	cf 93       	push	r28
    555e:	0f 92       	push	r0
    5560:	cd b7       	in	r28, 0x3d	; 61
    5562:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    5564:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0; index < currentSize; index++){
    5566:	19 82       	std	Y+1, r1	; 0x01
    5568:	5f c0       	rjmp	.+190    	; 0x5628 <SpawnSnake+0xce>

		snakeArr[index].posX = 0;
    556a:	89 81       	ldd	r24, Y+1	; 0x01
    556c:	28 2f       	mov	r18, r24
    556e:	33 27       	eor	r19, r19
    5570:	27 fd       	sbrc	r18, 7
    5572:	30 95       	com	r19
    5574:	c9 01       	movw	r24, r18
    5576:	88 0f       	add	r24, r24
    5578:	99 1f       	adc	r25, r25
    557a:	88 0f       	add	r24, r24
    557c:	99 1f       	adc	r25, r25
    557e:	82 0f       	add	r24, r18
    5580:	93 1f       	adc	r25, r19
    5582:	fc 01       	movw	r30, r24
    5584:	e3 59       	subi	r30, 0x93	; 147
    5586:	fd 4f       	sbci	r31, 0xFD	; 253
    5588:	10 82       	st	Z, r1
		snakeArr[index].posY = 10 - index;
    558a:	89 81       	ldd	r24, Y+1	; 0x01
    558c:	28 2f       	mov	r18, r24
    558e:	33 27       	eor	r19, r19
    5590:	27 fd       	sbrc	r18, 7
    5592:	30 95       	com	r19
    5594:	99 81       	ldd	r25, Y+1	; 0x01
    5596:	8a e0       	ldi	r24, 0x0A	; 10
    5598:	89 1b       	sub	r24, r25
    559a:	48 2f       	mov	r20, r24
    559c:	c9 01       	movw	r24, r18
    559e:	88 0f       	add	r24, r24
    55a0:	99 1f       	adc	r25, r25
    55a2:	88 0f       	add	r24, r24
    55a4:	99 1f       	adc	r25, r25
    55a6:	82 0f       	add	r24, r18
    55a8:	93 1f       	adc	r25, r19
    55aa:	fc 01       	movw	r30, r24
    55ac:	e2 59       	subi	r30, 0x92	; 146
    55ae:	fd 4f       	sbci	r31, 0xFD	; 253
    55b0:	40 83       	st	Z, r20
		LCD_voidGoToPosition(snakeArr[index].posX, snakeArr[index].posY);
    55b2:	89 81       	ldd	r24, Y+1	; 0x01
    55b4:	28 2f       	mov	r18, r24
    55b6:	33 27       	eor	r19, r19
    55b8:	27 fd       	sbrc	r18, 7
    55ba:	30 95       	com	r19
    55bc:	c9 01       	movw	r24, r18
    55be:	88 0f       	add	r24, r24
    55c0:	99 1f       	adc	r25, r25
    55c2:	88 0f       	add	r24, r24
    55c4:	99 1f       	adc	r25, r25
    55c6:	82 0f       	add	r24, r18
    55c8:	93 1f       	adc	r25, r19
    55ca:	fc 01       	movw	r30, r24
    55cc:	e3 59       	subi	r30, 0x93	; 147
    55ce:	fd 4f       	sbci	r31, 0xFD	; 253
    55d0:	80 81       	ld	r24, Z
    55d2:	48 2f       	mov	r20, r24
    55d4:	89 81       	ldd	r24, Y+1	; 0x01
    55d6:	28 2f       	mov	r18, r24
    55d8:	33 27       	eor	r19, r19
    55da:	27 fd       	sbrc	r18, 7
    55dc:	30 95       	com	r19
    55de:	c9 01       	movw	r24, r18
    55e0:	88 0f       	add	r24, r24
    55e2:	99 1f       	adc	r25, r25
    55e4:	88 0f       	add	r24, r24
    55e6:	99 1f       	adc	r25, r25
    55e8:	82 0f       	add	r24, r18
    55ea:	93 1f       	adc	r25, r19
    55ec:	fc 01       	movw	r30, r24
    55ee:	e2 59       	subi	r30, 0x92	; 146
    55f0:	fd 4f       	sbci	r31, 0xFD	; 253
    55f2:	80 81       	ld	r24, Z
    55f4:	98 2f       	mov	r25, r24
    55f6:	84 2f       	mov	r24, r20
    55f8:	69 2f       	mov	r22, r25
    55fa:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
		LCD_voidWriteChar(snakeArr[index].shape);
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
    5600:	28 2f       	mov	r18, r24
    5602:	33 27       	eor	r19, r19
    5604:	27 fd       	sbrc	r18, 7
    5606:	30 95       	com	r19
    5608:	c9 01       	movw	r24, r18
    560a:	88 0f       	add	r24, r24
    560c:	99 1f       	adc	r25, r25
    560e:	88 0f       	add	r24, r24
    5610:	99 1f       	adc	r25, r25
    5612:	82 0f       	add	r24, r18
    5614:	93 1f       	adc	r25, r19
    5616:	fc 01       	movw	r30, r24
    5618:	e1 59       	subi	r30, 0x91	; 145
    561a:	fd 4f       	sbci	r31, 0xFD	; 253
    561c:	80 81       	ld	r24, Z
    561e:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
	}
}

void SpawnSnake(){
	s8 index = 0;
	for(index = 0; index < currentSize; index++){
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	8f 5f       	subi	r24, 0xFF	; 255
    5626:	89 83       	std	Y+1, r24	; 0x01
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	28 2f       	mov	r18, r24
    562c:	33 27       	eor	r19, r19
    562e:	27 fd       	sbrc	r18, 7
    5630:	30 95       	com	r19
    5632:	80 91 8d 01 	lds	r24, 0x018D
    5636:	88 2f       	mov	r24, r24
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	28 17       	cp	r18, r24
    563c:	39 07       	cpc	r19, r25
    563e:	0c f4       	brge	.+2      	; 0x5642 <SpawnSnake+0xe8>
    5640:	94 cf       	rjmp	.-216    	; 0x556a <SpawnSnake+0x10>
		snakeArr[index].posX = 0;
		snakeArr[index].posY = 10 - index;
		LCD_voidGoToPosition(snakeArr[index].posX, snakeArr[index].posY);
		LCD_voidWriteChar(snakeArr[index].shape);
	}
}
    5642:	0f 90       	pop	r0
    5644:	cf 91       	pop	r28
    5646:	df 91       	pop	r29
    5648:	08 95       	ret

0000564a <MoveSnake>:

void MoveSnake(){
    564a:	0f 93       	push	r16
    564c:	1f 93       	push	r17
    564e:	df 93       	push	r29
    5650:	cf 93       	push	r28
    5652:	0f 92       	push	r0
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
	s8 index = 0;
    5658:	19 82       	std	Y+1, r1	; 0x01
	index = currentSize - 1;
    565a:	80 91 8d 01 	lds	r24, 0x018D
    565e:	81 50       	subi	r24, 0x01	; 1
    5660:	89 83       	std	Y+1, r24	; 0x01
	posArr[snakeArr[index].posX][snakeArr[index].posY] = 0;
    5662:	89 81       	ldd	r24, Y+1	; 0x01
    5664:	28 2f       	mov	r18, r24
    5666:	33 27       	eor	r19, r19
    5668:	27 fd       	sbrc	r18, 7
    566a:	30 95       	com	r19
    566c:	c9 01       	movw	r24, r18
    566e:	88 0f       	add	r24, r24
    5670:	99 1f       	adc	r25, r25
    5672:	88 0f       	add	r24, r24
    5674:	99 1f       	adc	r25, r25
    5676:	82 0f       	add	r24, r18
    5678:	93 1f       	adc	r25, r19
    567a:	fc 01       	movw	r30, r24
    567c:	e3 59       	subi	r30, 0x93	; 147
    567e:	fd 4f       	sbci	r31, 0xFD	; 253
    5680:	80 81       	ld	r24, Z
    5682:	68 2f       	mov	r22, r24
    5684:	77 27       	eor	r23, r23
    5686:	67 fd       	sbrc	r22, 7
    5688:	70 95       	com	r23
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	28 2f       	mov	r18, r24
    568e:	33 27       	eor	r19, r19
    5690:	27 fd       	sbrc	r18, 7
    5692:	30 95       	com	r19
    5694:	c9 01       	movw	r24, r18
    5696:	88 0f       	add	r24, r24
    5698:	99 1f       	adc	r25, r25
    569a:	88 0f       	add	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	82 0f       	add	r24, r18
    56a0:	93 1f       	adc	r25, r19
    56a2:	fc 01       	movw	r30, r24
    56a4:	e2 59       	subi	r30, 0x92	; 146
    56a6:	fd 4f       	sbci	r31, 0xFD	; 253
    56a8:	80 81       	ld	r24, Z
    56aa:	48 2f       	mov	r20, r24
    56ac:	55 27       	eor	r21, r21
    56ae:	47 fd       	sbrc	r20, 7
    56b0:	50 95       	com	r21
    56b2:	cb 01       	movw	r24, r22
    56b4:	88 0f       	add	r24, r24
    56b6:	99 1f       	adc	r25, r25
    56b8:	88 0f       	add	r24, r24
    56ba:	99 1f       	adc	r25, r25
    56bc:	9c 01       	movw	r18, r24
    56be:	22 0f       	add	r18, r18
    56c0:	33 1f       	adc	r19, r19
    56c2:	22 0f       	add	r18, r18
    56c4:	33 1f       	adc	r19, r19
    56c6:	82 0f       	add	r24, r18
    56c8:	93 1f       	adc	r25, r19
    56ca:	84 0f       	add	r24, r20
    56cc:	95 1f       	adc	r25, r21
    56ce:	fc 01       	movw	r30, r24
    56d0:	e5 5e       	subi	r30, 0xE5	; 229
    56d2:	fd 4f       	sbci	r31, 0xFD	; 253
    56d4:	10 82       	st	Z, r1
	LCD_voidClearPosition(snakeArr[index].posX, snakeArr[index].posY);
    56d6:	89 81       	ldd	r24, Y+1	; 0x01
    56d8:	28 2f       	mov	r18, r24
    56da:	33 27       	eor	r19, r19
    56dc:	27 fd       	sbrc	r18, 7
    56de:	30 95       	com	r19
    56e0:	c9 01       	movw	r24, r18
    56e2:	88 0f       	add	r24, r24
    56e4:	99 1f       	adc	r25, r25
    56e6:	88 0f       	add	r24, r24
    56e8:	99 1f       	adc	r25, r25
    56ea:	82 0f       	add	r24, r18
    56ec:	93 1f       	adc	r25, r19
    56ee:	fc 01       	movw	r30, r24
    56f0:	e3 59       	subi	r30, 0x93	; 147
    56f2:	fd 4f       	sbci	r31, 0xFD	; 253
    56f4:	80 81       	ld	r24, Z
    56f6:	48 2f       	mov	r20, r24
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
    56fa:	28 2f       	mov	r18, r24
    56fc:	33 27       	eor	r19, r19
    56fe:	27 fd       	sbrc	r18, 7
    5700:	30 95       	com	r19
    5702:	c9 01       	movw	r24, r18
    5704:	88 0f       	add	r24, r24
    5706:	99 1f       	adc	r25, r25
    5708:	88 0f       	add	r24, r24
    570a:	99 1f       	adc	r25, r25
    570c:	82 0f       	add	r24, r18
    570e:	93 1f       	adc	r25, r19
    5710:	fc 01       	movw	r30, r24
    5712:	e2 59       	subi	r30, 0x92	; 146
    5714:	fd 4f       	sbci	r31, 0xFD	; 253
    5716:	80 81       	ld	r24, Z
    5718:	98 2f       	mov	r25, r24
    571a:	84 2f       	mov	r24, r20
    571c:	69 2f       	mov	r22, r25
    571e:	0e 94 d5 24 	call	0x49aa	; 0x49aa <LCD_voidClearPosition>
    5722:	e3 c2       	rjmp	.+1478   	; 0x5cea <MoveSnake+0x6a0>
	while(index >= 0){
		if(index != 0){
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	88 23       	and	r24, r24
    5728:	09 f4       	brne	.+2      	; 0x572c <MoveSnake+0xe2>
    572a:	f9 c0       	rjmp	.+498    	; 0x591e <MoveSnake+0x2d4>
			snakeArr[index].currentDirection = snakeArr[index - 1].currentDirection;
    572c:	89 81       	ldd	r24, Y+1	; 0x01
    572e:	48 2f       	mov	r20, r24
    5730:	55 27       	eor	r21, r21
    5732:	47 fd       	sbrc	r20, 7
    5734:	50 95       	com	r21
    5736:	89 81       	ldd	r24, Y+1	; 0x01
    5738:	99 27       	eor	r25, r25
    573a:	87 fd       	sbrc	r24, 7
    573c:	90 95       	com	r25
    573e:	9c 01       	movw	r18, r24
    5740:	21 50       	subi	r18, 0x01	; 1
    5742:	30 40       	sbci	r19, 0x00	; 0
    5744:	c9 01       	movw	r24, r18
    5746:	88 0f       	add	r24, r24
    5748:	99 1f       	adc	r25, r25
    574a:	88 0f       	add	r24, r24
    574c:	99 1f       	adc	r25, r25
    574e:	82 0f       	add	r24, r18
    5750:	93 1f       	adc	r25, r19
    5752:	fc 01       	movw	r30, r24
    5754:	e5 59       	subi	r30, 0x95	; 149
    5756:	fd 4f       	sbci	r31, 0xFD	; 253
    5758:	20 81       	ld	r18, Z
    575a:	ca 01       	movw	r24, r20
    575c:	88 0f       	add	r24, r24
    575e:	99 1f       	adc	r25, r25
    5760:	88 0f       	add	r24, r24
    5762:	99 1f       	adc	r25, r25
    5764:	84 0f       	add	r24, r20
    5766:	95 1f       	adc	r25, r21
    5768:	fc 01       	movw	r30, r24
    576a:	e5 59       	subi	r30, 0x95	; 149
    576c:	fd 4f       	sbci	r31, 0xFD	; 253
    576e:	20 83       	st	Z, r18
			snakeArr[index].nextDirection = snakeArr[index - 1].nextDirection;
    5770:	89 81       	ldd	r24, Y+1	; 0x01
    5772:	48 2f       	mov	r20, r24
    5774:	55 27       	eor	r21, r21
    5776:	47 fd       	sbrc	r20, 7
    5778:	50 95       	com	r21
    577a:	89 81       	ldd	r24, Y+1	; 0x01
    577c:	99 27       	eor	r25, r25
    577e:	87 fd       	sbrc	r24, 7
    5780:	90 95       	com	r25
    5782:	9c 01       	movw	r18, r24
    5784:	21 50       	subi	r18, 0x01	; 1
    5786:	30 40       	sbci	r19, 0x00	; 0
    5788:	c9 01       	movw	r24, r18
    578a:	88 0f       	add	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	88 0f       	add	r24, r24
    5790:	99 1f       	adc	r25, r25
    5792:	82 0f       	add	r24, r18
    5794:	93 1f       	adc	r25, r19
    5796:	fc 01       	movw	r30, r24
    5798:	e4 59       	subi	r30, 0x94	; 148
    579a:	fd 4f       	sbci	r31, 0xFD	; 253
    579c:	20 81       	ld	r18, Z
    579e:	ca 01       	movw	r24, r20
    57a0:	88 0f       	add	r24, r24
    57a2:	99 1f       	adc	r25, r25
    57a4:	88 0f       	add	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	84 0f       	add	r24, r20
    57aa:	95 1f       	adc	r25, r21
    57ac:	fc 01       	movw	r30, r24
    57ae:	e4 59       	subi	r30, 0x94	; 148
    57b0:	fd 4f       	sbci	r31, 0xFD	; 253
    57b2:	20 83       	st	Z, r18
			snakeArr[index].posX = snakeArr[index - 1].posX;
    57b4:	89 81       	ldd	r24, Y+1	; 0x01
    57b6:	48 2f       	mov	r20, r24
    57b8:	55 27       	eor	r21, r21
    57ba:	47 fd       	sbrc	r20, 7
    57bc:	50 95       	com	r21
    57be:	89 81       	ldd	r24, Y+1	; 0x01
    57c0:	99 27       	eor	r25, r25
    57c2:	87 fd       	sbrc	r24, 7
    57c4:	90 95       	com	r25
    57c6:	9c 01       	movw	r18, r24
    57c8:	21 50       	subi	r18, 0x01	; 1
    57ca:	30 40       	sbci	r19, 0x00	; 0
    57cc:	c9 01       	movw	r24, r18
    57ce:	88 0f       	add	r24, r24
    57d0:	99 1f       	adc	r25, r25
    57d2:	88 0f       	add	r24, r24
    57d4:	99 1f       	adc	r25, r25
    57d6:	82 0f       	add	r24, r18
    57d8:	93 1f       	adc	r25, r19
    57da:	fc 01       	movw	r30, r24
    57dc:	e3 59       	subi	r30, 0x93	; 147
    57de:	fd 4f       	sbci	r31, 0xFD	; 253
    57e0:	20 81       	ld	r18, Z
    57e2:	ca 01       	movw	r24, r20
    57e4:	88 0f       	add	r24, r24
    57e6:	99 1f       	adc	r25, r25
    57e8:	88 0f       	add	r24, r24
    57ea:	99 1f       	adc	r25, r25
    57ec:	84 0f       	add	r24, r20
    57ee:	95 1f       	adc	r25, r21
    57f0:	fc 01       	movw	r30, r24
    57f2:	e3 59       	subi	r30, 0x93	; 147
    57f4:	fd 4f       	sbci	r31, 0xFD	; 253
    57f6:	20 83       	st	Z, r18
			snakeArr[index].posY = snakeArr[index - 1].posY;
    57f8:	89 81       	ldd	r24, Y+1	; 0x01
    57fa:	48 2f       	mov	r20, r24
    57fc:	55 27       	eor	r21, r21
    57fe:	47 fd       	sbrc	r20, 7
    5800:	50 95       	com	r21
    5802:	89 81       	ldd	r24, Y+1	; 0x01
    5804:	99 27       	eor	r25, r25
    5806:	87 fd       	sbrc	r24, 7
    5808:	90 95       	com	r25
    580a:	9c 01       	movw	r18, r24
    580c:	21 50       	subi	r18, 0x01	; 1
    580e:	30 40       	sbci	r19, 0x00	; 0
    5810:	c9 01       	movw	r24, r18
    5812:	88 0f       	add	r24, r24
    5814:	99 1f       	adc	r25, r25
    5816:	88 0f       	add	r24, r24
    5818:	99 1f       	adc	r25, r25
    581a:	82 0f       	add	r24, r18
    581c:	93 1f       	adc	r25, r19
    581e:	fc 01       	movw	r30, r24
    5820:	e2 59       	subi	r30, 0x92	; 146
    5822:	fd 4f       	sbci	r31, 0xFD	; 253
    5824:	20 81       	ld	r18, Z
    5826:	ca 01       	movw	r24, r20
    5828:	88 0f       	add	r24, r24
    582a:	99 1f       	adc	r25, r25
    582c:	88 0f       	add	r24, r24
    582e:	99 1f       	adc	r25, r25
    5830:	84 0f       	add	r24, r20
    5832:	95 1f       	adc	r25, r21
    5834:	fc 01       	movw	r30, r24
    5836:	e2 59       	subi	r30, 0x92	; 146
    5838:	fd 4f       	sbci	r31, 0xFD	; 253
    583a:	20 83       	st	Z, r18
			snakeArr[index].shape = FindShape(snakeArr[index].currentDirection, snakeArr[index].nextDirection);
    583c:	89 81       	ldd	r24, Y+1	; 0x01
    583e:	08 2f       	mov	r16, r24
    5840:	11 27       	eor	r17, r17
    5842:	07 fd       	sbrc	r16, 7
    5844:	10 95       	com	r17
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	28 2f       	mov	r18, r24
    584a:	33 27       	eor	r19, r19
    584c:	27 fd       	sbrc	r18, 7
    584e:	30 95       	com	r19
    5850:	c9 01       	movw	r24, r18
    5852:	88 0f       	add	r24, r24
    5854:	99 1f       	adc	r25, r25
    5856:	88 0f       	add	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	82 0f       	add	r24, r18
    585c:	93 1f       	adc	r25, r19
    585e:	fc 01       	movw	r30, r24
    5860:	e5 59       	subi	r30, 0x95	; 149
    5862:	fd 4f       	sbci	r31, 0xFD	; 253
    5864:	40 81       	ld	r20, Z
    5866:	89 81       	ldd	r24, Y+1	; 0x01
    5868:	28 2f       	mov	r18, r24
    586a:	33 27       	eor	r19, r19
    586c:	27 fd       	sbrc	r18, 7
    586e:	30 95       	com	r19
    5870:	c9 01       	movw	r24, r18
    5872:	88 0f       	add	r24, r24
    5874:	99 1f       	adc	r25, r25
    5876:	88 0f       	add	r24, r24
    5878:	99 1f       	adc	r25, r25
    587a:	82 0f       	add	r24, r18
    587c:	93 1f       	adc	r25, r19
    587e:	fc 01       	movw	r30, r24
    5880:	e4 59       	subi	r30, 0x94	; 148
    5882:	fd 4f       	sbci	r31, 0xFD	; 253
    5884:	90 81       	ld	r25, Z
    5886:	84 2f       	mov	r24, r20
    5888:	69 2f       	mov	r22, r25
    588a:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <FindShape>
    588e:	28 2f       	mov	r18, r24
    5890:	c8 01       	movw	r24, r16
    5892:	88 0f       	add	r24, r24
    5894:	99 1f       	adc	r25, r25
    5896:	88 0f       	add	r24, r24
    5898:	99 1f       	adc	r25, r25
    589a:	80 0f       	add	r24, r16
    589c:	91 1f       	adc	r25, r17
    589e:	fc 01       	movw	r30, r24
    58a0:	e1 59       	subi	r30, 0x91	; 145
    58a2:	fd 4f       	sbci	r31, 0xFD	; 253
    58a4:	20 83       	st	Z, r18
			posArr[snakeArr[index].posX][snakeArr[index].posY] = 1;
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	28 2f       	mov	r18, r24
    58aa:	33 27       	eor	r19, r19
    58ac:	27 fd       	sbrc	r18, 7
    58ae:	30 95       	com	r19
    58b0:	c9 01       	movw	r24, r18
    58b2:	88 0f       	add	r24, r24
    58b4:	99 1f       	adc	r25, r25
    58b6:	88 0f       	add	r24, r24
    58b8:	99 1f       	adc	r25, r25
    58ba:	82 0f       	add	r24, r18
    58bc:	93 1f       	adc	r25, r19
    58be:	fc 01       	movw	r30, r24
    58c0:	e3 59       	subi	r30, 0x93	; 147
    58c2:	fd 4f       	sbci	r31, 0xFD	; 253
    58c4:	80 81       	ld	r24, Z
    58c6:	68 2f       	mov	r22, r24
    58c8:	77 27       	eor	r23, r23
    58ca:	67 fd       	sbrc	r22, 7
    58cc:	70 95       	com	r23
    58ce:	89 81       	ldd	r24, Y+1	; 0x01
    58d0:	28 2f       	mov	r18, r24
    58d2:	33 27       	eor	r19, r19
    58d4:	27 fd       	sbrc	r18, 7
    58d6:	30 95       	com	r19
    58d8:	c9 01       	movw	r24, r18
    58da:	88 0f       	add	r24, r24
    58dc:	99 1f       	adc	r25, r25
    58de:	88 0f       	add	r24, r24
    58e0:	99 1f       	adc	r25, r25
    58e2:	82 0f       	add	r24, r18
    58e4:	93 1f       	adc	r25, r19
    58e6:	fc 01       	movw	r30, r24
    58e8:	e2 59       	subi	r30, 0x92	; 146
    58ea:	fd 4f       	sbci	r31, 0xFD	; 253
    58ec:	80 81       	ld	r24, Z
    58ee:	48 2f       	mov	r20, r24
    58f0:	55 27       	eor	r21, r21
    58f2:	47 fd       	sbrc	r20, 7
    58f4:	50 95       	com	r21
    58f6:	cb 01       	movw	r24, r22
    58f8:	88 0f       	add	r24, r24
    58fa:	99 1f       	adc	r25, r25
    58fc:	88 0f       	add	r24, r24
    58fe:	99 1f       	adc	r25, r25
    5900:	9c 01       	movw	r18, r24
    5902:	22 0f       	add	r18, r18
    5904:	33 1f       	adc	r19, r19
    5906:	22 0f       	add	r18, r18
    5908:	33 1f       	adc	r19, r19
    590a:	82 0f       	add	r24, r18
    590c:	93 1f       	adc	r25, r19
    590e:	84 0f       	add	r24, r20
    5910:	95 1f       	adc	r25, r21
    5912:	fc 01       	movw	r30, r24
    5914:	e5 5e       	subi	r30, 0xE5	; 229
    5916:	fd 4f       	sbci	r31, 0xFD	; 253
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	80 83       	st	Z, r24
    591c:	1f c1       	rjmp	.+574    	; 0x5b5c <MoveSnake+0x512>
		}
		else{
			snakeArr[index].currentDirection = snakeArr[index].nextDirection;
    591e:	89 81       	ldd	r24, Y+1	; 0x01
    5920:	48 2f       	mov	r20, r24
    5922:	55 27       	eor	r21, r21
    5924:	47 fd       	sbrc	r20, 7
    5926:	50 95       	com	r21
    5928:	89 81       	ldd	r24, Y+1	; 0x01
    592a:	28 2f       	mov	r18, r24
    592c:	33 27       	eor	r19, r19
    592e:	27 fd       	sbrc	r18, 7
    5930:	30 95       	com	r19
    5932:	c9 01       	movw	r24, r18
    5934:	88 0f       	add	r24, r24
    5936:	99 1f       	adc	r25, r25
    5938:	88 0f       	add	r24, r24
    593a:	99 1f       	adc	r25, r25
    593c:	82 0f       	add	r24, r18
    593e:	93 1f       	adc	r25, r19
    5940:	fc 01       	movw	r30, r24
    5942:	e4 59       	subi	r30, 0x94	; 148
    5944:	fd 4f       	sbci	r31, 0xFD	; 253
    5946:	20 81       	ld	r18, Z
    5948:	ca 01       	movw	r24, r20
    594a:	88 0f       	add	r24, r24
    594c:	99 1f       	adc	r25, r25
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	84 0f       	add	r24, r20
    5954:	95 1f       	adc	r25, r21
    5956:	fc 01       	movw	r30, r24
    5958:	e5 59       	subi	r30, 0x95	; 149
    595a:	fd 4f       	sbci	r31, 0xFD	; 253
    595c:	20 83       	st	Z, r18
			snakeArr[index].shape = snakeArr[index].currentDirection;
    595e:	89 81       	ldd	r24, Y+1	; 0x01
    5960:	48 2f       	mov	r20, r24
    5962:	55 27       	eor	r21, r21
    5964:	47 fd       	sbrc	r20, 7
    5966:	50 95       	com	r21
    5968:	89 81       	ldd	r24, Y+1	; 0x01
    596a:	28 2f       	mov	r18, r24
    596c:	33 27       	eor	r19, r19
    596e:	27 fd       	sbrc	r18, 7
    5970:	30 95       	com	r19
    5972:	c9 01       	movw	r24, r18
    5974:	88 0f       	add	r24, r24
    5976:	99 1f       	adc	r25, r25
    5978:	88 0f       	add	r24, r24
    597a:	99 1f       	adc	r25, r25
    597c:	82 0f       	add	r24, r18
    597e:	93 1f       	adc	r25, r19
    5980:	fc 01       	movw	r30, r24
    5982:	e5 59       	subi	r30, 0x95	; 149
    5984:	fd 4f       	sbci	r31, 0xFD	; 253
    5986:	20 81       	ld	r18, Z
    5988:	ca 01       	movw	r24, r20
    598a:	88 0f       	add	r24, r24
    598c:	99 1f       	adc	r25, r25
    598e:	88 0f       	add	r24, r24
    5990:	99 1f       	adc	r25, r25
    5992:	84 0f       	add	r24, r20
    5994:	95 1f       	adc	r25, r21
    5996:	fc 01       	movw	r30, r24
    5998:	e1 59       	subi	r30, 0x91	; 145
    599a:	fd 4f       	sbci	r31, 0xFD	; 253
    599c:	20 83       	st	Z, r18
			if(snakeArr[index].nextDirection == Down){
    599e:	89 81       	ldd	r24, Y+1	; 0x01
    59a0:	28 2f       	mov	r18, r24
    59a2:	33 27       	eor	r19, r19
    59a4:	27 fd       	sbrc	r18, 7
    59a6:	30 95       	com	r19
    59a8:	c9 01       	movw	r24, r18
    59aa:	88 0f       	add	r24, r24
    59ac:	99 1f       	adc	r25, r25
    59ae:	88 0f       	add	r24, r24
    59b0:	99 1f       	adc	r25, r25
    59b2:	82 0f       	add	r24, r18
    59b4:	93 1f       	adc	r25, r19
    59b6:	fc 01       	movw	r30, r24
    59b8:	e4 59       	subi	r30, 0x94	; 148
    59ba:	fd 4f       	sbci	r31, 0xFD	; 253
    59bc:	80 81       	ld	r24, Z
    59be:	83 30       	cpi	r24, 0x03	; 3
    59c0:	f1 f4       	brne	.+60     	; 0x59fe <MoveSnake+0x3b4>
				snakeArr[index].posX++;
    59c2:	89 81       	ldd	r24, Y+1	; 0x01
    59c4:	28 2f       	mov	r18, r24
    59c6:	33 27       	eor	r19, r19
    59c8:	27 fd       	sbrc	r18, 7
    59ca:	30 95       	com	r19
    59cc:	c9 01       	movw	r24, r18
    59ce:	88 0f       	add	r24, r24
    59d0:	99 1f       	adc	r25, r25
    59d2:	88 0f       	add	r24, r24
    59d4:	99 1f       	adc	r25, r25
    59d6:	82 0f       	add	r24, r18
    59d8:	93 1f       	adc	r25, r19
    59da:	fc 01       	movw	r30, r24
    59dc:	e3 59       	subi	r30, 0x93	; 147
    59de:	fd 4f       	sbci	r31, 0xFD	; 253
    59e0:	80 81       	ld	r24, Z
    59e2:	48 2f       	mov	r20, r24
    59e4:	4f 5f       	subi	r20, 0xFF	; 255
    59e6:	c9 01       	movw	r24, r18
    59e8:	88 0f       	add	r24, r24
    59ea:	99 1f       	adc	r25, r25
    59ec:	88 0f       	add	r24, r24
    59ee:	99 1f       	adc	r25, r25
    59f0:	82 0f       	add	r24, r18
    59f2:	93 1f       	adc	r25, r19
    59f4:	fc 01       	movw	r30, r24
    59f6:	e3 59       	subi	r30, 0x93	; 147
    59f8:	fd 4f       	sbci	r31, 0xFD	; 253
    59fa:	40 83       	st	Z, r20
    59fc:	8f c0       	rjmp	.+286    	; 0x5b1c <MoveSnake+0x4d2>
			}
			else if(snakeArr[index].currentDirection == Up){
    59fe:	89 81       	ldd	r24, Y+1	; 0x01
    5a00:	28 2f       	mov	r18, r24
    5a02:	33 27       	eor	r19, r19
    5a04:	27 fd       	sbrc	r18, 7
    5a06:	30 95       	com	r19
    5a08:	c9 01       	movw	r24, r18
    5a0a:	88 0f       	add	r24, r24
    5a0c:	99 1f       	adc	r25, r25
    5a0e:	88 0f       	add	r24, r24
    5a10:	99 1f       	adc	r25, r25
    5a12:	82 0f       	add	r24, r18
    5a14:	93 1f       	adc	r25, r19
    5a16:	fc 01       	movw	r30, r24
    5a18:	e5 59       	subi	r30, 0x95	; 149
    5a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a1c:	80 81       	ld	r24, Z
    5a1e:	82 30       	cpi	r24, 0x02	; 2
    5a20:	f1 f4       	brne	.+60     	; 0x5a5e <MoveSnake+0x414>
				snakeArr[index].posX--;
    5a22:	89 81       	ldd	r24, Y+1	; 0x01
    5a24:	28 2f       	mov	r18, r24
    5a26:	33 27       	eor	r19, r19
    5a28:	27 fd       	sbrc	r18, 7
    5a2a:	30 95       	com	r19
    5a2c:	c9 01       	movw	r24, r18
    5a2e:	88 0f       	add	r24, r24
    5a30:	99 1f       	adc	r25, r25
    5a32:	88 0f       	add	r24, r24
    5a34:	99 1f       	adc	r25, r25
    5a36:	82 0f       	add	r24, r18
    5a38:	93 1f       	adc	r25, r19
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	e3 59       	subi	r30, 0x93	; 147
    5a3e:	fd 4f       	sbci	r31, 0xFD	; 253
    5a40:	80 81       	ld	r24, Z
    5a42:	48 2f       	mov	r20, r24
    5a44:	41 50       	subi	r20, 0x01	; 1
    5a46:	c9 01       	movw	r24, r18
    5a48:	88 0f       	add	r24, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	88 0f       	add	r24, r24
    5a4e:	99 1f       	adc	r25, r25
    5a50:	82 0f       	add	r24, r18
    5a52:	93 1f       	adc	r25, r19
    5a54:	fc 01       	movw	r30, r24
    5a56:	e3 59       	subi	r30, 0x93	; 147
    5a58:	fd 4f       	sbci	r31, 0xFD	; 253
    5a5a:	40 83       	st	Z, r20
    5a5c:	5f c0       	rjmp	.+190    	; 0x5b1c <MoveSnake+0x4d2>
			}
			else if(snakeArr[index].currentDirection == Right){
    5a5e:	89 81       	ldd	r24, Y+1	; 0x01
    5a60:	28 2f       	mov	r18, r24
    5a62:	33 27       	eor	r19, r19
    5a64:	27 fd       	sbrc	r18, 7
    5a66:	30 95       	com	r19
    5a68:	c9 01       	movw	r24, r18
    5a6a:	88 0f       	add	r24, r24
    5a6c:	99 1f       	adc	r25, r25
    5a6e:	88 0f       	add	r24, r24
    5a70:	99 1f       	adc	r25, r25
    5a72:	82 0f       	add	r24, r18
    5a74:	93 1f       	adc	r25, r19
    5a76:	fc 01       	movw	r30, r24
    5a78:	e5 59       	subi	r30, 0x95	; 149
    5a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a7c:	80 81       	ld	r24, Z
    5a7e:	88 23       	and	r24, r24
    5a80:	f1 f4       	brne	.+60     	; 0x5abe <MoveSnake+0x474>
				snakeArr[index].posY++;
    5a82:	89 81       	ldd	r24, Y+1	; 0x01
    5a84:	28 2f       	mov	r18, r24
    5a86:	33 27       	eor	r19, r19
    5a88:	27 fd       	sbrc	r18, 7
    5a8a:	30 95       	com	r19
    5a8c:	c9 01       	movw	r24, r18
    5a8e:	88 0f       	add	r24, r24
    5a90:	99 1f       	adc	r25, r25
    5a92:	88 0f       	add	r24, r24
    5a94:	99 1f       	adc	r25, r25
    5a96:	82 0f       	add	r24, r18
    5a98:	93 1f       	adc	r25, r19
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	e2 59       	subi	r30, 0x92	; 146
    5a9e:	fd 4f       	sbci	r31, 0xFD	; 253
    5aa0:	80 81       	ld	r24, Z
    5aa2:	48 2f       	mov	r20, r24
    5aa4:	4f 5f       	subi	r20, 0xFF	; 255
    5aa6:	c9 01       	movw	r24, r18
    5aa8:	88 0f       	add	r24, r24
    5aaa:	99 1f       	adc	r25, r25
    5aac:	88 0f       	add	r24, r24
    5aae:	99 1f       	adc	r25, r25
    5ab0:	82 0f       	add	r24, r18
    5ab2:	93 1f       	adc	r25, r19
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	e2 59       	subi	r30, 0x92	; 146
    5ab8:	fd 4f       	sbci	r31, 0xFD	; 253
    5aba:	40 83       	st	Z, r20
    5abc:	2f c0       	rjmp	.+94     	; 0x5b1c <MoveSnake+0x4d2>
			}
			else if(snakeArr[index].currentDirection == Left){
    5abe:	89 81       	ldd	r24, Y+1	; 0x01
    5ac0:	28 2f       	mov	r18, r24
    5ac2:	33 27       	eor	r19, r19
    5ac4:	27 fd       	sbrc	r18, 7
    5ac6:	30 95       	com	r19
    5ac8:	c9 01       	movw	r24, r18
    5aca:	88 0f       	add	r24, r24
    5acc:	99 1f       	adc	r25, r25
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	82 0f       	add	r24, r18
    5ad4:	93 1f       	adc	r25, r19
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	e5 59       	subi	r30, 0x95	; 149
    5ada:	fd 4f       	sbci	r31, 0xFD	; 253
    5adc:	80 81       	ld	r24, Z
    5ade:	81 30       	cpi	r24, 0x01	; 1
    5ae0:	e9 f4       	brne	.+58     	; 0x5b1c <MoveSnake+0x4d2>
				snakeArr[index].posY--;
    5ae2:	89 81       	ldd	r24, Y+1	; 0x01
    5ae4:	28 2f       	mov	r18, r24
    5ae6:	33 27       	eor	r19, r19
    5ae8:	27 fd       	sbrc	r18, 7
    5aea:	30 95       	com	r19
    5aec:	c9 01       	movw	r24, r18
    5aee:	88 0f       	add	r24, r24
    5af0:	99 1f       	adc	r25, r25
    5af2:	88 0f       	add	r24, r24
    5af4:	99 1f       	adc	r25, r25
    5af6:	82 0f       	add	r24, r18
    5af8:	93 1f       	adc	r25, r19
    5afa:	fc 01       	movw	r30, r24
    5afc:	e2 59       	subi	r30, 0x92	; 146
    5afe:	fd 4f       	sbci	r31, 0xFD	; 253
    5b00:	80 81       	ld	r24, Z
    5b02:	48 2f       	mov	r20, r24
    5b04:	41 50       	subi	r20, 0x01	; 1
    5b06:	c9 01       	movw	r24, r18
    5b08:	88 0f       	add	r24, r24
    5b0a:	99 1f       	adc	r25, r25
    5b0c:	88 0f       	add	r24, r24
    5b0e:	99 1f       	adc	r25, r25
    5b10:	82 0f       	add	r24, r18
    5b12:	93 1f       	adc	r25, r19
    5b14:	fc 01       	movw	r30, r24
    5b16:	e2 59       	subi	r30, 0x92	; 146
    5b18:	fd 4f       	sbci	r31, 0xFD	; 253
    5b1a:	40 83       	st	Z, r20
			}
			snakeArr[index].shape = snakeArr[index].currentDirection;
    5b1c:	89 81       	ldd	r24, Y+1	; 0x01
    5b1e:	48 2f       	mov	r20, r24
    5b20:	55 27       	eor	r21, r21
    5b22:	47 fd       	sbrc	r20, 7
    5b24:	50 95       	com	r21
    5b26:	89 81       	ldd	r24, Y+1	; 0x01
    5b28:	28 2f       	mov	r18, r24
    5b2a:	33 27       	eor	r19, r19
    5b2c:	27 fd       	sbrc	r18, 7
    5b2e:	30 95       	com	r19
    5b30:	c9 01       	movw	r24, r18
    5b32:	88 0f       	add	r24, r24
    5b34:	99 1f       	adc	r25, r25
    5b36:	88 0f       	add	r24, r24
    5b38:	99 1f       	adc	r25, r25
    5b3a:	82 0f       	add	r24, r18
    5b3c:	93 1f       	adc	r25, r19
    5b3e:	fc 01       	movw	r30, r24
    5b40:	e5 59       	subi	r30, 0x95	; 149
    5b42:	fd 4f       	sbci	r31, 0xFD	; 253
    5b44:	20 81       	ld	r18, Z
    5b46:	ca 01       	movw	r24, r20
    5b48:	88 0f       	add	r24, r24
    5b4a:	99 1f       	adc	r25, r25
    5b4c:	88 0f       	add	r24, r24
    5b4e:	99 1f       	adc	r25, r25
    5b50:	84 0f       	add	r24, r20
    5b52:	95 1f       	adc	r25, r21
    5b54:	fc 01       	movw	r30, r24
    5b56:	e1 59       	subi	r30, 0x91	; 145
    5b58:	fd 4f       	sbci	r31, 0xFD	; 253
    5b5a:	20 83       	st	Z, r18
		}
		if(snakeArr[index].posX > 3){
    5b5c:	89 81       	ldd	r24, Y+1	; 0x01
    5b5e:	28 2f       	mov	r18, r24
    5b60:	33 27       	eor	r19, r19
    5b62:	27 fd       	sbrc	r18, 7
    5b64:	30 95       	com	r19
    5b66:	c9 01       	movw	r24, r18
    5b68:	88 0f       	add	r24, r24
    5b6a:	99 1f       	adc	r25, r25
    5b6c:	88 0f       	add	r24, r24
    5b6e:	99 1f       	adc	r25, r25
    5b70:	82 0f       	add	r24, r18
    5b72:	93 1f       	adc	r25, r19
    5b74:	fc 01       	movw	r30, r24
    5b76:	e3 59       	subi	r30, 0x93	; 147
    5b78:	fd 4f       	sbci	r31, 0xFD	; 253
    5b7a:	80 81       	ld	r24, Z
    5b7c:	84 30       	cpi	r24, 0x04	; 4
    5b7e:	8c f0       	brlt	.+34     	; 0x5ba2 <MoveSnake+0x558>
			snakeArr[index].posX = 0;
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	28 2f       	mov	r18, r24
    5b84:	33 27       	eor	r19, r19
    5b86:	27 fd       	sbrc	r18, 7
    5b88:	30 95       	com	r19
    5b8a:	c9 01       	movw	r24, r18
    5b8c:	88 0f       	add	r24, r24
    5b8e:	99 1f       	adc	r25, r25
    5b90:	88 0f       	add	r24, r24
    5b92:	99 1f       	adc	r25, r25
    5b94:	82 0f       	add	r24, r18
    5b96:	93 1f       	adc	r25, r19
    5b98:	fc 01       	movw	r30, r24
    5b9a:	e3 59       	subi	r30, 0x93	; 147
    5b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    5b9e:	10 82       	st	Z, r1
    5ba0:	23 c0       	rjmp	.+70     	; 0x5be8 <MoveSnake+0x59e>
		}
		else if(snakeArr[index].posX < 0){
    5ba2:	89 81       	ldd	r24, Y+1	; 0x01
    5ba4:	28 2f       	mov	r18, r24
    5ba6:	33 27       	eor	r19, r19
    5ba8:	27 fd       	sbrc	r18, 7
    5baa:	30 95       	com	r19
    5bac:	c9 01       	movw	r24, r18
    5bae:	88 0f       	add	r24, r24
    5bb0:	99 1f       	adc	r25, r25
    5bb2:	88 0f       	add	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	82 0f       	add	r24, r18
    5bb8:	93 1f       	adc	r25, r19
    5bba:	fc 01       	movw	r30, r24
    5bbc:	e3 59       	subi	r30, 0x93	; 147
    5bbe:	fd 4f       	sbci	r31, 0xFD	; 253
    5bc0:	80 81       	ld	r24, Z
    5bc2:	88 23       	and	r24, r24
    5bc4:	8c f4       	brge	.+34     	; 0x5be8 <MoveSnake+0x59e>
			snakeArr[index].posX = 3;
    5bc6:	89 81       	ldd	r24, Y+1	; 0x01
    5bc8:	28 2f       	mov	r18, r24
    5bca:	33 27       	eor	r19, r19
    5bcc:	27 fd       	sbrc	r18, 7
    5bce:	30 95       	com	r19
    5bd0:	c9 01       	movw	r24, r18
    5bd2:	88 0f       	add	r24, r24
    5bd4:	99 1f       	adc	r25, r25
    5bd6:	88 0f       	add	r24, r24
    5bd8:	99 1f       	adc	r25, r25
    5bda:	82 0f       	add	r24, r18
    5bdc:	93 1f       	adc	r25, r19
    5bde:	fc 01       	movw	r30, r24
    5be0:	e3 59       	subi	r30, 0x93	; 147
    5be2:	fd 4f       	sbci	r31, 0xFD	; 253
    5be4:	83 e0       	ldi	r24, 0x03	; 3
    5be6:	80 83       	st	Z, r24
		}

		if(snakeArr[index].posY > 19){
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
    5bea:	28 2f       	mov	r18, r24
    5bec:	33 27       	eor	r19, r19
    5bee:	27 fd       	sbrc	r18, 7
    5bf0:	30 95       	com	r19
    5bf2:	c9 01       	movw	r24, r18
    5bf4:	88 0f       	add	r24, r24
    5bf6:	99 1f       	adc	r25, r25
    5bf8:	88 0f       	add	r24, r24
    5bfa:	99 1f       	adc	r25, r25
    5bfc:	82 0f       	add	r24, r18
    5bfe:	93 1f       	adc	r25, r19
    5c00:	fc 01       	movw	r30, r24
    5c02:	e2 59       	subi	r30, 0x92	; 146
    5c04:	fd 4f       	sbci	r31, 0xFD	; 253
    5c06:	80 81       	ld	r24, Z
    5c08:	84 31       	cpi	r24, 0x14	; 20
    5c0a:	8c f0       	brlt	.+34     	; 0x5c2e <MoveSnake+0x5e4>
			snakeArr[index].posY = 0;
    5c0c:	89 81       	ldd	r24, Y+1	; 0x01
    5c0e:	28 2f       	mov	r18, r24
    5c10:	33 27       	eor	r19, r19
    5c12:	27 fd       	sbrc	r18, 7
    5c14:	30 95       	com	r19
    5c16:	c9 01       	movw	r24, r18
    5c18:	88 0f       	add	r24, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	88 0f       	add	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	82 0f       	add	r24, r18
    5c22:	93 1f       	adc	r25, r19
    5c24:	fc 01       	movw	r30, r24
    5c26:	e2 59       	subi	r30, 0x92	; 146
    5c28:	fd 4f       	sbci	r31, 0xFD	; 253
    5c2a:	10 82       	st	Z, r1
    5c2c:	23 c0       	rjmp	.+70     	; 0x5c74 <MoveSnake+0x62a>
		}
		else if(snakeArr[index].posY < 0){
    5c2e:	89 81       	ldd	r24, Y+1	; 0x01
    5c30:	28 2f       	mov	r18, r24
    5c32:	33 27       	eor	r19, r19
    5c34:	27 fd       	sbrc	r18, 7
    5c36:	30 95       	com	r19
    5c38:	c9 01       	movw	r24, r18
    5c3a:	88 0f       	add	r24, r24
    5c3c:	99 1f       	adc	r25, r25
    5c3e:	88 0f       	add	r24, r24
    5c40:	99 1f       	adc	r25, r25
    5c42:	82 0f       	add	r24, r18
    5c44:	93 1f       	adc	r25, r19
    5c46:	fc 01       	movw	r30, r24
    5c48:	e2 59       	subi	r30, 0x92	; 146
    5c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c4c:	80 81       	ld	r24, Z
    5c4e:	88 23       	and	r24, r24
    5c50:	8c f4       	brge	.+34     	; 0x5c74 <MoveSnake+0x62a>
			snakeArr[index].posY = 19;
    5c52:	89 81       	ldd	r24, Y+1	; 0x01
    5c54:	28 2f       	mov	r18, r24
    5c56:	33 27       	eor	r19, r19
    5c58:	27 fd       	sbrc	r18, 7
    5c5a:	30 95       	com	r19
    5c5c:	c9 01       	movw	r24, r18
    5c5e:	88 0f       	add	r24, r24
    5c60:	99 1f       	adc	r25, r25
    5c62:	88 0f       	add	r24, r24
    5c64:	99 1f       	adc	r25, r25
    5c66:	82 0f       	add	r24, r18
    5c68:	93 1f       	adc	r25, r19
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	e2 59       	subi	r30, 0x92	; 146
    5c6e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c70:	83 e1       	ldi	r24, 0x13	; 19
    5c72:	80 83       	st	Z, r24
		}

		LCD_voidGoToPosition(snakeArr[index].posX,snakeArr[index].posY);
    5c74:	89 81       	ldd	r24, Y+1	; 0x01
    5c76:	28 2f       	mov	r18, r24
    5c78:	33 27       	eor	r19, r19
    5c7a:	27 fd       	sbrc	r18, 7
    5c7c:	30 95       	com	r19
    5c7e:	c9 01       	movw	r24, r18
    5c80:	88 0f       	add	r24, r24
    5c82:	99 1f       	adc	r25, r25
    5c84:	88 0f       	add	r24, r24
    5c86:	99 1f       	adc	r25, r25
    5c88:	82 0f       	add	r24, r18
    5c8a:	93 1f       	adc	r25, r19
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	e3 59       	subi	r30, 0x93	; 147
    5c90:	fd 4f       	sbci	r31, 0xFD	; 253
    5c92:	80 81       	ld	r24, Z
    5c94:	48 2f       	mov	r20, r24
    5c96:	89 81       	ldd	r24, Y+1	; 0x01
    5c98:	28 2f       	mov	r18, r24
    5c9a:	33 27       	eor	r19, r19
    5c9c:	27 fd       	sbrc	r18, 7
    5c9e:	30 95       	com	r19
    5ca0:	c9 01       	movw	r24, r18
    5ca2:	88 0f       	add	r24, r24
    5ca4:	99 1f       	adc	r25, r25
    5ca6:	88 0f       	add	r24, r24
    5ca8:	99 1f       	adc	r25, r25
    5caa:	82 0f       	add	r24, r18
    5cac:	93 1f       	adc	r25, r19
    5cae:	fc 01       	movw	r30, r24
    5cb0:	e2 59       	subi	r30, 0x92	; 146
    5cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    5cb4:	80 81       	ld	r24, Z
    5cb6:	98 2f       	mov	r25, r24
    5cb8:	84 2f       	mov	r24, r20
    5cba:	69 2f       	mov	r22, r25
    5cbc:	0e 94 a4 24 	call	0x4948	; 0x4948 <LCD_voidGoToPosition>
		LCD_voidWriteChar(snakeArr[index].shape);
    5cc0:	89 81       	ldd	r24, Y+1	; 0x01
    5cc2:	28 2f       	mov	r18, r24
    5cc4:	33 27       	eor	r19, r19
    5cc6:	27 fd       	sbrc	r18, 7
    5cc8:	30 95       	com	r19
    5cca:	c9 01       	movw	r24, r18
    5ccc:	88 0f       	add	r24, r24
    5cce:	99 1f       	adc	r25, r25
    5cd0:	88 0f       	add	r24, r24
    5cd2:	99 1f       	adc	r25, r25
    5cd4:	82 0f       	add	r24, r18
    5cd6:	93 1f       	adc	r25, r19
    5cd8:	fc 01       	movw	r30, r24
    5cda:	e1 59       	subi	r30, 0x91	; 145
    5cdc:	fd 4f       	sbci	r31, 0xFD	; 253
    5cde:	80 81       	ld	r24, Z
    5ce0:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <LCD_voidWriteChar>
		index--;
    5ce4:	89 81       	ldd	r24, Y+1	; 0x01
    5ce6:	81 50       	subi	r24, 0x01	; 1
    5ce8:	89 83       	std	Y+1, r24	; 0x01
void MoveSnake(){
	s8 index = 0;
	index = currentSize - 1;
	posArr[snakeArr[index].posX][snakeArr[index].posY] = 0;
	LCD_voidClearPosition(snakeArr[index].posX, snakeArr[index].posY);
	while(index >= 0){
    5cea:	89 81       	ldd	r24, Y+1	; 0x01
    5cec:	88 23       	and	r24, r24
    5cee:	0c f0       	brlt	.+2      	; 0x5cf2 <MoveSnake+0x6a8>
    5cf0:	19 cd       	rjmp	.-1486   	; 0x5724 <MoveSnake+0xda>

		LCD_voidGoToPosition(snakeArr[index].posX,snakeArr[index].posY);
		LCD_voidWriteChar(snakeArr[index].shape);
		index--;
	}
}
    5cf2:	0f 90       	pop	r0
    5cf4:	cf 91       	pop	r28
    5cf6:	df 91       	pop	r29
    5cf8:	1f 91       	pop	r17
    5cfa:	0f 91       	pop	r16
    5cfc:	08 95       	ret

00005cfe <FindShape>:

u8 FindShape(u8 currentDir, u8 nextDir){
    5cfe:	df 93       	push	r29
    5d00:	cf 93       	push	r28
    5d02:	00 d0       	rcall	.+0      	; 0x5d04 <FindShape+0x6>
    5d04:	00 d0       	rcall	.+0      	; 0x5d06 <FindShape+0x8>
    5d06:	0f 92       	push	r0
    5d08:	cd b7       	in	r28, 0x3d	; 61
    5d0a:	de b7       	in	r29, 0x3e	; 62
    5d0c:	8a 83       	std	Y+2, r24	; 0x02
    5d0e:	6b 83       	std	Y+3, r22	; 0x03
	u8 index = 0;
    5d10:	19 82       	std	Y+1, r1	; 0x01
	switch(currentDir){
    5d12:	8a 81       	ldd	r24, Y+2	; 0x02
    5d14:	28 2f       	mov	r18, r24
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	3d 83       	std	Y+5, r19	; 0x05
    5d1a:	2c 83       	std	Y+4, r18	; 0x04
    5d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    5d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    5d20:	81 30       	cpi	r24, 0x01	; 1
    5d22:	91 05       	cpc	r25, r1
    5d24:	39 f1       	breq	.+78     	; 0x5d74 <FindShape+0x76>
    5d26:	2c 81       	ldd	r18, Y+4	; 0x04
    5d28:	3d 81       	ldd	r19, Y+5	; 0x05
    5d2a:	22 30       	cpi	r18, 0x02	; 2
    5d2c:	31 05       	cpc	r19, r1
    5d2e:	2c f4       	brge	.+10     	; 0x5d3a <FindShape+0x3c>
    5d30:	8c 81       	ldd	r24, Y+4	; 0x04
    5d32:	9d 81       	ldd	r25, Y+5	; 0x05
    5d34:	00 97       	sbiw	r24, 0x00	; 0
    5d36:	61 f0       	breq	.+24     	; 0x5d50 <FindShape+0x52>
    5d38:	4c c0       	rjmp	.+152    	; 0x5dd2 <FindShape+0xd4>
    5d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    5d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    5d3e:	22 30       	cpi	r18, 0x02	; 2
    5d40:	31 05       	cpc	r19, r1
    5d42:	51 f1       	breq	.+84     	; 0x5d98 <FindShape+0x9a>
    5d44:	8c 81       	ldd	r24, Y+4	; 0x04
    5d46:	9d 81       	ldd	r25, Y+5	; 0x05
    5d48:	83 30       	cpi	r24, 0x03	; 3
    5d4a:	91 05       	cpc	r25, r1
    5d4c:	a1 f1       	breq	.+104    	; 0x5db6 <FindShape+0xb8>
    5d4e:	41 c0       	rjmp	.+130    	; 0x5dd2 <FindShape+0xd4>
	case Right:
		if(nextDir == Right){
    5d50:	8b 81       	ldd	r24, Y+3	; 0x03
    5d52:	88 23       	and	r24, r24
    5d54:	19 f4       	brne	.+6      	; 0x5d5c <FindShape+0x5e>
			index = RightLeft;
    5d56:	84 e0       	ldi	r24, 0x04	; 4
    5d58:	89 83       	std	Y+1, r24	; 0x01
    5d5a:	3b c0       	rjmp	.+118    	; 0x5dd2 <FindShape+0xd4>
		}
		else if(nextDir == Up){
    5d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5e:	82 30       	cpi	r24, 0x02	; 2
    5d60:	19 f4       	brne	.+6      	; 0x5d68 <FindShape+0x6a>
			index = RightLeft_Up;
    5d62:	87 e0       	ldi	r24, 0x07	; 7
    5d64:	89 83       	std	Y+1, r24	; 0x01
    5d66:	35 c0       	rjmp	.+106    	; 0x5dd2 <FindShape+0xd4>
		}
		else if(nextDir == Down){
    5d68:	8b 81       	ldd	r24, Y+3	; 0x03
    5d6a:	83 30       	cpi	r24, 0x03	; 3
    5d6c:	91 f5       	brne	.+100    	; 0x5dd2 <FindShape+0xd4>
			index =  RightLeft_Down;
    5d6e:	86 e0       	ldi	r24, 0x06	; 6
    5d70:	89 83       	std	Y+1, r24	; 0x01
    5d72:	2f c0       	rjmp	.+94     	; 0x5dd2 <FindShape+0xd4>
		}
		break;
	case Left:
		if(nextDir == Left){
    5d74:	8b 81       	ldd	r24, Y+3	; 0x03
    5d76:	81 30       	cpi	r24, 0x01	; 1
    5d78:	19 f4       	brne	.+6      	; 0x5d80 <FindShape+0x82>
			index = RightLeft;
    5d7a:	84 e0       	ldi	r24, 0x04	; 4
    5d7c:	89 83       	std	Y+1, r24	; 0x01
    5d7e:	29 c0       	rjmp	.+82     	; 0x5dd2 <FindShape+0xd4>
		}
		else if(nextDir == Up){
    5d80:	8b 81       	ldd	r24, Y+3	; 0x03
    5d82:	82 30       	cpi	r24, 0x02	; 2
    5d84:	19 f4       	brne	.+6      	; 0x5d8c <FindShape+0x8e>
			index = RightLeft_Up;
    5d86:	87 e0       	ldi	r24, 0x07	; 7
    5d88:	89 83       	std	Y+1, r24	; 0x01
    5d8a:	23 c0       	rjmp	.+70     	; 0x5dd2 <FindShape+0xd4>
		}
		else if(nextDir == Down){
    5d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d8e:	83 30       	cpi	r24, 0x03	; 3
    5d90:	01 f5       	brne	.+64     	; 0x5dd2 <FindShape+0xd4>
			index =  RightLeft_Down;
    5d92:	86 e0       	ldi	r24, 0x06	; 6
    5d94:	89 83       	std	Y+1, r24	; 0x01
    5d96:	1d c0       	rjmp	.+58     	; 0x5dd2 <FindShape+0xd4>
		}
		break;
	case Up:
		if(nextDir == Right || nextDir == Left){
    5d98:	8b 81       	ldd	r24, Y+3	; 0x03
    5d9a:	88 23       	and	r24, r24
    5d9c:	19 f0       	breq	.+6      	; 0x5da4 <FindShape+0xa6>
    5d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5da0:	81 30       	cpi	r24, 0x01	; 1
    5da2:	19 f4       	brne	.+6      	; 0x5daa <FindShape+0xac>
			index =  Up_RightLeft;
    5da4:	86 e0       	ldi	r24, 0x06	; 6
    5da6:	89 83       	std	Y+1, r24	; 0x01
    5da8:	14 c0       	rjmp	.+40     	; 0x5dd2 <FindShape+0xd4>
		}
		else if(nextDir == Up){
    5daa:	8b 81       	ldd	r24, Y+3	; 0x03
    5dac:	82 30       	cpi	r24, 0x02	; 2
    5dae:	89 f4       	brne	.+34     	; 0x5dd2 <FindShape+0xd4>
			index =  UpDown;
    5db0:	85 e0       	ldi	r24, 0x05	; 5
    5db2:	89 83       	std	Y+1, r24	; 0x01
    5db4:	0e c0       	rjmp	.+28     	; 0x5dd2 <FindShape+0xd4>
		}
		break;
	case Down:
		if(nextDir == Right || nextDir == Left){
    5db6:	8b 81       	ldd	r24, Y+3	; 0x03
    5db8:	88 23       	and	r24, r24
    5dba:	19 f0       	breq	.+6      	; 0x5dc2 <FindShape+0xc4>
    5dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    5dbe:	81 30       	cpi	r24, 0x01	; 1
    5dc0:	19 f4       	brne	.+6      	; 0x5dc8 <FindShape+0xca>
			index =  Down_RightLeft;
    5dc2:	87 e0       	ldi	r24, 0x07	; 7
    5dc4:	89 83       	std	Y+1, r24	; 0x01
    5dc6:	05 c0       	rjmp	.+10     	; 0x5dd2 <FindShape+0xd4>
		}
		else if(nextDir == Down){
    5dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dca:	83 30       	cpi	r24, 0x03	; 3
    5dcc:	11 f4       	brne	.+4      	; 0x5dd2 <FindShape+0xd4>
			index =  UpDown;
    5dce:	85 e0       	ldi	r24, 0x05	; 5
    5dd0:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return index;
    5dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    5dd4:	0f 90       	pop	r0
    5dd6:	0f 90       	pop	r0
    5dd8:	0f 90       	pop	r0
    5dda:	0f 90       	pop	r0
    5ddc:	0f 90       	pop	r0
    5dde:	cf 91       	pop	r28
    5de0:	df 91       	pop	r29
    5de2:	08 95       	ret

00005de4 <ResetPositionArr>:

void ResetPositionArr(){
    5de4:	df 93       	push	r29
    5de6:	cf 93       	push	r28
    5de8:	00 d0       	rcall	.+0      	; 0x5dea <ResetPositionArr+0x6>
    5dea:	cd b7       	in	r28, 0x3d	; 61
    5dec:	de b7       	in	r29, 0x3e	; 62
	u8 x= 0;
    5dee:	1a 82       	std	Y+2, r1	; 0x02
	u8 y =0;
    5df0:	19 82       	std	Y+1, r1	; 0x01
	for(x =0; x < 4; x++){
    5df2:	1a 82       	std	Y+2, r1	; 0x02
    5df4:	23 c0       	rjmp	.+70     	; 0x5e3c <ResetPositionArr+0x58>
		for(y=0; y < 20; y++){
    5df6:	19 82       	std	Y+1, r1	; 0x01
    5df8:	1b c0       	rjmp	.+54     	; 0x5e30 <ResetPositionArr+0x4c>
			posArr[x][y] = 0;
    5dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfc:	28 2f       	mov	r18, r24
    5dfe:	30 e0       	ldi	r19, 0x00	; 0
    5e00:	89 81       	ldd	r24, Y+1	; 0x01
    5e02:	48 2f       	mov	r20, r24
    5e04:	50 e0       	ldi	r21, 0x00	; 0
    5e06:	c9 01       	movw	r24, r18
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	88 0f       	add	r24, r24
    5e0e:	99 1f       	adc	r25, r25
    5e10:	9c 01       	movw	r18, r24
    5e12:	22 0f       	add	r18, r18
    5e14:	33 1f       	adc	r19, r19
    5e16:	22 0f       	add	r18, r18
    5e18:	33 1f       	adc	r19, r19
    5e1a:	82 0f       	add	r24, r18
    5e1c:	93 1f       	adc	r25, r19
    5e1e:	84 0f       	add	r24, r20
    5e20:	95 1f       	adc	r25, r21
    5e22:	fc 01       	movw	r30, r24
    5e24:	e5 5e       	subi	r30, 0xE5	; 229
    5e26:	fd 4f       	sbci	r31, 0xFD	; 253
    5e28:	10 82       	st	Z, r1

void ResetPositionArr(){
	u8 x= 0;
	u8 y =0;
	for(x =0; x < 4; x++){
		for(y=0; y < 20; y++){
    5e2a:	89 81       	ldd	r24, Y+1	; 0x01
    5e2c:	8f 5f       	subi	r24, 0xFF	; 255
    5e2e:	89 83       	std	Y+1, r24	; 0x01
    5e30:	89 81       	ldd	r24, Y+1	; 0x01
    5e32:	84 31       	cpi	r24, 0x14	; 20
    5e34:	10 f3       	brcs	.-60     	; 0x5dfa <ResetPositionArr+0x16>
}

void ResetPositionArr(){
	u8 x= 0;
	u8 y =0;
	for(x =0; x < 4; x++){
    5e36:	8a 81       	ldd	r24, Y+2	; 0x02
    5e38:	8f 5f       	subi	r24, 0xFF	; 255
    5e3a:	8a 83       	std	Y+2, r24	; 0x02
    5e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e3e:	84 30       	cpi	r24, 0x04	; 4
    5e40:	d0 f2       	brcs	.-76     	; 0x5df6 <ResetPositionArr+0x12>
		for(y=0; y < 20; y++){
			posArr[x][y] = 0;
		}
	}
}
    5e42:	0f 90       	pop	r0
    5e44:	0f 90       	pop	r0
    5e46:	cf 91       	pop	r28
    5e48:	df 91       	pop	r29
    5e4a:	08 95       	ret

00005e4c <SpawnFood>:

void SpawnFood(){
    5e4c:	df 93       	push	r29
    5e4e:	cf 93       	push	r28
    5e50:	00 d0       	rcall	.+0      	; 0x5e52 <SpawnFood+0x6>
    5e52:	cd b7       	in	r28, 0x3d	; 61
    5e54:	de b7       	in	r29, 0x3e	; 62
	u8 oldfoodX = foodX;
    5e56:	80 91 15 02 	lds	r24, 0x0215
    5e5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 oldfoodY = foodY;
    5e5c:	80 91 16 02 	lds	r24, 0x0216
    5e60:	89 83       	std	Y+1, r24	; 0x01
    5e62:	0c c0       	rjmp	.+24     	; 0x5e7c <SpawnFood+0x30>
	while(oldfoodX == foodX && oldfoodY == foodY){
		foodX = Random(0,3);
    5e64:	80 e0       	ldi	r24, 0x00	; 0
    5e66:	63 e0       	ldi	r22, 0x03	; 3
    5e68:	0e 94 75 2f 	call	0x5eea	; 0x5eea <Random>
    5e6c:	80 93 15 02 	sts	0x0215, r24
		foodY = Random(0,19);
    5e70:	80 e0       	ldi	r24, 0x00	; 0
    5e72:	63 e1       	ldi	r22, 0x13	; 19
    5e74:	0e 94 75 2f 	call	0x5eea	; 0x5eea <Random>
    5e78:	80 93 16 02 	sts	0x0216, r24
}

void SpawnFood(){
	u8 oldfoodX = foodX;
	u8 oldfoodY = foodY;
	while(oldfoodX == foodX && oldfoodY == foodY){
    5e7c:	90 91 15 02 	lds	r25, 0x0215
    5e80:	8a 81       	ldd	r24, Y+2	; 0x02
    5e82:	89 17       	cp	r24, r25
    5e84:	29 f4       	brne	.+10     	; 0x5e90 <SpawnFood+0x44>
    5e86:	90 91 16 02 	lds	r25, 0x0216
    5e8a:	89 81       	ldd	r24, Y+1	; 0x01
    5e8c:	89 17       	cp	r24, r25
    5e8e:	51 f3       	breq	.-44     	; 0x5e64 <SpawnFood+0x18>
		foodX = Random(0,3);
		foodY = Random(0,19);
	}
}
    5e90:	0f 90       	pop	r0
    5e92:	0f 90       	pop	r0
    5e94:	cf 91       	pop	r28
    5e96:	df 91       	pop	r29
    5e98:	08 95       	ret

00005e9a <UpdateSize>:

void UpdateSize(){
    5e9a:	df 93       	push	r29
    5e9c:	cf 93       	push	r28
    5e9e:	cd b7       	in	r28, 0x3d	; 61
    5ea0:	de b7       	in	r29, 0x3e	; 62
	if(snakeArr[0].posX == foodX && snakeArr[0].posY == foodY){
    5ea2:	80 91 6d 02 	lds	r24, 0x026D
    5ea6:	28 2f       	mov	r18, r24
    5ea8:	33 27       	eor	r19, r19
    5eaa:	27 fd       	sbrc	r18, 7
    5eac:	30 95       	com	r19
    5eae:	80 91 15 02 	lds	r24, 0x0215
    5eb2:	88 2f       	mov	r24, r24
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	28 17       	cp	r18, r24
    5eb8:	39 07       	cpc	r19, r25
    5eba:	a1 f4       	brne	.+40     	; 0x5ee4 <UpdateSize+0x4a>
    5ebc:	80 91 6e 02 	lds	r24, 0x026E
    5ec0:	28 2f       	mov	r18, r24
    5ec2:	33 27       	eor	r19, r19
    5ec4:	27 fd       	sbrc	r18, 7
    5ec6:	30 95       	com	r19
    5ec8:	80 91 16 02 	lds	r24, 0x0216
    5ecc:	88 2f       	mov	r24, r24
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	28 17       	cp	r18, r24
    5ed2:	39 07       	cpc	r19, r25
    5ed4:	39 f4       	brne	.+14     	; 0x5ee4 <UpdateSize+0x4a>
		currentSize++;
    5ed6:	80 91 8d 01 	lds	r24, 0x018D
    5eda:	8f 5f       	subi	r24, 0xFF	; 255
    5edc:	80 93 8d 01 	sts	0x018D, r24
		foodAvailable = 0;
    5ee0:	10 92 17 02 	sts	0x0217, r1
	}
}
    5ee4:	cf 91       	pop	r28
    5ee6:	df 91       	pop	r29
    5ee8:	08 95       	ret

00005eea <Random>:

u8 Random(u8 lower, u8 upper){
    5eea:	df 93       	push	r29
    5eec:	cf 93       	push	r28
    5eee:	00 d0       	rcall	.+0      	; 0x5ef0 <Random+0x6>
    5ef0:	0f 92       	push	r0
    5ef2:	cd b7       	in	r28, 0x3d	; 61
    5ef4:	de b7       	in	r29, 0x3e	; 62
    5ef6:	8a 83       	std	Y+2, r24	; 0x02
    5ef8:	6b 83       	std	Y+3, r22	; 0x03
	u8 num = (rand() %  (upper - lower + 1)) + lower;
    5efa:	0e 94 01 31 	call	0x6202	; 0x6202 <rand>
    5efe:	ac 01       	movw	r20, r24
    5f00:	8b 81       	ldd	r24, Y+3	; 0x03
    5f02:	28 2f       	mov	r18, r24
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	8a 81       	ldd	r24, Y+2	; 0x02
    5f08:	88 2f       	mov	r24, r24
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	b9 01       	movw	r22, r18
    5f0e:	68 1b       	sub	r22, r24
    5f10:	79 0b       	sbc	r23, r25
    5f12:	cb 01       	movw	r24, r22
    5f14:	9c 01       	movw	r18, r24
    5f16:	2f 5f       	subi	r18, 0xFF	; 255
    5f18:	3f 4f       	sbci	r19, 0xFF	; 255
    5f1a:	ca 01       	movw	r24, r20
    5f1c:	b9 01       	movw	r22, r18
    5f1e:	0e 94 09 30 	call	0x6012	; 0x6012 <__divmodhi4>
    5f22:	98 2f       	mov	r25, r24
    5f24:	8a 81       	ldd	r24, Y+2	; 0x02
    5f26:	89 0f       	add	r24, r25
    5f28:	89 83       	std	Y+1, r24	; 0x01
	return num;
    5f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f2c:	0f 90       	pop	r0
    5f2e:	0f 90       	pop	r0
    5f30:	0f 90       	pop	r0
    5f32:	cf 91       	pop	r28
    5f34:	df 91       	pop	r29
    5f36:	08 95       	ret

00005f38 <RTC_Read_Clock>:

void RTC_Read_Clock(){
    5f38:	df 93       	push	r29
    5f3a:	cf 93       	push	r28
    5f3c:	cd b7       	in	r28, 0x3d	; 61
    5f3e:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_enuSendStartCond();
    5f40:	0e 94 53 07 	call	0xea6	; 0xea6 <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADDRESS);
    5f44:	80 ed       	ldi	r24, 0xD0	; 208
    5f46:	0e 94 c0 07 	call	0xf80	; 0xf80 <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(TIME_REGISTER_ADDRESS);
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
    5f4c:	0e 94 ed 07 	call	0xfda	; 0xfda <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendRepeatedStartCond();
    5f50:	0e 94 73 07 	call	0xee6	; 0xee6 <I2C_Master_enuSendRepeatedStartCond>
	I2C_Master_enuSendSlaveAddressWithRead(SLAVE_ADDRESS);
    5f54:	80 ed       	ldi	r24, 0xD0	; 208
    5f56:	0e 94 93 07 	call	0xf26	; 0xf26 <I2C_Master_enuSendSlaveAddressWithRead>
	I2C_Master_enuReadu8Data(&second);
    5f5a:	88 e1       	ldi	r24, 0x18	; 24
    5f5c:	92 e0       	ldi	r25, 0x02	; 2
    5f5e:	0e 94 13 08 	call	0x1026	; 0x1026 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&minute);
    5f62:	89 e1       	ldi	r24, 0x19	; 25
    5f64:	92 e0       	ldi	r25, 0x02	; 2
    5f66:	0e 94 13 08 	call	0x1026	; 0x1026 <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&hour);
    5f6a:	8a e1       	ldi	r24, 0x1A	; 26
    5f6c:	92 e0       	ldi	r25, 0x02	; 2
    5f6e:	0e 94 13 08 	call	0x1026	; 0x1026 <I2C_Master_enuReadu8Data>
	I2C_Master_voidFlush();
    5f72:	0e 94 48 08 	call	0x1090	; 0x1090 <I2C_Master_voidFlush>
	I2C_Master_enuSendStopCond();
    5f76:	0e 94 68 08 	call	0x10d0	; 0x10d0 <I2C_Master_enuSendStopCond>
}
    5f7a:	cf 91       	pop	r28
    5f7c:	df 91       	pop	r29
    5f7e:	08 95       	ret

00005f80 <ConvertFromRTC>:

u8 ConvertFromRTC(u8 num){
    5f80:	df 93       	push	r29
    5f82:	cf 93       	push	r28
    5f84:	0f 92       	push	r0
    5f86:	cd b7       	in	r28, 0x3d	; 61
    5f88:	de b7       	in	r29, 0x3e	; 62
    5f8a:	89 83       	std	Y+1, r24	; 0x01
	return ((num>>4) * 10 + (num&0x0F));
    5f8c:	89 81       	ldd	r24, Y+1	; 0x01
    5f8e:	82 95       	swap	r24
    5f90:	8f 70       	andi	r24, 0x0F	; 15
    5f92:	88 2f       	mov	r24, r24
    5f94:	90 e0       	ldi	r25, 0x00	; 0
    5f96:	9c 01       	movw	r18, r24
    5f98:	22 0f       	add	r18, r18
    5f9a:	33 1f       	adc	r19, r19
    5f9c:	c9 01       	movw	r24, r18
    5f9e:	88 0f       	add	r24, r24
    5fa0:	99 1f       	adc	r25, r25
    5fa2:	88 0f       	add	r24, r24
    5fa4:	99 1f       	adc	r25, r25
    5fa6:	82 0f       	add	r24, r18
    5fa8:	93 1f       	adc	r25, r19
    5faa:	98 2f       	mov	r25, r24
    5fac:	89 81       	ldd	r24, Y+1	; 0x01
    5fae:	8f 70       	andi	r24, 0x0F	; 15
    5fb0:	89 0f       	add	r24, r25
}
    5fb2:	0f 90       	pop	r0
    5fb4:	cf 91       	pop	r28
    5fb6:	df 91       	pop	r29
    5fb8:	08 95       	ret

00005fba <__mulsi3>:
    5fba:	62 9f       	mul	r22, r18
    5fbc:	d0 01       	movw	r26, r0
    5fbe:	73 9f       	mul	r23, r19
    5fc0:	f0 01       	movw	r30, r0
    5fc2:	82 9f       	mul	r24, r18
    5fc4:	e0 0d       	add	r30, r0
    5fc6:	f1 1d       	adc	r31, r1
    5fc8:	64 9f       	mul	r22, r20
    5fca:	e0 0d       	add	r30, r0
    5fcc:	f1 1d       	adc	r31, r1
    5fce:	92 9f       	mul	r25, r18
    5fd0:	f0 0d       	add	r31, r0
    5fd2:	83 9f       	mul	r24, r19
    5fd4:	f0 0d       	add	r31, r0
    5fd6:	74 9f       	mul	r23, r20
    5fd8:	f0 0d       	add	r31, r0
    5fda:	65 9f       	mul	r22, r21
    5fdc:	f0 0d       	add	r31, r0
    5fde:	99 27       	eor	r25, r25
    5fe0:	72 9f       	mul	r23, r18
    5fe2:	b0 0d       	add	r27, r0
    5fe4:	e1 1d       	adc	r30, r1
    5fe6:	f9 1f       	adc	r31, r25
    5fe8:	63 9f       	mul	r22, r19
    5fea:	b0 0d       	add	r27, r0
    5fec:	e1 1d       	adc	r30, r1
    5fee:	f9 1f       	adc	r31, r25
    5ff0:	bd 01       	movw	r22, r26
    5ff2:	cf 01       	movw	r24, r30
    5ff4:	11 24       	eor	r1, r1
    5ff6:	08 95       	ret

00005ff8 <__divmodqi4>:
    5ff8:	87 fb       	bst	r24, 7
    5ffa:	08 2e       	mov	r0, r24
    5ffc:	06 26       	eor	r0, r22
    5ffe:	87 fd       	sbrc	r24, 7
    6000:	81 95       	neg	r24
    6002:	67 fd       	sbrc	r22, 7
    6004:	61 95       	neg	r22
    6006:	33 d0       	rcall	.+102    	; 0x606e <__udivmodqi4>
    6008:	0e f4       	brtc	.+2      	; 0x600c <__divmodqi4_1>
    600a:	91 95       	neg	r25

0000600c <__divmodqi4_1>:
    600c:	07 fc       	sbrc	r0, 7
    600e:	81 95       	neg	r24

00006010 <__divmodqi4_exit>:
    6010:	08 95       	ret

00006012 <__divmodhi4>:
    6012:	97 fb       	bst	r25, 7
    6014:	09 2e       	mov	r0, r25
    6016:	07 26       	eor	r0, r23
    6018:	0a d0       	rcall	.+20     	; 0x602e <__divmodhi4_neg1>
    601a:	77 fd       	sbrc	r23, 7
    601c:	04 d0       	rcall	.+8      	; 0x6026 <__divmodhi4_neg2>
    601e:	33 d0       	rcall	.+102    	; 0x6086 <__udivmodhi4>
    6020:	06 d0       	rcall	.+12     	; 0x602e <__divmodhi4_neg1>
    6022:	00 20       	and	r0, r0
    6024:	1a f4       	brpl	.+6      	; 0x602c <__divmodhi4_exit>

00006026 <__divmodhi4_neg2>:
    6026:	70 95       	com	r23
    6028:	61 95       	neg	r22
    602a:	7f 4f       	sbci	r23, 0xFF	; 255

0000602c <__divmodhi4_exit>:
    602c:	08 95       	ret

0000602e <__divmodhi4_neg1>:
    602e:	f6 f7       	brtc	.-4      	; 0x602c <__divmodhi4_exit>
    6030:	90 95       	com	r25
    6032:	81 95       	neg	r24
    6034:	9f 4f       	sbci	r25, 0xFF	; 255
    6036:	08 95       	ret

00006038 <__divmodsi4>:
    6038:	97 fb       	bst	r25, 7
    603a:	09 2e       	mov	r0, r25
    603c:	05 26       	eor	r0, r21
    603e:	0e d0       	rcall	.+28     	; 0x605c <__divmodsi4_neg1>
    6040:	57 fd       	sbrc	r21, 7
    6042:	04 d0       	rcall	.+8      	; 0x604c <__divmodsi4_neg2>
    6044:	34 d0       	rcall	.+104    	; 0x60ae <__udivmodsi4>
    6046:	0a d0       	rcall	.+20     	; 0x605c <__divmodsi4_neg1>
    6048:	00 1c       	adc	r0, r0
    604a:	38 f4       	brcc	.+14     	; 0x605a <__divmodsi4_exit>

0000604c <__divmodsi4_neg2>:
    604c:	50 95       	com	r21
    604e:	40 95       	com	r20
    6050:	30 95       	com	r19
    6052:	21 95       	neg	r18
    6054:	3f 4f       	sbci	r19, 0xFF	; 255
    6056:	4f 4f       	sbci	r20, 0xFF	; 255
    6058:	5f 4f       	sbci	r21, 0xFF	; 255

0000605a <__divmodsi4_exit>:
    605a:	08 95       	ret

0000605c <__divmodsi4_neg1>:
    605c:	f6 f7       	brtc	.-4      	; 0x605a <__divmodsi4_exit>
    605e:	90 95       	com	r25
    6060:	80 95       	com	r24
    6062:	70 95       	com	r23
    6064:	61 95       	neg	r22
    6066:	7f 4f       	sbci	r23, 0xFF	; 255
    6068:	8f 4f       	sbci	r24, 0xFF	; 255
    606a:	9f 4f       	sbci	r25, 0xFF	; 255
    606c:	08 95       	ret

0000606e <__udivmodqi4>:
    606e:	99 1b       	sub	r25, r25
    6070:	79 e0       	ldi	r23, 0x09	; 9
    6072:	04 c0       	rjmp	.+8      	; 0x607c <__udivmodqi4_ep>

00006074 <__udivmodqi4_loop>:
    6074:	99 1f       	adc	r25, r25
    6076:	96 17       	cp	r25, r22
    6078:	08 f0       	brcs	.+2      	; 0x607c <__udivmodqi4_ep>
    607a:	96 1b       	sub	r25, r22

0000607c <__udivmodqi4_ep>:
    607c:	88 1f       	adc	r24, r24
    607e:	7a 95       	dec	r23
    6080:	c9 f7       	brne	.-14     	; 0x6074 <__udivmodqi4_loop>
    6082:	80 95       	com	r24
    6084:	08 95       	ret

00006086 <__udivmodhi4>:
    6086:	aa 1b       	sub	r26, r26
    6088:	bb 1b       	sub	r27, r27
    608a:	51 e1       	ldi	r21, 0x11	; 17
    608c:	07 c0       	rjmp	.+14     	; 0x609c <__udivmodhi4_ep>

0000608e <__udivmodhi4_loop>:
    608e:	aa 1f       	adc	r26, r26
    6090:	bb 1f       	adc	r27, r27
    6092:	a6 17       	cp	r26, r22
    6094:	b7 07       	cpc	r27, r23
    6096:	10 f0       	brcs	.+4      	; 0x609c <__udivmodhi4_ep>
    6098:	a6 1b       	sub	r26, r22
    609a:	b7 0b       	sbc	r27, r23

0000609c <__udivmodhi4_ep>:
    609c:	88 1f       	adc	r24, r24
    609e:	99 1f       	adc	r25, r25
    60a0:	5a 95       	dec	r21
    60a2:	a9 f7       	brne	.-22     	; 0x608e <__udivmodhi4_loop>
    60a4:	80 95       	com	r24
    60a6:	90 95       	com	r25
    60a8:	bc 01       	movw	r22, r24
    60aa:	cd 01       	movw	r24, r26
    60ac:	08 95       	ret

000060ae <__udivmodsi4>:
    60ae:	a1 e2       	ldi	r26, 0x21	; 33
    60b0:	1a 2e       	mov	r1, r26
    60b2:	aa 1b       	sub	r26, r26
    60b4:	bb 1b       	sub	r27, r27
    60b6:	fd 01       	movw	r30, r26
    60b8:	0d c0       	rjmp	.+26     	; 0x60d4 <__udivmodsi4_ep>

000060ba <__udivmodsi4_loop>:
    60ba:	aa 1f       	adc	r26, r26
    60bc:	bb 1f       	adc	r27, r27
    60be:	ee 1f       	adc	r30, r30
    60c0:	ff 1f       	adc	r31, r31
    60c2:	a2 17       	cp	r26, r18
    60c4:	b3 07       	cpc	r27, r19
    60c6:	e4 07       	cpc	r30, r20
    60c8:	f5 07       	cpc	r31, r21
    60ca:	20 f0       	brcs	.+8      	; 0x60d4 <__udivmodsi4_ep>
    60cc:	a2 1b       	sub	r26, r18
    60ce:	b3 0b       	sbc	r27, r19
    60d0:	e4 0b       	sbc	r30, r20
    60d2:	f5 0b       	sbc	r31, r21

000060d4 <__udivmodsi4_ep>:
    60d4:	66 1f       	adc	r22, r22
    60d6:	77 1f       	adc	r23, r23
    60d8:	88 1f       	adc	r24, r24
    60da:	99 1f       	adc	r25, r25
    60dc:	1a 94       	dec	r1
    60de:	69 f7       	brne	.-38     	; 0x60ba <__udivmodsi4_loop>
    60e0:	60 95       	com	r22
    60e2:	70 95       	com	r23
    60e4:	80 95       	com	r24
    60e6:	90 95       	com	r25
    60e8:	9b 01       	movw	r18, r22
    60ea:	ac 01       	movw	r20, r24
    60ec:	bd 01       	movw	r22, r26
    60ee:	cf 01       	movw	r24, r30
    60f0:	08 95       	ret

000060f2 <__prologue_saves__>:
    60f2:	2f 92       	push	r2
    60f4:	3f 92       	push	r3
    60f6:	4f 92       	push	r4
    60f8:	5f 92       	push	r5
    60fa:	6f 92       	push	r6
    60fc:	7f 92       	push	r7
    60fe:	8f 92       	push	r8
    6100:	9f 92       	push	r9
    6102:	af 92       	push	r10
    6104:	bf 92       	push	r11
    6106:	cf 92       	push	r12
    6108:	df 92       	push	r13
    610a:	ef 92       	push	r14
    610c:	ff 92       	push	r15
    610e:	0f 93       	push	r16
    6110:	1f 93       	push	r17
    6112:	cf 93       	push	r28
    6114:	df 93       	push	r29
    6116:	cd b7       	in	r28, 0x3d	; 61
    6118:	de b7       	in	r29, 0x3e	; 62
    611a:	ca 1b       	sub	r28, r26
    611c:	db 0b       	sbc	r29, r27
    611e:	0f b6       	in	r0, 0x3f	; 63
    6120:	f8 94       	cli
    6122:	de bf       	out	0x3e, r29	; 62
    6124:	0f be       	out	0x3f, r0	; 63
    6126:	cd bf       	out	0x3d, r28	; 61
    6128:	09 94       	ijmp

0000612a <__epilogue_restores__>:
    612a:	2a 88       	ldd	r2, Y+18	; 0x12
    612c:	39 88       	ldd	r3, Y+17	; 0x11
    612e:	48 88       	ldd	r4, Y+16	; 0x10
    6130:	5f 84       	ldd	r5, Y+15	; 0x0f
    6132:	6e 84       	ldd	r6, Y+14	; 0x0e
    6134:	7d 84       	ldd	r7, Y+13	; 0x0d
    6136:	8c 84       	ldd	r8, Y+12	; 0x0c
    6138:	9b 84       	ldd	r9, Y+11	; 0x0b
    613a:	aa 84       	ldd	r10, Y+10	; 0x0a
    613c:	b9 84       	ldd	r11, Y+9	; 0x09
    613e:	c8 84       	ldd	r12, Y+8	; 0x08
    6140:	df 80       	ldd	r13, Y+7	; 0x07
    6142:	ee 80       	ldd	r14, Y+6	; 0x06
    6144:	fd 80       	ldd	r15, Y+5	; 0x05
    6146:	0c 81       	ldd	r16, Y+4	; 0x04
    6148:	1b 81       	ldd	r17, Y+3	; 0x03
    614a:	aa 81       	ldd	r26, Y+2	; 0x02
    614c:	b9 81       	ldd	r27, Y+1	; 0x01
    614e:	ce 0f       	add	r28, r30
    6150:	d1 1d       	adc	r29, r1
    6152:	0f b6       	in	r0, 0x3f	; 63
    6154:	f8 94       	cli
    6156:	de bf       	out	0x3e, r29	; 62
    6158:	0f be       	out	0x3f, r0	; 63
    615a:	cd bf       	out	0x3d, r28	; 61
    615c:	ed 01       	movw	r28, r26
    615e:	08 95       	ret

00006160 <do_rand>:
    6160:	a0 e0       	ldi	r26, 0x00	; 0
    6162:	b0 e0       	ldi	r27, 0x00	; 0
    6164:	e6 eb       	ldi	r30, 0xB6	; 182
    6166:	f0 e3       	ldi	r31, 0x30	; 48
    6168:	0c 94 81 30 	jmp	0x6102	; 0x6102 <__prologue_saves__+0x10>
    616c:	ec 01       	movw	r28, r24
    616e:	a8 80       	ld	r10, Y
    6170:	b9 80       	ldd	r11, Y+1	; 0x01
    6172:	ca 80       	ldd	r12, Y+2	; 0x02
    6174:	db 80       	ldd	r13, Y+3	; 0x03
    6176:	a1 14       	cp	r10, r1
    6178:	b1 04       	cpc	r11, r1
    617a:	c1 04       	cpc	r12, r1
    617c:	d1 04       	cpc	r13, r1
    617e:	41 f4       	brne	.+16     	; 0x6190 <do_rand+0x30>
    6180:	84 e2       	ldi	r24, 0x24	; 36
    6182:	a8 2e       	mov	r10, r24
    6184:	89 ed       	ldi	r24, 0xD9	; 217
    6186:	b8 2e       	mov	r11, r24
    6188:	8b e5       	ldi	r24, 0x5B	; 91
    618a:	c8 2e       	mov	r12, r24
    618c:	87 e0       	ldi	r24, 0x07	; 7
    618e:	d8 2e       	mov	r13, r24
    6190:	c6 01       	movw	r24, r12
    6192:	b5 01       	movw	r22, r10
    6194:	2d e1       	ldi	r18, 0x1D	; 29
    6196:	33 ef       	ldi	r19, 0xF3	; 243
    6198:	41 e0       	ldi	r20, 0x01	; 1
    619a:	50 e0       	ldi	r21, 0x00	; 0
    619c:	0e 94 1c 30 	call	0x6038	; 0x6038 <__divmodsi4>
    61a0:	27 ea       	ldi	r18, 0xA7	; 167
    61a2:	31 e4       	ldi	r19, 0x41	; 65
    61a4:	40 e0       	ldi	r20, 0x00	; 0
    61a6:	50 e0       	ldi	r21, 0x00	; 0
    61a8:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__mulsi3>
    61ac:	7b 01       	movw	r14, r22
    61ae:	8c 01       	movw	r16, r24
    61b0:	c6 01       	movw	r24, r12
    61b2:	b5 01       	movw	r22, r10
    61b4:	2d e1       	ldi	r18, 0x1D	; 29
    61b6:	33 ef       	ldi	r19, 0xF3	; 243
    61b8:	41 e0       	ldi	r20, 0x01	; 1
    61ba:	50 e0       	ldi	r21, 0x00	; 0
    61bc:	0e 94 1c 30 	call	0x6038	; 0x6038 <__divmodsi4>
    61c0:	ca 01       	movw	r24, r20
    61c2:	b9 01       	movw	r22, r18
    61c4:	2c ee       	ldi	r18, 0xEC	; 236
    61c6:	34 ef       	ldi	r19, 0xF4	; 244
    61c8:	4f ef       	ldi	r20, 0xFF	; 255
    61ca:	5f ef       	ldi	r21, 0xFF	; 255
    61cc:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <__mulsi3>
    61d0:	6e 0d       	add	r22, r14
    61d2:	7f 1d       	adc	r23, r15
    61d4:	80 1f       	adc	r24, r16
    61d6:	91 1f       	adc	r25, r17
    61d8:	97 ff       	sbrs	r25, 7
    61da:	04 c0       	rjmp	.+8      	; 0x61e4 <do_rand+0x84>
    61dc:	61 50       	subi	r22, 0x01	; 1
    61de:	70 40       	sbci	r23, 0x00	; 0
    61e0:	80 40       	sbci	r24, 0x00	; 0
    61e2:	90 48       	sbci	r25, 0x80	; 128
    61e4:	68 83       	st	Y, r22
    61e6:	79 83       	std	Y+1, r23	; 0x01
    61e8:	8a 83       	std	Y+2, r24	; 0x02
    61ea:	9b 83       	std	Y+3, r25	; 0x03
    61ec:	9b 01       	movw	r18, r22
    61ee:	3f 77       	andi	r19, 0x7F	; 127
    61f0:	c9 01       	movw	r24, r18
    61f2:	cd b7       	in	r28, 0x3d	; 61
    61f4:	de b7       	in	r29, 0x3e	; 62
    61f6:	ea e0       	ldi	r30, 0x0A	; 10
    61f8:	0c 94 9d 30 	jmp	0x613a	; 0x613a <__epilogue_restores__+0x10>

000061fc <rand_r>:
    61fc:	0e 94 b0 30 	call	0x6160	; 0x6160 <do_rand>
    6200:	08 95       	ret

00006202 <rand>:
    6202:	8b e7       	ldi	r24, 0x7B	; 123
    6204:	91 e0       	ldi	r25, 0x01	; 1
    6206:	0e 94 b0 30 	call	0x6160	; 0x6160 <do_rand>
    620a:	08 95       	ret

0000620c <srand>:
    620c:	a0 e0       	ldi	r26, 0x00	; 0
    620e:	b0 e0       	ldi	r27, 0x00	; 0
    6210:	80 93 7b 01 	sts	0x017B, r24
    6214:	90 93 7c 01 	sts	0x017C, r25
    6218:	a0 93 7d 01 	sts	0x017D, r26
    621c:	b0 93 7e 01 	sts	0x017E, r27
    6220:	08 95       	ret

00006222 <_exit>:
    6222:	f8 94       	cli

00006224 <__stop_program>:
    6224:	ff cf       	rjmp	.-2      	; 0x6224 <__stop_program>
